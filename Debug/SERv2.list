
SERv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006888  08006888  00016888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069a4  080069a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080069a4  080069a4  000169a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069ac  080069ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069ac  080069ac  000169ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069b0  080069b0  000169b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080069b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  2000000c  080069c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080069c0  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016170  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a53  00000000  00000000  000361a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00038bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  00039f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f53  00000000  00000000  0003b170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c6d  00000000  00000000  000540c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a42a1  00000000  00000000  00069d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010dfd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004780  00000000  00000000  0010e024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006870 	.word	0x08006870

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08006870 	.word	0x08006870

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 fee6 	bl	8001224 <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 fee1 	bl	8001224 <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__aeabi_dadd>:
 80005cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ce:	464f      	mov	r7, r9
 80005d0:	4646      	mov	r6, r8
 80005d2:	46d6      	mov	lr, sl
 80005d4:	000d      	movs	r5, r1
 80005d6:	0004      	movs	r4, r0
 80005d8:	b5c0      	push	{r6, r7, lr}
 80005da:	001f      	movs	r7, r3
 80005dc:	0011      	movs	r1, r2
 80005de:	0328      	lsls	r0, r5, #12
 80005e0:	0f62      	lsrs	r2, r4, #29
 80005e2:	0a40      	lsrs	r0, r0, #9
 80005e4:	4310      	orrs	r0, r2
 80005e6:	007a      	lsls	r2, r7, #1
 80005e8:	0d52      	lsrs	r2, r2, #21
 80005ea:	00e3      	lsls	r3, r4, #3
 80005ec:	033c      	lsls	r4, r7, #12
 80005ee:	4691      	mov	r9, r2
 80005f0:	0a64      	lsrs	r4, r4, #9
 80005f2:	0ffa      	lsrs	r2, r7, #31
 80005f4:	0f4f      	lsrs	r7, r1, #29
 80005f6:	006e      	lsls	r6, r5, #1
 80005f8:	4327      	orrs	r7, r4
 80005fa:	4692      	mov	sl, r2
 80005fc:	46b8      	mov	r8, r7
 80005fe:	0d76      	lsrs	r6, r6, #21
 8000600:	0fed      	lsrs	r5, r5, #31
 8000602:	00c9      	lsls	r1, r1, #3
 8000604:	4295      	cmp	r5, r2
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x3e>
 8000608:	e099      	b.n	800073e <__aeabi_dadd+0x172>
 800060a:	464c      	mov	r4, r9
 800060c:	1b34      	subs	r4, r6, r4
 800060e:	46a4      	mov	ip, r4
 8000610:	2c00      	cmp	r4, #0
 8000612:	dc00      	bgt.n	8000616 <__aeabi_dadd+0x4a>
 8000614:	e07c      	b.n	8000710 <__aeabi_dadd+0x144>
 8000616:	464a      	mov	r2, r9
 8000618:	2a00      	cmp	r2, #0
 800061a:	d100      	bne.n	800061e <__aeabi_dadd+0x52>
 800061c:	e0b8      	b.n	8000790 <__aeabi_dadd+0x1c4>
 800061e:	4ac5      	ldr	r2, [pc, #788]	; (8000934 <__aeabi_dadd+0x368>)
 8000620:	4296      	cmp	r6, r2
 8000622:	d100      	bne.n	8000626 <__aeabi_dadd+0x5a>
 8000624:	e11c      	b.n	8000860 <__aeabi_dadd+0x294>
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	003c      	movs	r4, r7
 800062a:	0412      	lsls	r2, r2, #16
 800062c:	4314      	orrs	r4, r2
 800062e:	46a0      	mov	r8, r4
 8000630:	4662      	mov	r2, ip
 8000632:	2a38      	cmp	r2, #56	; 0x38
 8000634:	dd00      	ble.n	8000638 <__aeabi_dadd+0x6c>
 8000636:	e161      	b.n	80008fc <__aeabi_dadd+0x330>
 8000638:	2a1f      	cmp	r2, #31
 800063a:	dd00      	ble.n	800063e <__aeabi_dadd+0x72>
 800063c:	e1cc      	b.n	80009d8 <__aeabi_dadd+0x40c>
 800063e:	4664      	mov	r4, ip
 8000640:	2220      	movs	r2, #32
 8000642:	1b12      	subs	r2, r2, r4
 8000644:	4644      	mov	r4, r8
 8000646:	4094      	lsls	r4, r2
 8000648:	000f      	movs	r7, r1
 800064a:	46a1      	mov	r9, r4
 800064c:	4664      	mov	r4, ip
 800064e:	4091      	lsls	r1, r2
 8000650:	40e7      	lsrs	r7, r4
 8000652:	464c      	mov	r4, r9
 8000654:	1e4a      	subs	r2, r1, #1
 8000656:	4191      	sbcs	r1, r2
 8000658:	433c      	orrs	r4, r7
 800065a:	4642      	mov	r2, r8
 800065c:	4321      	orrs	r1, r4
 800065e:	4664      	mov	r4, ip
 8000660:	40e2      	lsrs	r2, r4
 8000662:	1a80      	subs	r0, r0, r2
 8000664:	1a5c      	subs	r4, r3, r1
 8000666:	42a3      	cmp	r3, r4
 8000668:	419b      	sbcs	r3, r3
 800066a:	425f      	negs	r7, r3
 800066c:	1bc7      	subs	r7, r0, r7
 800066e:	023b      	lsls	r3, r7, #8
 8000670:	d400      	bmi.n	8000674 <__aeabi_dadd+0xa8>
 8000672:	e0d0      	b.n	8000816 <__aeabi_dadd+0x24a>
 8000674:	027f      	lsls	r7, r7, #9
 8000676:	0a7f      	lsrs	r7, r7, #9
 8000678:	2f00      	cmp	r7, #0
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0xb2>
 800067c:	e0ff      	b.n	800087e <__aeabi_dadd+0x2b2>
 800067e:	0038      	movs	r0, r7
 8000680:	f000 fdb2 	bl	80011e8 <__clzsi2>
 8000684:	0001      	movs	r1, r0
 8000686:	3908      	subs	r1, #8
 8000688:	2320      	movs	r3, #32
 800068a:	0022      	movs	r2, r4
 800068c:	1a5b      	subs	r3, r3, r1
 800068e:	408f      	lsls	r7, r1
 8000690:	40da      	lsrs	r2, r3
 8000692:	408c      	lsls	r4, r1
 8000694:	4317      	orrs	r7, r2
 8000696:	42b1      	cmp	r1, r6
 8000698:	da00      	bge.n	800069c <__aeabi_dadd+0xd0>
 800069a:	e0ff      	b.n	800089c <__aeabi_dadd+0x2d0>
 800069c:	1b89      	subs	r1, r1, r6
 800069e:	1c4b      	adds	r3, r1, #1
 80006a0:	2b1f      	cmp	r3, #31
 80006a2:	dd00      	ble.n	80006a6 <__aeabi_dadd+0xda>
 80006a4:	e0a8      	b.n	80007f8 <__aeabi_dadd+0x22c>
 80006a6:	2220      	movs	r2, #32
 80006a8:	0039      	movs	r1, r7
 80006aa:	1ad2      	subs	r2, r2, r3
 80006ac:	0020      	movs	r0, r4
 80006ae:	4094      	lsls	r4, r2
 80006b0:	4091      	lsls	r1, r2
 80006b2:	40d8      	lsrs	r0, r3
 80006b4:	1e62      	subs	r2, r4, #1
 80006b6:	4194      	sbcs	r4, r2
 80006b8:	40df      	lsrs	r7, r3
 80006ba:	2600      	movs	r6, #0
 80006bc:	4301      	orrs	r1, r0
 80006be:	430c      	orrs	r4, r1
 80006c0:	0763      	lsls	r3, r4, #29
 80006c2:	d009      	beq.n	80006d8 <__aeabi_dadd+0x10c>
 80006c4:	230f      	movs	r3, #15
 80006c6:	4023      	ands	r3, r4
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d005      	beq.n	80006d8 <__aeabi_dadd+0x10c>
 80006cc:	1d23      	adds	r3, r4, #4
 80006ce:	42a3      	cmp	r3, r4
 80006d0:	41a4      	sbcs	r4, r4
 80006d2:	4264      	negs	r4, r4
 80006d4:	193f      	adds	r7, r7, r4
 80006d6:	001c      	movs	r4, r3
 80006d8:	023b      	lsls	r3, r7, #8
 80006da:	d400      	bmi.n	80006de <__aeabi_dadd+0x112>
 80006dc:	e09e      	b.n	800081c <__aeabi_dadd+0x250>
 80006de:	4b95      	ldr	r3, [pc, #596]	; (8000934 <__aeabi_dadd+0x368>)
 80006e0:	3601      	adds	r6, #1
 80006e2:	429e      	cmp	r6, r3
 80006e4:	d100      	bne.n	80006e8 <__aeabi_dadd+0x11c>
 80006e6:	e0b7      	b.n	8000858 <__aeabi_dadd+0x28c>
 80006e8:	4a93      	ldr	r2, [pc, #588]	; (8000938 <__aeabi_dadd+0x36c>)
 80006ea:	08e4      	lsrs	r4, r4, #3
 80006ec:	4017      	ands	r7, r2
 80006ee:	077b      	lsls	r3, r7, #29
 80006f0:	0571      	lsls	r1, r6, #21
 80006f2:	027f      	lsls	r7, r7, #9
 80006f4:	4323      	orrs	r3, r4
 80006f6:	0b3f      	lsrs	r7, r7, #12
 80006f8:	0d4a      	lsrs	r2, r1, #21
 80006fa:	0512      	lsls	r2, r2, #20
 80006fc:	433a      	orrs	r2, r7
 80006fe:	07ed      	lsls	r5, r5, #31
 8000700:	432a      	orrs	r2, r5
 8000702:	0018      	movs	r0, r3
 8000704:	0011      	movs	r1, r2
 8000706:	bce0      	pop	{r5, r6, r7}
 8000708:	46ba      	mov	sl, r7
 800070a:	46b1      	mov	r9, r6
 800070c:	46a8      	mov	r8, r5
 800070e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000710:	2c00      	cmp	r4, #0
 8000712:	d04b      	beq.n	80007ac <__aeabi_dadd+0x1e0>
 8000714:	464c      	mov	r4, r9
 8000716:	1ba4      	subs	r4, r4, r6
 8000718:	46a4      	mov	ip, r4
 800071a:	2e00      	cmp	r6, #0
 800071c:	d000      	beq.n	8000720 <__aeabi_dadd+0x154>
 800071e:	e123      	b.n	8000968 <__aeabi_dadd+0x39c>
 8000720:	0004      	movs	r4, r0
 8000722:	431c      	orrs	r4, r3
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x15c>
 8000726:	e1af      	b.n	8000a88 <__aeabi_dadd+0x4bc>
 8000728:	4662      	mov	r2, ip
 800072a:	1e54      	subs	r4, r2, #1
 800072c:	2a01      	cmp	r2, #1
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0x166>
 8000730:	e215      	b.n	8000b5e <__aeabi_dadd+0x592>
 8000732:	4d80      	ldr	r5, [pc, #512]	; (8000934 <__aeabi_dadd+0x368>)
 8000734:	45ac      	cmp	ip, r5
 8000736:	d100      	bne.n	800073a <__aeabi_dadd+0x16e>
 8000738:	e1c8      	b.n	8000acc <__aeabi_dadd+0x500>
 800073a:	46a4      	mov	ip, r4
 800073c:	e11b      	b.n	8000976 <__aeabi_dadd+0x3aa>
 800073e:	464a      	mov	r2, r9
 8000740:	1ab2      	subs	r2, r6, r2
 8000742:	4694      	mov	ip, r2
 8000744:	2a00      	cmp	r2, #0
 8000746:	dc00      	bgt.n	800074a <__aeabi_dadd+0x17e>
 8000748:	e0ac      	b.n	80008a4 <__aeabi_dadd+0x2d8>
 800074a:	464a      	mov	r2, r9
 800074c:	2a00      	cmp	r2, #0
 800074e:	d043      	beq.n	80007d8 <__aeabi_dadd+0x20c>
 8000750:	4a78      	ldr	r2, [pc, #480]	; (8000934 <__aeabi_dadd+0x368>)
 8000752:	4296      	cmp	r6, r2
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x18c>
 8000756:	e1af      	b.n	8000ab8 <__aeabi_dadd+0x4ec>
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	003c      	movs	r4, r7
 800075c:	0412      	lsls	r2, r2, #16
 800075e:	4314      	orrs	r4, r2
 8000760:	46a0      	mov	r8, r4
 8000762:	4662      	mov	r2, ip
 8000764:	2a38      	cmp	r2, #56	; 0x38
 8000766:	dc67      	bgt.n	8000838 <__aeabi_dadd+0x26c>
 8000768:	2a1f      	cmp	r2, #31
 800076a:	dc00      	bgt.n	800076e <__aeabi_dadd+0x1a2>
 800076c:	e15f      	b.n	8000a2e <__aeabi_dadd+0x462>
 800076e:	4647      	mov	r7, r8
 8000770:	3a20      	subs	r2, #32
 8000772:	40d7      	lsrs	r7, r2
 8000774:	4662      	mov	r2, ip
 8000776:	2a20      	cmp	r2, #32
 8000778:	d005      	beq.n	8000786 <__aeabi_dadd+0x1ba>
 800077a:	4664      	mov	r4, ip
 800077c:	2240      	movs	r2, #64	; 0x40
 800077e:	1b12      	subs	r2, r2, r4
 8000780:	4644      	mov	r4, r8
 8000782:	4094      	lsls	r4, r2
 8000784:	4321      	orrs	r1, r4
 8000786:	1e4a      	subs	r2, r1, #1
 8000788:	4191      	sbcs	r1, r2
 800078a:	000c      	movs	r4, r1
 800078c:	433c      	orrs	r4, r7
 800078e:	e057      	b.n	8000840 <__aeabi_dadd+0x274>
 8000790:	003a      	movs	r2, r7
 8000792:	430a      	orrs	r2, r1
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x1cc>
 8000796:	e105      	b.n	80009a4 <__aeabi_dadd+0x3d8>
 8000798:	0022      	movs	r2, r4
 800079a:	3a01      	subs	r2, #1
 800079c:	2c01      	cmp	r4, #1
 800079e:	d100      	bne.n	80007a2 <__aeabi_dadd+0x1d6>
 80007a0:	e182      	b.n	8000aa8 <__aeabi_dadd+0x4dc>
 80007a2:	4c64      	ldr	r4, [pc, #400]	; (8000934 <__aeabi_dadd+0x368>)
 80007a4:	45a4      	cmp	ip, r4
 80007a6:	d05b      	beq.n	8000860 <__aeabi_dadd+0x294>
 80007a8:	4694      	mov	ip, r2
 80007aa:	e741      	b.n	8000630 <__aeabi_dadd+0x64>
 80007ac:	4c63      	ldr	r4, [pc, #396]	; (800093c <__aeabi_dadd+0x370>)
 80007ae:	1c77      	adds	r7, r6, #1
 80007b0:	4227      	tst	r7, r4
 80007b2:	d000      	beq.n	80007b6 <__aeabi_dadd+0x1ea>
 80007b4:	e0c4      	b.n	8000940 <__aeabi_dadd+0x374>
 80007b6:	0004      	movs	r4, r0
 80007b8:	431c      	orrs	r4, r3
 80007ba:	2e00      	cmp	r6, #0
 80007bc:	d000      	beq.n	80007c0 <__aeabi_dadd+0x1f4>
 80007be:	e169      	b.n	8000a94 <__aeabi_dadd+0x4c8>
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x1fa>
 80007c4:	e1bf      	b.n	8000b46 <__aeabi_dadd+0x57a>
 80007c6:	4644      	mov	r4, r8
 80007c8:	430c      	orrs	r4, r1
 80007ca:	d000      	beq.n	80007ce <__aeabi_dadd+0x202>
 80007cc:	e1d0      	b.n	8000b70 <__aeabi_dadd+0x5a4>
 80007ce:	0742      	lsls	r2, r0, #29
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	08c0      	lsrs	r0, r0, #3
 80007d6:	e029      	b.n	800082c <__aeabi_dadd+0x260>
 80007d8:	003a      	movs	r2, r7
 80007da:	430a      	orrs	r2, r1
 80007dc:	d100      	bne.n	80007e0 <__aeabi_dadd+0x214>
 80007de:	e170      	b.n	8000ac2 <__aeabi_dadd+0x4f6>
 80007e0:	4662      	mov	r2, ip
 80007e2:	4664      	mov	r4, ip
 80007e4:	3a01      	subs	r2, #1
 80007e6:	2c01      	cmp	r4, #1
 80007e8:	d100      	bne.n	80007ec <__aeabi_dadd+0x220>
 80007ea:	e0e0      	b.n	80009ae <__aeabi_dadd+0x3e2>
 80007ec:	4c51      	ldr	r4, [pc, #324]	; (8000934 <__aeabi_dadd+0x368>)
 80007ee:	45a4      	cmp	ip, r4
 80007f0:	d100      	bne.n	80007f4 <__aeabi_dadd+0x228>
 80007f2:	e161      	b.n	8000ab8 <__aeabi_dadd+0x4ec>
 80007f4:	4694      	mov	ip, r2
 80007f6:	e7b4      	b.n	8000762 <__aeabi_dadd+0x196>
 80007f8:	003a      	movs	r2, r7
 80007fa:	391f      	subs	r1, #31
 80007fc:	40ca      	lsrs	r2, r1
 80007fe:	0011      	movs	r1, r2
 8000800:	2b20      	cmp	r3, #32
 8000802:	d003      	beq.n	800080c <__aeabi_dadd+0x240>
 8000804:	2240      	movs	r2, #64	; 0x40
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	409f      	lsls	r7, r3
 800080a:	433c      	orrs	r4, r7
 800080c:	1e63      	subs	r3, r4, #1
 800080e:	419c      	sbcs	r4, r3
 8000810:	2700      	movs	r7, #0
 8000812:	2600      	movs	r6, #0
 8000814:	430c      	orrs	r4, r1
 8000816:	0763      	lsls	r3, r4, #29
 8000818:	d000      	beq.n	800081c <__aeabi_dadd+0x250>
 800081a:	e753      	b.n	80006c4 <__aeabi_dadd+0xf8>
 800081c:	46b4      	mov	ip, r6
 800081e:	08e4      	lsrs	r4, r4, #3
 8000820:	077b      	lsls	r3, r7, #29
 8000822:	4323      	orrs	r3, r4
 8000824:	08f8      	lsrs	r0, r7, #3
 8000826:	4a43      	ldr	r2, [pc, #268]	; (8000934 <__aeabi_dadd+0x368>)
 8000828:	4594      	cmp	ip, r2
 800082a:	d01d      	beq.n	8000868 <__aeabi_dadd+0x29c>
 800082c:	4662      	mov	r2, ip
 800082e:	0307      	lsls	r7, r0, #12
 8000830:	0552      	lsls	r2, r2, #21
 8000832:	0b3f      	lsrs	r7, r7, #12
 8000834:	0d52      	lsrs	r2, r2, #21
 8000836:	e760      	b.n	80006fa <__aeabi_dadd+0x12e>
 8000838:	4644      	mov	r4, r8
 800083a:	430c      	orrs	r4, r1
 800083c:	1e62      	subs	r2, r4, #1
 800083e:	4194      	sbcs	r4, r2
 8000840:	18e4      	adds	r4, r4, r3
 8000842:	429c      	cmp	r4, r3
 8000844:	419b      	sbcs	r3, r3
 8000846:	425f      	negs	r7, r3
 8000848:	183f      	adds	r7, r7, r0
 800084a:	023b      	lsls	r3, r7, #8
 800084c:	d5e3      	bpl.n	8000816 <__aeabi_dadd+0x24a>
 800084e:	4b39      	ldr	r3, [pc, #228]	; (8000934 <__aeabi_dadd+0x368>)
 8000850:	3601      	adds	r6, #1
 8000852:	429e      	cmp	r6, r3
 8000854:	d000      	beq.n	8000858 <__aeabi_dadd+0x28c>
 8000856:	e0b5      	b.n	80009c4 <__aeabi_dadd+0x3f8>
 8000858:	0032      	movs	r2, r6
 800085a:	2700      	movs	r7, #0
 800085c:	2300      	movs	r3, #0
 800085e:	e74c      	b.n	80006fa <__aeabi_dadd+0x12e>
 8000860:	0742      	lsls	r2, r0, #29
 8000862:	08db      	lsrs	r3, r3, #3
 8000864:	4313      	orrs	r3, r2
 8000866:	08c0      	lsrs	r0, r0, #3
 8000868:	001a      	movs	r2, r3
 800086a:	4302      	orrs	r2, r0
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x2a4>
 800086e:	e1e1      	b.n	8000c34 <__aeabi_dadd+0x668>
 8000870:	2780      	movs	r7, #128	; 0x80
 8000872:	033f      	lsls	r7, r7, #12
 8000874:	4307      	orrs	r7, r0
 8000876:	033f      	lsls	r7, r7, #12
 8000878:	4a2e      	ldr	r2, [pc, #184]	; (8000934 <__aeabi_dadd+0x368>)
 800087a:	0b3f      	lsrs	r7, r7, #12
 800087c:	e73d      	b.n	80006fa <__aeabi_dadd+0x12e>
 800087e:	0020      	movs	r0, r4
 8000880:	f000 fcb2 	bl	80011e8 <__clzsi2>
 8000884:	0001      	movs	r1, r0
 8000886:	3118      	adds	r1, #24
 8000888:	291f      	cmp	r1, #31
 800088a:	dc00      	bgt.n	800088e <__aeabi_dadd+0x2c2>
 800088c:	e6fc      	b.n	8000688 <__aeabi_dadd+0xbc>
 800088e:	3808      	subs	r0, #8
 8000890:	4084      	lsls	r4, r0
 8000892:	0027      	movs	r7, r4
 8000894:	2400      	movs	r4, #0
 8000896:	42b1      	cmp	r1, r6
 8000898:	db00      	blt.n	800089c <__aeabi_dadd+0x2d0>
 800089a:	e6ff      	b.n	800069c <__aeabi_dadd+0xd0>
 800089c:	4a26      	ldr	r2, [pc, #152]	; (8000938 <__aeabi_dadd+0x36c>)
 800089e:	1a76      	subs	r6, r6, r1
 80008a0:	4017      	ands	r7, r2
 80008a2:	e70d      	b.n	80006c0 <__aeabi_dadd+0xf4>
 80008a4:	2a00      	cmp	r2, #0
 80008a6:	d02f      	beq.n	8000908 <__aeabi_dadd+0x33c>
 80008a8:	464a      	mov	r2, r9
 80008aa:	1b92      	subs	r2, r2, r6
 80008ac:	4694      	mov	ip, r2
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	d100      	bne.n	80008b4 <__aeabi_dadd+0x2e8>
 80008b2:	e0ad      	b.n	8000a10 <__aeabi_dadd+0x444>
 80008b4:	4a1f      	ldr	r2, [pc, #124]	; (8000934 <__aeabi_dadd+0x368>)
 80008b6:	4591      	cmp	r9, r2
 80008b8:	d100      	bne.n	80008bc <__aeabi_dadd+0x2f0>
 80008ba:	e10f      	b.n	8000adc <__aeabi_dadd+0x510>
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0412      	lsls	r2, r2, #16
 80008c0:	4310      	orrs	r0, r2
 80008c2:	4662      	mov	r2, ip
 80008c4:	2a38      	cmp	r2, #56	; 0x38
 80008c6:	dd00      	ble.n	80008ca <__aeabi_dadd+0x2fe>
 80008c8:	e10f      	b.n	8000aea <__aeabi_dadd+0x51e>
 80008ca:	2a1f      	cmp	r2, #31
 80008cc:	dd00      	ble.n	80008d0 <__aeabi_dadd+0x304>
 80008ce:	e180      	b.n	8000bd2 <__aeabi_dadd+0x606>
 80008d0:	4664      	mov	r4, ip
 80008d2:	2220      	movs	r2, #32
 80008d4:	001e      	movs	r6, r3
 80008d6:	1b12      	subs	r2, r2, r4
 80008d8:	4667      	mov	r7, ip
 80008da:	0004      	movs	r4, r0
 80008dc:	4093      	lsls	r3, r2
 80008de:	4094      	lsls	r4, r2
 80008e0:	40fe      	lsrs	r6, r7
 80008e2:	1e5a      	subs	r2, r3, #1
 80008e4:	4193      	sbcs	r3, r2
 80008e6:	40f8      	lsrs	r0, r7
 80008e8:	4334      	orrs	r4, r6
 80008ea:	431c      	orrs	r4, r3
 80008ec:	4480      	add	r8, r0
 80008ee:	1864      	adds	r4, r4, r1
 80008f0:	428c      	cmp	r4, r1
 80008f2:	41bf      	sbcs	r7, r7
 80008f4:	427f      	negs	r7, r7
 80008f6:	464e      	mov	r6, r9
 80008f8:	4447      	add	r7, r8
 80008fa:	e7a6      	b.n	800084a <__aeabi_dadd+0x27e>
 80008fc:	4642      	mov	r2, r8
 80008fe:	430a      	orrs	r2, r1
 8000900:	0011      	movs	r1, r2
 8000902:	1e4a      	subs	r2, r1, #1
 8000904:	4191      	sbcs	r1, r2
 8000906:	e6ad      	b.n	8000664 <__aeabi_dadd+0x98>
 8000908:	4c0c      	ldr	r4, [pc, #48]	; (800093c <__aeabi_dadd+0x370>)
 800090a:	1c72      	adds	r2, r6, #1
 800090c:	4222      	tst	r2, r4
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x346>
 8000910:	e0a1      	b.n	8000a56 <__aeabi_dadd+0x48a>
 8000912:	0002      	movs	r2, r0
 8000914:	431a      	orrs	r2, r3
 8000916:	2e00      	cmp	r6, #0
 8000918:	d000      	beq.n	800091c <__aeabi_dadd+0x350>
 800091a:	e0fa      	b.n	8000b12 <__aeabi_dadd+0x546>
 800091c:	2a00      	cmp	r2, #0
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x356>
 8000920:	e145      	b.n	8000bae <__aeabi_dadd+0x5e2>
 8000922:	003a      	movs	r2, r7
 8000924:	430a      	orrs	r2, r1
 8000926:	d000      	beq.n	800092a <__aeabi_dadd+0x35e>
 8000928:	e146      	b.n	8000bb8 <__aeabi_dadd+0x5ec>
 800092a:	0742      	lsls	r2, r0, #29
 800092c:	08db      	lsrs	r3, r3, #3
 800092e:	4313      	orrs	r3, r2
 8000930:	08c0      	lsrs	r0, r0, #3
 8000932:	e77b      	b.n	800082c <__aeabi_dadd+0x260>
 8000934:	000007ff 	.word	0x000007ff
 8000938:	ff7fffff 	.word	0xff7fffff
 800093c:	000007fe 	.word	0x000007fe
 8000940:	4647      	mov	r7, r8
 8000942:	1a5c      	subs	r4, r3, r1
 8000944:	1bc2      	subs	r2, r0, r7
 8000946:	42a3      	cmp	r3, r4
 8000948:	41bf      	sbcs	r7, r7
 800094a:	427f      	negs	r7, r7
 800094c:	46b9      	mov	r9, r7
 800094e:	0017      	movs	r7, r2
 8000950:	464a      	mov	r2, r9
 8000952:	1abf      	subs	r7, r7, r2
 8000954:	023a      	lsls	r2, r7, #8
 8000956:	d500      	bpl.n	800095a <__aeabi_dadd+0x38e>
 8000958:	e08d      	b.n	8000a76 <__aeabi_dadd+0x4aa>
 800095a:	0023      	movs	r3, r4
 800095c:	433b      	orrs	r3, r7
 800095e:	d000      	beq.n	8000962 <__aeabi_dadd+0x396>
 8000960:	e68a      	b.n	8000678 <__aeabi_dadd+0xac>
 8000962:	2000      	movs	r0, #0
 8000964:	2500      	movs	r5, #0
 8000966:	e761      	b.n	800082c <__aeabi_dadd+0x260>
 8000968:	4cb4      	ldr	r4, [pc, #720]	; (8000c3c <__aeabi_dadd+0x670>)
 800096a:	45a1      	cmp	r9, r4
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x3a4>
 800096e:	e0ad      	b.n	8000acc <__aeabi_dadd+0x500>
 8000970:	2480      	movs	r4, #128	; 0x80
 8000972:	0424      	lsls	r4, r4, #16
 8000974:	4320      	orrs	r0, r4
 8000976:	4664      	mov	r4, ip
 8000978:	2c38      	cmp	r4, #56	; 0x38
 800097a:	dc3d      	bgt.n	80009f8 <__aeabi_dadd+0x42c>
 800097c:	4662      	mov	r2, ip
 800097e:	2c1f      	cmp	r4, #31
 8000980:	dd00      	ble.n	8000984 <__aeabi_dadd+0x3b8>
 8000982:	e0b7      	b.n	8000af4 <__aeabi_dadd+0x528>
 8000984:	2520      	movs	r5, #32
 8000986:	001e      	movs	r6, r3
 8000988:	1b2d      	subs	r5, r5, r4
 800098a:	0004      	movs	r4, r0
 800098c:	40ab      	lsls	r3, r5
 800098e:	40ac      	lsls	r4, r5
 8000990:	40d6      	lsrs	r6, r2
 8000992:	40d0      	lsrs	r0, r2
 8000994:	4642      	mov	r2, r8
 8000996:	1e5d      	subs	r5, r3, #1
 8000998:	41ab      	sbcs	r3, r5
 800099a:	4334      	orrs	r4, r6
 800099c:	1a12      	subs	r2, r2, r0
 800099e:	4690      	mov	r8, r2
 80009a0:	4323      	orrs	r3, r4
 80009a2:	e02c      	b.n	80009fe <__aeabi_dadd+0x432>
 80009a4:	0742      	lsls	r2, r0, #29
 80009a6:	08db      	lsrs	r3, r3, #3
 80009a8:	4313      	orrs	r3, r2
 80009aa:	08c0      	lsrs	r0, r0, #3
 80009ac:	e73b      	b.n	8000826 <__aeabi_dadd+0x25a>
 80009ae:	185c      	adds	r4, r3, r1
 80009b0:	429c      	cmp	r4, r3
 80009b2:	419b      	sbcs	r3, r3
 80009b4:	4440      	add	r0, r8
 80009b6:	425b      	negs	r3, r3
 80009b8:	18c7      	adds	r7, r0, r3
 80009ba:	2601      	movs	r6, #1
 80009bc:	023b      	lsls	r3, r7, #8
 80009be:	d400      	bmi.n	80009c2 <__aeabi_dadd+0x3f6>
 80009c0:	e729      	b.n	8000816 <__aeabi_dadd+0x24a>
 80009c2:	2602      	movs	r6, #2
 80009c4:	4a9e      	ldr	r2, [pc, #632]	; (8000c40 <__aeabi_dadd+0x674>)
 80009c6:	0863      	lsrs	r3, r4, #1
 80009c8:	4017      	ands	r7, r2
 80009ca:	2201      	movs	r2, #1
 80009cc:	4014      	ands	r4, r2
 80009ce:	431c      	orrs	r4, r3
 80009d0:	07fb      	lsls	r3, r7, #31
 80009d2:	431c      	orrs	r4, r3
 80009d4:	087f      	lsrs	r7, r7, #1
 80009d6:	e673      	b.n	80006c0 <__aeabi_dadd+0xf4>
 80009d8:	4644      	mov	r4, r8
 80009da:	3a20      	subs	r2, #32
 80009dc:	40d4      	lsrs	r4, r2
 80009de:	4662      	mov	r2, ip
 80009e0:	2a20      	cmp	r2, #32
 80009e2:	d005      	beq.n	80009f0 <__aeabi_dadd+0x424>
 80009e4:	4667      	mov	r7, ip
 80009e6:	2240      	movs	r2, #64	; 0x40
 80009e8:	1bd2      	subs	r2, r2, r7
 80009ea:	4647      	mov	r7, r8
 80009ec:	4097      	lsls	r7, r2
 80009ee:	4339      	orrs	r1, r7
 80009f0:	1e4a      	subs	r2, r1, #1
 80009f2:	4191      	sbcs	r1, r2
 80009f4:	4321      	orrs	r1, r4
 80009f6:	e635      	b.n	8000664 <__aeabi_dadd+0x98>
 80009f8:	4303      	orrs	r3, r0
 80009fa:	1e58      	subs	r0, r3, #1
 80009fc:	4183      	sbcs	r3, r0
 80009fe:	1acc      	subs	r4, r1, r3
 8000a00:	42a1      	cmp	r1, r4
 8000a02:	41bf      	sbcs	r7, r7
 8000a04:	4643      	mov	r3, r8
 8000a06:	427f      	negs	r7, r7
 8000a08:	4655      	mov	r5, sl
 8000a0a:	464e      	mov	r6, r9
 8000a0c:	1bdf      	subs	r7, r3, r7
 8000a0e:	e62e      	b.n	800066e <__aeabi_dadd+0xa2>
 8000a10:	0002      	movs	r2, r0
 8000a12:	431a      	orrs	r2, r3
 8000a14:	d100      	bne.n	8000a18 <__aeabi_dadd+0x44c>
 8000a16:	e0bd      	b.n	8000b94 <__aeabi_dadd+0x5c8>
 8000a18:	4662      	mov	r2, ip
 8000a1a:	4664      	mov	r4, ip
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	2c01      	cmp	r4, #1
 8000a20:	d100      	bne.n	8000a24 <__aeabi_dadd+0x458>
 8000a22:	e0e5      	b.n	8000bf0 <__aeabi_dadd+0x624>
 8000a24:	4c85      	ldr	r4, [pc, #532]	; (8000c3c <__aeabi_dadd+0x670>)
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d058      	beq.n	8000adc <__aeabi_dadd+0x510>
 8000a2a:	4694      	mov	ip, r2
 8000a2c:	e749      	b.n	80008c2 <__aeabi_dadd+0x2f6>
 8000a2e:	4664      	mov	r4, ip
 8000a30:	2220      	movs	r2, #32
 8000a32:	1b12      	subs	r2, r2, r4
 8000a34:	4644      	mov	r4, r8
 8000a36:	4094      	lsls	r4, r2
 8000a38:	000f      	movs	r7, r1
 8000a3a:	46a1      	mov	r9, r4
 8000a3c:	4664      	mov	r4, ip
 8000a3e:	4091      	lsls	r1, r2
 8000a40:	40e7      	lsrs	r7, r4
 8000a42:	464c      	mov	r4, r9
 8000a44:	1e4a      	subs	r2, r1, #1
 8000a46:	4191      	sbcs	r1, r2
 8000a48:	433c      	orrs	r4, r7
 8000a4a:	4642      	mov	r2, r8
 8000a4c:	430c      	orrs	r4, r1
 8000a4e:	4661      	mov	r1, ip
 8000a50:	40ca      	lsrs	r2, r1
 8000a52:	1880      	adds	r0, r0, r2
 8000a54:	e6f4      	b.n	8000840 <__aeabi_dadd+0x274>
 8000a56:	4c79      	ldr	r4, [pc, #484]	; (8000c3c <__aeabi_dadd+0x670>)
 8000a58:	42a2      	cmp	r2, r4
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dadd+0x492>
 8000a5c:	e6fd      	b.n	800085a <__aeabi_dadd+0x28e>
 8000a5e:	1859      	adds	r1, r3, r1
 8000a60:	4299      	cmp	r1, r3
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	4440      	add	r0, r8
 8000a66:	425f      	negs	r7, r3
 8000a68:	19c7      	adds	r7, r0, r7
 8000a6a:	07fc      	lsls	r4, r7, #31
 8000a6c:	0849      	lsrs	r1, r1, #1
 8000a6e:	0016      	movs	r6, r2
 8000a70:	430c      	orrs	r4, r1
 8000a72:	087f      	lsrs	r7, r7, #1
 8000a74:	e6cf      	b.n	8000816 <__aeabi_dadd+0x24a>
 8000a76:	1acc      	subs	r4, r1, r3
 8000a78:	42a1      	cmp	r1, r4
 8000a7a:	41bf      	sbcs	r7, r7
 8000a7c:	4643      	mov	r3, r8
 8000a7e:	427f      	negs	r7, r7
 8000a80:	1a18      	subs	r0, r3, r0
 8000a82:	4655      	mov	r5, sl
 8000a84:	1bc7      	subs	r7, r0, r7
 8000a86:	e5f7      	b.n	8000678 <__aeabi_dadd+0xac>
 8000a88:	08c9      	lsrs	r1, r1, #3
 8000a8a:	077b      	lsls	r3, r7, #29
 8000a8c:	4655      	mov	r5, sl
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	08f8      	lsrs	r0, r7, #3
 8000a92:	e6c8      	b.n	8000826 <__aeabi_dadd+0x25a>
 8000a94:	2c00      	cmp	r4, #0
 8000a96:	d000      	beq.n	8000a9a <__aeabi_dadd+0x4ce>
 8000a98:	e081      	b.n	8000b9e <__aeabi_dadd+0x5d2>
 8000a9a:	4643      	mov	r3, r8
 8000a9c:	430b      	orrs	r3, r1
 8000a9e:	d115      	bne.n	8000acc <__aeabi_dadd+0x500>
 8000aa0:	2080      	movs	r0, #128	; 0x80
 8000aa2:	2500      	movs	r5, #0
 8000aa4:	0300      	lsls	r0, r0, #12
 8000aa6:	e6e3      	b.n	8000870 <__aeabi_dadd+0x2a4>
 8000aa8:	1a5c      	subs	r4, r3, r1
 8000aaa:	42a3      	cmp	r3, r4
 8000aac:	419b      	sbcs	r3, r3
 8000aae:	1bc7      	subs	r7, r0, r7
 8000ab0:	425b      	negs	r3, r3
 8000ab2:	2601      	movs	r6, #1
 8000ab4:	1aff      	subs	r7, r7, r3
 8000ab6:	e5da      	b.n	800066e <__aeabi_dadd+0xa2>
 8000ab8:	0742      	lsls	r2, r0, #29
 8000aba:	08db      	lsrs	r3, r3, #3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	08c0      	lsrs	r0, r0, #3
 8000ac0:	e6d2      	b.n	8000868 <__aeabi_dadd+0x29c>
 8000ac2:	0742      	lsls	r2, r0, #29
 8000ac4:	08db      	lsrs	r3, r3, #3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	08c0      	lsrs	r0, r0, #3
 8000aca:	e6ac      	b.n	8000826 <__aeabi_dadd+0x25a>
 8000acc:	4643      	mov	r3, r8
 8000ace:	4642      	mov	r2, r8
 8000ad0:	08c9      	lsrs	r1, r1, #3
 8000ad2:	075b      	lsls	r3, r3, #29
 8000ad4:	4655      	mov	r5, sl
 8000ad6:	430b      	orrs	r3, r1
 8000ad8:	08d0      	lsrs	r0, r2, #3
 8000ada:	e6c5      	b.n	8000868 <__aeabi_dadd+0x29c>
 8000adc:	4643      	mov	r3, r8
 8000ade:	4642      	mov	r2, r8
 8000ae0:	075b      	lsls	r3, r3, #29
 8000ae2:	08c9      	lsrs	r1, r1, #3
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	08d0      	lsrs	r0, r2, #3
 8000ae8:	e6be      	b.n	8000868 <__aeabi_dadd+0x29c>
 8000aea:	4303      	orrs	r3, r0
 8000aec:	001c      	movs	r4, r3
 8000aee:	1e63      	subs	r3, r4, #1
 8000af0:	419c      	sbcs	r4, r3
 8000af2:	e6fc      	b.n	80008ee <__aeabi_dadd+0x322>
 8000af4:	0002      	movs	r2, r0
 8000af6:	3c20      	subs	r4, #32
 8000af8:	40e2      	lsrs	r2, r4
 8000afa:	0014      	movs	r4, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	2a20      	cmp	r2, #32
 8000b00:	d003      	beq.n	8000b0a <__aeabi_dadd+0x53e>
 8000b02:	2540      	movs	r5, #64	; 0x40
 8000b04:	1aad      	subs	r5, r5, r2
 8000b06:	40a8      	lsls	r0, r5
 8000b08:	4303      	orrs	r3, r0
 8000b0a:	1e58      	subs	r0, r3, #1
 8000b0c:	4183      	sbcs	r3, r0
 8000b0e:	4323      	orrs	r3, r4
 8000b10:	e775      	b.n	80009fe <__aeabi_dadd+0x432>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	d0e2      	beq.n	8000adc <__aeabi_dadd+0x510>
 8000b16:	003a      	movs	r2, r7
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	d0cd      	beq.n	8000ab8 <__aeabi_dadd+0x4ec>
 8000b1c:	0742      	lsls	r2, r0, #29
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	2280      	movs	r2, #128	; 0x80
 8000b24:	08c0      	lsrs	r0, r0, #3
 8000b26:	0312      	lsls	r2, r2, #12
 8000b28:	4210      	tst	r0, r2
 8000b2a:	d006      	beq.n	8000b3a <__aeabi_dadd+0x56e>
 8000b2c:	08fc      	lsrs	r4, r7, #3
 8000b2e:	4214      	tst	r4, r2
 8000b30:	d103      	bne.n	8000b3a <__aeabi_dadd+0x56e>
 8000b32:	0020      	movs	r0, r4
 8000b34:	08cb      	lsrs	r3, r1, #3
 8000b36:	077a      	lsls	r2, r7, #29
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	0f5a      	lsrs	r2, r3, #29
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	0752      	lsls	r2, r2, #29
 8000b40:	08db      	lsrs	r3, r3, #3
 8000b42:	4313      	orrs	r3, r2
 8000b44:	e690      	b.n	8000868 <__aeabi_dadd+0x29c>
 8000b46:	4643      	mov	r3, r8
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dadd+0x582>
 8000b4c:	e709      	b.n	8000962 <__aeabi_dadd+0x396>
 8000b4e:	4643      	mov	r3, r8
 8000b50:	4642      	mov	r2, r8
 8000b52:	08c9      	lsrs	r1, r1, #3
 8000b54:	075b      	lsls	r3, r3, #29
 8000b56:	4655      	mov	r5, sl
 8000b58:	430b      	orrs	r3, r1
 8000b5a:	08d0      	lsrs	r0, r2, #3
 8000b5c:	e666      	b.n	800082c <__aeabi_dadd+0x260>
 8000b5e:	1acc      	subs	r4, r1, r3
 8000b60:	42a1      	cmp	r1, r4
 8000b62:	4189      	sbcs	r1, r1
 8000b64:	1a3f      	subs	r7, r7, r0
 8000b66:	4249      	negs	r1, r1
 8000b68:	4655      	mov	r5, sl
 8000b6a:	2601      	movs	r6, #1
 8000b6c:	1a7f      	subs	r7, r7, r1
 8000b6e:	e57e      	b.n	800066e <__aeabi_dadd+0xa2>
 8000b70:	4642      	mov	r2, r8
 8000b72:	1a5c      	subs	r4, r3, r1
 8000b74:	1a87      	subs	r7, r0, r2
 8000b76:	42a3      	cmp	r3, r4
 8000b78:	4192      	sbcs	r2, r2
 8000b7a:	4252      	negs	r2, r2
 8000b7c:	1abf      	subs	r7, r7, r2
 8000b7e:	023a      	lsls	r2, r7, #8
 8000b80:	d53d      	bpl.n	8000bfe <__aeabi_dadd+0x632>
 8000b82:	1acc      	subs	r4, r1, r3
 8000b84:	42a1      	cmp	r1, r4
 8000b86:	4189      	sbcs	r1, r1
 8000b88:	4643      	mov	r3, r8
 8000b8a:	4249      	negs	r1, r1
 8000b8c:	1a1f      	subs	r7, r3, r0
 8000b8e:	4655      	mov	r5, sl
 8000b90:	1a7f      	subs	r7, r7, r1
 8000b92:	e595      	b.n	80006c0 <__aeabi_dadd+0xf4>
 8000b94:	077b      	lsls	r3, r7, #29
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	08f8      	lsrs	r0, r7, #3
 8000b9c:	e643      	b.n	8000826 <__aeabi_dadd+0x25a>
 8000b9e:	4644      	mov	r4, r8
 8000ba0:	08db      	lsrs	r3, r3, #3
 8000ba2:	430c      	orrs	r4, r1
 8000ba4:	d130      	bne.n	8000c08 <__aeabi_dadd+0x63c>
 8000ba6:	0742      	lsls	r2, r0, #29
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	08c0      	lsrs	r0, r0, #3
 8000bac:	e65c      	b.n	8000868 <__aeabi_dadd+0x29c>
 8000bae:	077b      	lsls	r3, r7, #29
 8000bb0:	08c9      	lsrs	r1, r1, #3
 8000bb2:	430b      	orrs	r3, r1
 8000bb4:	08f8      	lsrs	r0, r7, #3
 8000bb6:	e639      	b.n	800082c <__aeabi_dadd+0x260>
 8000bb8:	185c      	adds	r4, r3, r1
 8000bba:	429c      	cmp	r4, r3
 8000bbc:	419b      	sbcs	r3, r3
 8000bbe:	4440      	add	r0, r8
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	18c7      	adds	r7, r0, r3
 8000bc4:	023b      	lsls	r3, r7, #8
 8000bc6:	d400      	bmi.n	8000bca <__aeabi_dadd+0x5fe>
 8000bc8:	e625      	b.n	8000816 <__aeabi_dadd+0x24a>
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <__aeabi_dadd+0x674>)
 8000bcc:	2601      	movs	r6, #1
 8000bce:	401f      	ands	r7, r3
 8000bd0:	e621      	b.n	8000816 <__aeabi_dadd+0x24a>
 8000bd2:	0004      	movs	r4, r0
 8000bd4:	3a20      	subs	r2, #32
 8000bd6:	40d4      	lsrs	r4, r2
 8000bd8:	4662      	mov	r2, ip
 8000bda:	2a20      	cmp	r2, #32
 8000bdc:	d004      	beq.n	8000be8 <__aeabi_dadd+0x61c>
 8000bde:	2240      	movs	r2, #64	; 0x40
 8000be0:	4666      	mov	r6, ip
 8000be2:	1b92      	subs	r2, r2, r6
 8000be4:	4090      	lsls	r0, r2
 8000be6:	4303      	orrs	r3, r0
 8000be8:	1e5a      	subs	r2, r3, #1
 8000bea:	4193      	sbcs	r3, r2
 8000bec:	431c      	orrs	r4, r3
 8000bee:	e67e      	b.n	80008ee <__aeabi_dadd+0x322>
 8000bf0:	185c      	adds	r4, r3, r1
 8000bf2:	428c      	cmp	r4, r1
 8000bf4:	4189      	sbcs	r1, r1
 8000bf6:	4440      	add	r0, r8
 8000bf8:	4249      	negs	r1, r1
 8000bfa:	1847      	adds	r7, r0, r1
 8000bfc:	e6dd      	b.n	80009ba <__aeabi_dadd+0x3ee>
 8000bfe:	0023      	movs	r3, r4
 8000c00:	433b      	orrs	r3, r7
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x63a>
 8000c04:	e6ad      	b.n	8000962 <__aeabi_dadd+0x396>
 8000c06:	e606      	b.n	8000816 <__aeabi_dadd+0x24a>
 8000c08:	0744      	lsls	r4, r0, #29
 8000c0a:	4323      	orrs	r3, r4
 8000c0c:	2480      	movs	r4, #128	; 0x80
 8000c0e:	08c0      	lsrs	r0, r0, #3
 8000c10:	0324      	lsls	r4, r4, #12
 8000c12:	4220      	tst	r0, r4
 8000c14:	d008      	beq.n	8000c28 <__aeabi_dadd+0x65c>
 8000c16:	4642      	mov	r2, r8
 8000c18:	08d6      	lsrs	r6, r2, #3
 8000c1a:	4226      	tst	r6, r4
 8000c1c:	d104      	bne.n	8000c28 <__aeabi_dadd+0x65c>
 8000c1e:	4655      	mov	r5, sl
 8000c20:	0030      	movs	r0, r6
 8000c22:	08cb      	lsrs	r3, r1, #3
 8000c24:	0751      	lsls	r1, r2, #29
 8000c26:	430b      	orrs	r3, r1
 8000c28:	0f5a      	lsrs	r2, r3, #29
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	0752      	lsls	r2, r2, #29
 8000c30:	4313      	orrs	r3, r2
 8000c32:	e619      	b.n	8000868 <__aeabi_dadd+0x29c>
 8000c34:	2300      	movs	r3, #0
 8000c36:	4a01      	ldr	r2, [pc, #4]	; (8000c3c <__aeabi_dadd+0x670>)
 8000c38:	001f      	movs	r7, r3
 8000c3a:	e55e      	b.n	80006fa <__aeabi_dadd+0x12e>
 8000c3c:	000007ff 	.word	0x000007ff
 8000c40:	ff7fffff 	.word	0xff7fffff

08000c44 <__aeabi_dmul>:
 8000c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c46:	4657      	mov	r7, sl
 8000c48:	464e      	mov	r6, r9
 8000c4a:	4645      	mov	r5, r8
 8000c4c:	46de      	mov	lr, fp
 8000c4e:	b5e0      	push	{r5, r6, r7, lr}
 8000c50:	4698      	mov	r8, r3
 8000c52:	030c      	lsls	r4, r1, #12
 8000c54:	004b      	lsls	r3, r1, #1
 8000c56:	0006      	movs	r6, r0
 8000c58:	4692      	mov	sl, r2
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	0b24      	lsrs	r4, r4, #12
 8000c5e:	0d5b      	lsrs	r3, r3, #21
 8000c60:	0fcf      	lsrs	r7, r1, #31
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dmul+0x24>
 8000c66:	e15c      	b.n	8000f22 <__aeabi_dmul+0x2de>
 8000c68:	4ad9      	ldr	r2, [pc, #868]	; (8000fd0 <__aeabi_dmul+0x38c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dmul+0x2c>
 8000c6e:	e175      	b.n	8000f5c <__aeabi_dmul+0x318>
 8000c70:	0f42      	lsrs	r2, r0, #29
 8000c72:	00e4      	lsls	r4, r4, #3
 8000c74:	4314      	orrs	r4, r2
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	0412      	lsls	r2, r2, #16
 8000c7a:	4314      	orrs	r4, r2
 8000c7c:	4ad5      	ldr	r2, [pc, #852]	; (8000fd4 <__aeabi_dmul+0x390>)
 8000c7e:	00c5      	lsls	r5, r0, #3
 8000c80:	4694      	mov	ip, r2
 8000c82:	4463      	add	r3, ip
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2300      	movs	r3, #0
 8000c88:	4699      	mov	r9, r3
 8000c8a:	469b      	mov	fp, r3
 8000c8c:	4643      	mov	r3, r8
 8000c8e:	4642      	mov	r2, r8
 8000c90:	031e      	lsls	r6, r3, #12
 8000c92:	0fd2      	lsrs	r2, r2, #31
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4650      	mov	r0, sl
 8000c98:	4690      	mov	r8, r2
 8000c9a:	0b36      	lsrs	r6, r6, #12
 8000c9c:	0d5b      	lsrs	r3, r3, #21
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dmul+0x5e>
 8000ca0:	e120      	b.n	8000ee4 <__aeabi_dmul+0x2a0>
 8000ca2:	4acb      	ldr	r2, [pc, #812]	; (8000fd0 <__aeabi_dmul+0x38c>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d100      	bne.n	8000caa <__aeabi_dmul+0x66>
 8000ca8:	e162      	b.n	8000f70 <__aeabi_dmul+0x32c>
 8000caa:	49ca      	ldr	r1, [pc, #808]	; (8000fd4 <__aeabi_dmul+0x390>)
 8000cac:	0f42      	lsrs	r2, r0, #29
 8000cae:	468c      	mov	ip, r1
 8000cb0:	9900      	ldr	r1, [sp, #0]
 8000cb2:	4463      	add	r3, ip
 8000cb4:	00f6      	lsls	r6, r6, #3
 8000cb6:	468c      	mov	ip, r1
 8000cb8:	4316      	orrs	r6, r2
 8000cba:	2280      	movs	r2, #128	; 0x80
 8000cbc:	449c      	add	ip, r3
 8000cbe:	0412      	lsls	r2, r2, #16
 8000cc0:	4663      	mov	r3, ip
 8000cc2:	4316      	orrs	r6, r2
 8000cc4:	00c2      	lsls	r2, r0, #3
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	9900      	ldr	r1, [sp, #0]
 8000ccc:	4643      	mov	r3, r8
 8000cce:	3101      	adds	r1, #1
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	4649      	mov	r1, r9
 8000cd4:	407b      	eors	r3, r7
 8000cd6:	9301      	str	r3, [sp, #4]
 8000cd8:	290f      	cmp	r1, #15
 8000cda:	d826      	bhi.n	8000d2a <__aeabi_dmul+0xe6>
 8000cdc:	4bbe      	ldr	r3, [pc, #760]	; (8000fd8 <__aeabi_dmul+0x394>)
 8000cde:	0089      	lsls	r1, r1, #2
 8000ce0:	5859      	ldr	r1, [r3, r1]
 8000ce2:	468f      	mov	pc, r1
 8000ce4:	4643      	mov	r3, r8
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	0034      	movs	r4, r6
 8000cea:	0015      	movs	r5, r2
 8000cec:	4683      	mov	fp, r0
 8000cee:	465b      	mov	r3, fp
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d016      	beq.n	8000d22 <__aeabi_dmul+0xde>
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dmul+0xb6>
 8000cf8:	e203      	b.n	8001102 <__aeabi_dmul+0x4be>
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_dmul+0xbc>
 8000cfe:	e0cd      	b.n	8000e9c <__aeabi_dmul+0x258>
 8000d00:	2200      	movs	r2, #0
 8000d02:	2400      	movs	r4, #0
 8000d04:	2500      	movs	r5, #0
 8000d06:	9b01      	ldr	r3, [sp, #4]
 8000d08:	0512      	lsls	r2, r2, #20
 8000d0a:	4322      	orrs	r2, r4
 8000d0c:	07db      	lsls	r3, r3, #31
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	0028      	movs	r0, r5
 8000d12:	0011      	movs	r1, r2
 8000d14:	b007      	add	sp, #28
 8000d16:	bcf0      	pop	{r4, r5, r6, r7}
 8000d18:	46bb      	mov	fp, r7
 8000d1a:	46b2      	mov	sl, r6
 8000d1c:	46a9      	mov	r9, r5
 8000d1e:	46a0      	mov	r8, r4
 8000d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d22:	2400      	movs	r4, #0
 8000d24:	2500      	movs	r5, #0
 8000d26:	4aaa      	ldr	r2, [pc, #680]	; (8000fd0 <__aeabi_dmul+0x38c>)
 8000d28:	e7ed      	b.n	8000d06 <__aeabi_dmul+0xc2>
 8000d2a:	0c28      	lsrs	r0, r5, #16
 8000d2c:	042d      	lsls	r5, r5, #16
 8000d2e:	0c2d      	lsrs	r5, r5, #16
 8000d30:	002b      	movs	r3, r5
 8000d32:	0c11      	lsrs	r1, r2, #16
 8000d34:	0412      	lsls	r2, r2, #16
 8000d36:	0c12      	lsrs	r2, r2, #16
 8000d38:	4353      	muls	r3, r2
 8000d3a:	4698      	mov	r8, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	002f      	movs	r7, r5
 8000d40:	4343      	muls	r3, r0
 8000d42:	4699      	mov	r9, r3
 8000d44:	434f      	muls	r7, r1
 8000d46:	444f      	add	r7, r9
 8000d48:	46bb      	mov	fp, r7
 8000d4a:	4647      	mov	r7, r8
 8000d4c:	000b      	movs	r3, r1
 8000d4e:	0c3f      	lsrs	r7, r7, #16
 8000d50:	46ba      	mov	sl, r7
 8000d52:	4343      	muls	r3, r0
 8000d54:	44da      	add	sl, fp
 8000d56:	9302      	str	r3, [sp, #8]
 8000d58:	45d1      	cmp	r9, sl
 8000d5a:	d904      	bls.n	8000d66 <__aeabi_dmul+0x122>
 8000d5c:	2780      	movs	r7, #128	; 0x80
 8000d5e:	027f      	lsls	r7, r7, #9
 8000d60:	46b9      	mov	r9, r7
 8000d62:	444b      	add	r3, r9
 8000d64:	9302      	str	r3, [sp, #8]
 8000d66:	4653      	mov	r3, sl
 8000d68:	0c1b      	lsrs	r3, r3, #16
 8000d6a:	469b      	mov	fp, r3
 8000d6c:	4653      	mov	r3, sl
 8000d6e:	041f      	lsls	r7, r3, #16
 8000d70:	4643      	mov	r3, r8
 8000d72:	041b      	lsls	r3, r3, #16
 8000d74:	0c1b      	lsrs	r3, r3, #16
 8000d76:	4698      	mov	r8, r3
 8000d78:	003b      	movs	r3, r7
 8000d7a:	4443      	add	r3, r8
 8000d7c:	9304      	str	r3, [sp, #16]
 8000d7e:	0c33      	lsrs	r3, r6, #16
 8000d80:	0436      	lsls	r6, r6, #16
 8000d82:	0c36      	lsrs	r6, r6, #16
 8000d84:	4698      	mov	r8, r3
 8000d86:	0033      	movs	r3, r6
 8000d88:	4343      	muls	r3, r0
 8000d8a:	4699      	mov	r9, r3
 8000d8c:	4643      	mov	r3, r8
 8000d8e:	4343      	muls	r3, r0
 8000d90:	002f      	movs	r7, r5
 8000d92:	469a      	mov	sl, r3
 8000d94:	4643      	mov	r3, r8
 8000d96:	4377      	muls	r7, r6
 8000d98:	435d      	muls	r5, r3
 8000d9a:	0c38      	lsrs	r0, r7, #16
 8000d9c:	444d      	add	r5, r9
 8000d9e:	1945      	adds	r5, r0, r5
 8000da0:	45a9      	cmp	r9, r5
 8000da2:	d903      	bls.n	8000dac <__aeabi_dmul+0x168>
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	025b      	lsls	r3, r3, #9
 8000da8:	4699      	mov	r9, r3
 8000daa:	44ca      	add	sl, r9
 8000dac:	043f      	lsls	r7, r7, #16
 8000dae:	0c28      	lsrs	r0, r5, #16
 8000db0:	0c3f      	lsrs	r7, r7, #16
 8000db2:	042d      	lsls	r5, r5, #16
 8000db4:	19ed      	adds	r5, r5, r7
 8000db6:	0c27      	lsrs	r7, r4, #16
 8000db8:	0424      	lsls	r4, r4, #16
 8000dba:	0c24      	lsrs	r4, r4, #16
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	0020      	movs	r0, r4
 8000dc0:	4350      	muls	r0, r2
 8000dc2:	437a      	muls	r2, r7
 8000dc4:	4691      	mov	r9, r2
 8000dc6:	003a      	movs	r2, r7
 8000dc8:	4453      	add	r3, sl
 8000dca:	9305      	str	r3, [sp, #20]
 8000dcc:	0c03      	lsrs	r3, r0, #16
 8000dce:	469a      	mov	sl, r3
 8000dd0:	434a      	muls	r2, r1
 8000dd2:	4361      	muls	r1, r4
 8000dd4:	4449      	add	r1, r9
 8000dd6:	4451      	add	r1, sl
 8000dd8:	44ab      	add	fp, r5
 8000dda:	4589      	cmp	r9, r1
 8000ddc:	d903      	bls.n	8000de6 <__aeabi_dmul+0x1a2>
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	025b      	lsls	r3, r3, #9
 8000de2:	4699      	mov	r9, r3
 8000de4:	444a      	add	r2, r9
 8000de6:	0400      	lsls	r0, r0, #16
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	0c00      	lsrs	r0, r0, #16
 8000dec:	0409      	lsls	r1, r1, #16
 8000dee:	1809      	adds	r1, r1, r0
 8000df0:	0020      	movs	r0, r4
 8000df2:	4699      	mov	r9, r3
 8000df4:	4643      	mov	r3, r8
 8000df6:	4370      	muls	r0, r6
 8000df8:	435c      	muls	r4, r3
 8000dfa:	437e      	muls	r6, r7
 8000dfc:	435f      	muls	r7, r3
 8000dfe:	0c03      	lsrs	r3, r0, #16
 8000e00:	4698      	mov	r8, r3
 8000e02:	19a4      	adds	r4, r4, r6
 8000e04:	4444      	add	r4, r8
 8000e06:	444a      	add	r2, r9
 8000e08:	9703      	str	r7, [sp, #12]
 8000e0a:	42a6      	cmp	r6, r4
 8000e0c:	d904      	bls.n	8000e18 <__aeabi_dmul+0x1d4>
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	025b      	lsls	r3, r3, #9
 8000e12:	4698      	mov	r8, r3
 8000e14:	4447      	add	r7, r8
 8000e16:	9703      	str	r7, [sp, #12]
 8000e18:	0423      	lsls	r3, r4, #16
 8000e1a:	9e02      	ldr	r6, [sp, #8]
 8000e1c:	469a      	mov	sl, r3
 8000e1e:	9b05      	ldr	r3, [sp, #20]
 8000e20:	445e      	add	r6, fp
 8000e22:	4698      	mov	r8, r3
 8000e24:	42ae      	cmp	r6, r5
 8000e26:	41ad      	sbcs	r5, r5
 8000e28:	1876      	adds	r6, r6, r1
 8000e2a:	428e      	cmp	r6, r1
 8000e2c:	4189      	sbcs	r1, r1
 8000e2e:	0400      	lsls	r0, r0, #16
 8000e30:	0c00      	lsrs	r0, r0, #16
 8000e32:	4450      	add	r0, sl
 8000e34:	4440      	add	r0, r8
 8000e36:	426d      	negs	r5, r5
 8000e38:	1947      	adds	r7, r0, r5
 8000e3a:	46b8      	mov	r8, r7
 8000e3c:	4693      	mov	fp, r2
 8000e3e:	4249      	negs	r1, r1
 8000e40:	4689      	mov	r9, r1
 8000e42:	44c3      	add	fp, r8
 8000e44:	44d9      	add	r9, fp
 8000e46:	4298      	cmp	r0, r3
 8000e48:	4180      	sbcs	r0, r0
 8000e4a:	45a8      	cmp	r8, r5
 8000e4c:	41ad      	sbcs	r5, r5
 8000e4e:	4593      	cmp	fp, r2
 8000e50:	4192      	sbcs	r2, r2
 8000e52:	4589      	cmp	r9, r1
 8000e54:	4189      	sbcs	r1, r1
 8000e56:	426d      	negs	r5, r5
 8000e58:	4240      	negs	r0, r0
 8000e5a:	4328      	orrs	r0, r5
 8000e5c:	0c24      	lsrs	r4, r4, #16
 8000e5e:	4252      	negs	r2, r2
 8000e60:	4249      	negs	r1, r1
 8000e62:	430a      	orrs	r2, r1
 8000e64:	9b03      	ldr	r3, [sp, #12]
 8000e66:	1900      	adds	r0, r0, r4
 8000e68:	1880      	adds	r0, r0, r2
 8000e6a:	18c7      	adds	r7, r0, r3
 8000e6c:	464b      	mov	r3, r9
 8000e6e:	0ddc      	lsrs	r4, r3, #23
 8000e70:	9b04      	ldr	r3, [sp, #16]
 8000e72:	0275      	lsls	r5, r6, #9
 8000e74:	431d      	orrs	r5, r3
 8000e76:	1e6a      	subs	r2, r5, #1
 8000e78:	4195      	sbcs	r5, r2
 8000e7a:	464b      	mov	r3, r9
 8000e7c:	0df6      	lsrs	r6, r6, #23
 8000e7e:	027f      	lsls	r7, r7, #9
 8000e80:	4335      	orrs	r5, r6
 8000e82:	025a      	lsls	r2, r3, #9
 8000e84:	433c      	orrs	r4, r7
 8000e86:	4315      	orrs	r5, r2
 8000e88:	01fb      	lsls	r3, r7, #7
 8000e8a:	d400      	bmi.n	8000e8e <__aeabi_dmul+0x24a>
 8000e8c:	e11c      	b.n	80010c8 <__aeabi_dmul+0x484>
 8000e8e:	2101      	movs	r1, #1
 8000e90:	086a      	lsrs	r2, r5, #1
 8000e92:	400d      	ands	r5, r1
 8000e94:	4315      	orrs	r5, r2
 8000e96:	07e2      	lsls	r2, r4, #31
 8000e98:	4315      	orrs	r5, r2
 8000e9a:	0864      	lsrs	r4, r4, #1
 8000e9c:	494f      	ldr	r1, [pc, #316]	; (8000fdc <__aeabi_dmul+0x398>)
 8000e9e:	4461      	add	r1, ip
 8000ea0:	2900      	cmp	r1, #0
 8000ea2:	dc00      	bgt.n	8000ea6 <__aeabi_dmul+0x262>
 8000ea4:	e0b0      	b.n	8001008 <__aeabi_dmul+0x3c4>
 8000ea6:	076b      	lsls	r3, r5, #29
 8000ea8:	d009      	beq.n	8000ebe <__aeabi_dmul+0x27a>
 8000eaa:	220f      	movs	r2, #15
 8000eac:	402a      	ands	r2, r5
 8000eae:	2a04      	cmp	r2, #4
 8000eb0:	d005      	beq.n	8000ebe <__aeabi_dmul+0x27a>
 8000eb2:	1d2a      	adds	r2, r5, #4
 8000eb4:	42aa      	cmp	r2, r5
 8000eb6:	41ad      	sbcs	r5, r5
 8000eb8:	426d      	negs	r5, r5
 8000eba:	1964      	adds	r4, r4, r5
 8000ebc:	0015      	movs	r5, r2
 8000ebe:	01e3      	lsls	r3, r4, #7
 8000ec0:	d504      	bpl.n	8000ecc <__aeabi_dmul+0x288>
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4a46      	ldr	r2, [pc, #280]	; (8000fe0 <__aeabi_dmul+0x39c>)
 8000ec6:	00c9      	lsls	r1, r1, #3
 8000ec8:	4014      	ands	r4, r2
 8000eca:	4461      	add	r1, ip
 8000ecc:	4a45      	ldr	r2, [pc, #276]	; (8000fe4 <__aeabi_dmul+0x3a0>)
 8000ece:	4291      	cmp	r1, r2
 8000ed0:	dd00      	ble.n	8000ed4 <__aeabi_dmul+0x290>
 8000ed2:	e726      	b.n	8000d22 <__aeabi_dmul+0xde>
 8000ed4:	0762      	lsls	r2, r4, #29
 8000ed6:	08ed      	lsrs	r5, r5, #3
 8000ed8:	0264      	lsls	r4, r4, #9
 8000eda:	0549      	lsls	r1, r1, #21
 8000edc:	4315      	orrs	r5, r2
 8000ede:	0b24      	lsrs	r4, r4, #12
 8000ee0:	0d4a      	lsrs	r2, r1, #21
 8000ee2:	e710      	b.n	8000d06 <__aeabi_dmul+0xc2>
 8000ee4:	4652      	mov	r2, sl
 8000ee6:	4332      	orrs	r2, r6
 8000ee8:	d100      	bne.n	8000eec <__aeabi_dmul+0x2a8>
 8000eea:	e07f      	b.n	8000fec <__aeabi_dmul+0x3a8>
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_dmul+0x2ae>
 8000ef0:	e0dc      	b.n	80010ac <__aeabi_dmul+0x468>
 8000ef2:	0030      	movs	r0, r6
 8000ef4:	f000 f978 	bl	80011e8 <__clzsi2>
 8000ef8:	0002      	movs	r2, r0
 8000efa:	3a0b      	subs	r2, #11
 8000efc:	231d      	movs	r3, #29
 8000efe:	0001      	movs	r1, r0
 8000f00:	1a9b      	subs	r3, r3, r2
 8000f02:	4652      	mov	r2, sl
 8000f04:	3908      	subs	r1, #8
 8000f06:	40da      	lsrs	r2, r3
 8000f08:	408e      	lsls	r6, r1
 8000f0a:	4316      	orrs	r6, r2
 8000f0c:	4652      	mov	r2, sl
 8000f0e:	408a      	lsls	r2, r1
 8000f10:	9b00      	ldr	r3, [sp, #0]
 8000f12:	4935      	ldr	r1, [pc, #212]	; (8000fe8 <__aeabi_dmul+0x3a4>)
 8000f14:	1a18      	subs	r0, r3, r0
 8000f16:	0003      	movs	r3, r0
 8000f18:	468c      	mov	ip, r1
 8000f1a:	4463      	add	r3, ip
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	e6d3      	b.n	8000cca <__aeabi_dmul+0x86>
 8000f22:	0025      	movs	r5, r4
 8000f24:	4305      	orrs	r5, r0
 8000f26:	d04a      	beq.n	8000fbe <__aeabi_dmul+0x37a>
 8000f28:	2c00      	cmp	r4, #0
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_dmul+0x2ea>
 8000f2c:	e0b0      	b.n	8001090 <__aeabi_dmul+0x44c>
 8000f2e:	0020      	movs	r0, r4
 8000f30:	f000 f95a 	bl	80011e8 <__clzsi2>
 8000f34:	0001      	movs	r1, r0
 8000f36:	0002      	movs	r2, r0
 8000f38:	390b      	subs	r1, #11
 8000f3a:	231d      	movs	r3, #29
 8000f3c:	0010      	movs	r0, r2
 8000f3e:	1a5b      	subs	r3, r3, r1
 8000f40:	0031      	movs	r1, r6
 8000f42:	0035      	movs	r5, r6
 8000f44:	3808      	subs	r0, #8
 8000f46:	4084      	lsls	r4, r0
 8000f48:	40d9      	lsrs	r1, r3
 8000f4a:	4085      	lsls	r5, r0
 8000f4c:	430c      	orrs	r4, r1
 8000f4e:	4826      	ldr	r0, [pc, #152]	; (8000fe8 <__aeabi_dmul+0x3a4>)
 8000f50:	1a83      	subs	r3, r0, r2
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2300      	movs	r3, #0
 8000f56:	4699      	mov	r9, r3
 8000f58:	469b      	mov	fp, r3
 8000f5a:	e697      	b.n	8000c8c <__aeabi_dmul+0x48>
 8000f5c:	0005      	movs	r5, r0
 8000f5e:	4325      	orrs	r5, r4
 8000f60:	d126      	bne.n	8000fb0 <__aeabi_dmul+0x36c>
 8000f62:	2208      	movs	r2, #8
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2302      	movs	r3, #2
 8000f68:	2400      	movs	r4, #0
 8000f6a:	4691      	mov	r9, r2
 8000f6c:	469b      	mov	fp, r3
 8000f6e:	e68d      	b.n	8000c8c <__aeabi_dmul+0x48>
 8000f70:	4652      	mov	r2, sl
 8000f72:	9b00      	ldr	r3, [sp, #0]
 8000f74:	4332      	orrs	r2, r6
 8000f76:	d110      	bne.n	8000f9a <__aeabi_dmul+0x356>
 8000f78:	4915      	ldr	r1, [pc, #84]	; (8000fd0 <__aeabi_dmul+0x38c>)
 8000f7a:	2600      	movs	r6, #0
 8000f7c:	468c      	mov	ip, r1
 8000f7e:	4463      	add	r3, ip
 8000f80:	4649      	mov	r1, r9
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2302      	movs	r3, #2
 8000f86:	4319      	orrs	r1, r3
 8000f88:	4689      	mov	r9, r1
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	e69d      	b.n	8000cca <__aeabi_dmul+0x86>
 8000f8e:	465b      	mov	r3, fp
 8000f90:	9701      	str	r7, [sp, #4]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d000      	beq.n	8000f98 <__aeabi_dmul+0x354>
 8000f96:	e6ad      	b.n	8000cf4 <__aeabi_dmul+0xb0>
 8000f98:	e6c3      	b.n	8000d22 <__aeabi_dmul+0xde>
 8000f9a:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <__aeabi_dmul+0x38c>)
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	4694      	mov	ip, r2
 8000fa0:	4463      	add	r3, ip
 8000fa2:	464a      	mov	r2, r9
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	4691      	mov	r9, r2
 8000fac:	4652      	mov	r2, sl
 8000fae:	e68c      	b.n	8000cca <__aeabi_dmul+0x86>
 8000fb0:	220c      	movs	r2, #12
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	0005      	movs	r5, r0
 8000fb8:	4691      	mov	r9, r2
 8000fba:	469b      	mov	fp, r3
 8000fbc:	e666      	b.n	8000c8c <__aeabi_dmul+0x48>
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	4699      	mov	r9, r3
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	2400      	movs	r4, #0
 8000fca:	469b      	mov	fp, r3
 8000fcc:	e65e      	b.n	8000c8c <__aeabi_dmul+0x48>
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	000007ff 	.word	0x000007ff
 8000fd4:	fffffc01 	.word	0xfffffc01
 8000fd8:	08006888 	.word	0x08006888
 8000fdc:	000003ff 	.word	0x000003ff
 8000fe0:	feffffff 	.word	0xfeffffff
 8000fe4:	000007fe 	.word	0x000007fe
 8000fe8:	fffffc0d 	.word	0xfffffc0d
 8000fec:	4649      	mov	r1, r9
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4319      	orrs	r1, r3
 8000ff2:	4689      	mov	r9, r1
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	e667      	b.n	8000cca <__aeabi_dmul+0x86>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2480      	movs	r4, #128	; 0x80
 8000ffe:	2500      	movs	r5, #0
 8001000:	4a43      	ldr	r2, [pc, #268]	; (8001110 <__aeabi_dmul+0x4cc>)
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	0324      	lsls	r4, r4, #12
 8001006:	e67e      	b.n	8000d06 <__aeabi_dmul+0xc2>
 8001008:	2001      	movs	r0, #1
 800100a:	1a40      	subs	r0, r0, r1
 800100c:	2838      	cmp	r0, #56	; 0x38
 800100e:	dd00      	ble.n	8001012 <__aeabi_dmul+0x3ce>
 8001010:	e676      	b.n	8000d00 <__aeabi_dmul+0xbc>
 8001012:	281f      	cmp	r0, #31
 8001014:	dd5b      	ble.n	80010ce <__aeabi_dmul+0x48a>
 8001016:	221f      	movs	r2, #31
 8001018:	0023      	movs	r3, r4
 800101a:	4252      	negs	r2, r2
 800101c:	1a51      	subs	r1, r2, r1
 800101e:	40cb      	lsrs	r3, r1
 8001020:	0019      	movs	r1, r3
 8001022:	2820      	cmp	r0, #32
 8001024:	d003      	beq.n	800102e <__aeabi_dmul+0x3ea>
 8001026:	4a3b      	ldr	r2, [pc, #236]	; (8001114 <__aeabi_dmul+0x4d0>)
 8001028:	4462      	add	r2, ip
 800102a:	4094      	lsls	r4, r2
 800102c:	4325      	orrs	r5, r4
 800102e:	1e6a      	subs	r2, r5, #1
 8001030:	4195      	sbcs	r5, r2
 8001032:	002a      	movs	r2, r5
 8001034:	430a      	orrs	r2, r1
 8001036:	2107      	movs	r1, #7
 8001038:	000d      	movs	r5, r1
 800103a:	2400      	movs	r4, #0
 800103c:	4015      	ands	r5, r2
 800103e:	4211      	tst	r1, r2
 8001040:	d05b      	beq.n	80010fa <__aeabi_dmul+0x4b6>
 8001042:	210f      	movs	r1, #15
 8001044:	2400      	movs	r4, #0
 8001046:	4011      	ands	r1, r2
 8001048:	2904      	cmp	r1, #4
 800104a:	d053      	beq.n	80010f4 <__aeabi_dmul+0x4b0>
 800104c:	1d11      	adds	r1, r2, #4
 800104e:	4291      	cmp	r1, r2
 8001050:	4192      	sbcs	r2, r2
 8001052:	4252      	negs	r2, r2
 8001054:	18a4      	adds	r4, r4, r2
 8001056:	000a      	movs	r2, r1
 8001058:	0223      	lsls	r3, r4, #8
 800105a:	d54b      	bpl.n	80010f4 <__aeabi_dmul+0x4b0>
 800105c:	2201      	movs	r2, #1
 800105e:	2400      	movs	r4, #0
 8001060:	2500      	movs	r5, #0
 8001062:	e650      	b.n	8000d06 <__aeabi_dmul+0xc2>
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	031b      	lsls	r3, r3, #12
 8001068:	421c      	tst	r4, r3
 800106a:	d009      	beq.n	8001080 <__aeabi_dmul+0x43c>
 800106c:	421e      	tst	r6, r3
 800106e:	d107      	bne.n	8001080 <__aeabi_dmul+0x43c>
 8001070:	4333      	orrs	r3, r6
 8001072:	031c      	lsls	r4, r3, #12
 8001074:	4643      	mov	r3, r8
 8001076:	0015      	movs	r5, r2
 8001078:	0b24      	lsrs	r4, r4, #12
 800107a:	4a25      	ldr	r2, [pc, #148]	; (8001110 <__aeabi_dmul+0x4cc>)
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	e642      	b.n	8000d06 <__aeabi_dmul+0xc2>
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	0312      	lsls	r2, r2, #12
 8001084:	4314      	orrs	r4, r2
 8001086:	0324      	lsls	r4, r4, #12
 8001088:	4a21      	ldr	r2, [pc, #132]	; (8001110 <__aeabi_dmul+0x4cc>)
 800108a:	0b24      	lsrs	r4, r4, #12
 800108c:	9701      	str	r7, [sp, #4]
 800108e:	e63a      	b.n	8000d06 <__aeabi_dmul+0xc2>
 8001090:	f000 f8aa 	bl	80011e8 <__clzsi2>
 8001094:	0001      	movs	r1, r0
 8001096:	0002      	movs	r2, r0
 8001098:	3115      	adds	r1, #21
 800109a:	3220      	adds	r2, #32
 800109c:	291c      	cmp	r1, #28
 800109e:	dc00      	bgt.n	80010a2 <__aeabi_dmul+0x45e>
 80010a0:	e74b      	b.n	8000f3a <__aeabi_dmul+0x2f6>
 80010a2:	0034      	movs	r4, r6
 80010a4:	3808      	subs	r0, #8
 80010a6:	2500      	movs	r5, #0
 80010a8:	4084      	lsls	r4, r0
 80010aa:	e750      	b.n	8000f4e <__aeabi_dmul+0x30a>
 80010ac:	f000 f89c 	bl	80011e8 <__clzsi2>
 80010b0:	0003      	movs	r3, r0
 80010b2:	001a      	movs	r2, r3
 80010b4:	3215      	adds	r2, #21
 80010b6:	3020      	adds	r0, #32
 80010b8:	2a1c      	cmp	r2, #28
 80010ba:	dc00      	bgt.n	80010be <__aeabi_dmul+0x47a>
 80010bc:	e71e      	b.n	8000efc <__aeabi_dmul+0x2b8>
 80010be:	4656      	mov	r6, sl
 80010c0:	3b08      	subs	r3, #8
 80010c2:	2200      	movs	r2, #0
 80010c4:	409e      	lsls	r6, r3
 80010c6:	e723      	b.n	8000f10 <__aeabi_dmul+0x2cc>
 80010c8:	9b00      	ldr	r3, [sp, #0]
 80010ca:	469c      	mov	ip, r3
 80010cc:	e6e6      	b.n	8000e9c <__aeabi_dmul+0x258>
 80010ce:	4912      	ldr	r1, [pc, #72]	; (8001118 <__aeabi_dmul+0x4d4>)
 80010d0:	0022      	movs	r2, r4
 80010d2:	4461      	add	r1, ip
 80010d4:	002e      	movs	r6, r5
 80010d6:	408d      	lsls	r5, r1
 80010d8:	408a      	lsls	r2, r1
 80010da:	40c6      	lsrs	r6, r0
 80010dc:	1e69      	subs	r1, r5, #1
 80010de:	418d      	sbcs	r5, r1
 80010e0:	4332      	orrs	r2, r6
 80010e2:	432a      	orrs	r2, r5
 80010e4:	40c4      	lsrs	r4, r0
 80010e6:	0753      	lsls	r3, r2, #29
 80010e8:	d0b6      	beq.n	8001058 <__aeabi_dmul+0x414>
 80010ea:	210f      	movs	r1, #15
 80010ec:	4011      	ands	r1, r2
 80010ee:	2904      	cmp	r1, #4
 80010f0:	d1ac      	bne.n	800104c <__aeabi_dmul+0x408>
 80010f2:	e7b1      	b.n	8001058 <__aeabi_dmul+0x414>
 80010f4:	0765      	lsls	r5, r4, #29
 80010f6:	0264      	lsls	r4, r4, #9
 80010f8:	0b24      	lsrs	r4, r4, #12
 80010fa:	08d2      	lsrs	r2, r2, #3
 80010fc:	4315      	orrs	r5, r2
 80010fe:	2200      	movs	r2, #0
 8001100:	e601      	b.n	8000d06 <__aeabi_dmul+0xc2>
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	0312      	lsls	r2, r2, #12
 8001106:	4314      	orrs	r4, r2
 8001108:	0324      	lsls	r4, r4, #12
 800110a:	4a01      	ldr	r2, [pc, #4]	; (8001110 <__aeabi_dmul+0x4cc>)
 800110c:	0b24      	lsrs	r4, r4, #12
 800110e:	e5fa      	b.n	8000d06 <__aeabi_dmul+0xc2>
 8001110:	000007ff 	.word	0x000007ff
 8001114:	0000043e 	.word	0x0000043e
 8001118:	0000041e 	.word	0x0000041e

0800111c <__aeabi_d2iz>:
 800111c:	000a      	movs	r2, r1
 800111e:	b530      	push	{r4, r5, lr}
 8001120:	4c13      	ldr	r4, [pc, #76]	; (8001170 <__aeabi_d2iz+0x54>)
 8001122:	0053      	lsls	r3, r2, #1
 8001124:	0309      	lsls	r1, r1, #12
 8001126:	0005      	movs	r5, r0
 8001128:	0b09      	lsrs	r1, r1, #12
 800112a:	2000      	movs	r0, #0
 800112c:	0d5b      	lsrs	r3, r3, #21
 800112e:	0fd2      	lsrs	r2, r2, #31
 8001130:	42a3      	cmp	r3, r4
 8001132:	dd04      	ble.n	800113e <__aeabi_d2iz+0x22>
 8001134:	480f      	ldr	r0, [pc, #60]	; (8001174 <__aeabi_d2iz+0x58>)
 8001136:	4283      	cmp	r3, r0
 8001138:	dd02      	ble.n	8001140 <__aeabi_d2iz+0x24>
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <__aeabi_d2iz+0x5c>)
 800113c:	18d0      	adds	r0, r2, r3
 800113e:	bd30      	pop	{r4, r5, pc}
 8001140:	2080      	movs	r0, #128	; 0x80
 8001142:	0340      	lsls	r0, r0, #13
 8001144:	4301      	orrs	r1, r0
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <__aeabi_d2iz+0x60>)
 8001148:	1ac0      	subs	r0, r0, r3
 800114a:	281f      	cmp	r0, #31
 800114c:	dd08      	ble.n	8001160 <__aeabi_d2iz+0x44>
 800114e:	480c      	ldr	r0, [pc, #48]	; (8001180 <__aeabi_d2iz+0x64>)
 8001150:	1ac3      	subs	r3, r0, r3
 8001152:	40d9      	lsrs	r1, r3
 8001154:	000b      	movs	r3, r1
 8001156:	4258      	negs	r0, r3
 8001158:	2a00      	cmp	r2, #0
 800115a:	d1f0      	bne.n	800113e <__aeabi_d2iz+0x22>
 800115c:	0018      	movs	r0, r3
 800115e:	e7ee      	b.n	800113e <__aeabi_d2iz+0x22>
 8001160:	4c08      	ldr	r4, [pc, #32]	; (8001184 <__aeabi_d2iz+0x68>)
 8001162:	40c5      	lsrs	r5, r0
 8001164:	46a4      	mov	ip, r4
 8001166:	4463      	add	r3, ip
 8001168:	4099      	lsls	r1, r3
 800116a:	000b      	movs	r3, r1
 800116c:	432b      	orrs	r3, r5
 800116e:	e7f2      	b.n	8001156 <__aeabi_d2iz+0x3a>
 8001170:	000003fe 	.word	0x000003fe
 8001174:	0000041d 	.word	0x0000041d
 8001178:	7fffffff 	.word	0x7fffffff
 800117c:	00000433 	.word	0x00000433
 8001180:	00000413 	.word	0x00000413
 8001184:	fffffbed 	.word	0xfffffbed

08001188 <__aeabi_i2d>:
 8001188:	b570      	push	{r4, r5, r6, lr}
 800118a:	2800      	cmp	r0, #0
 800118c:	d016      	beq.n	80011bc <__aeabi_i2d+0x34>
 800118e:	17c3      	asrs	r3, r0, #31
 8001190:	18c5      	adds	r5, r0, r3
 8001192:	405d      	eors	r5, r3
 8001194:	0fc4      	lsrs	r4, r0, #31
 8001196:	0028      	movs	r0, r5
 8001198:	f000 f826 	bl	80011e8 <__clzsi2>
 800119c:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <__aeabi_i2d+0x5c>)
 800119e:	1a12      	subs	r2, r2, r0
 80011a0:	280a      	cmp	r0, #10
 80011a2:	dc16      	bgt.n	80011d2 <__aeabi_i2d+0x4a>
 80011a4:	0003      	movs	r3, r0
 80011a6:	002e      	movs	r6, r5
 80011a8:	3315      	adds	r3, #21
 80011aa:	409e      	lsls	r6, r3
 80011ac:	230b      	movs	r3, #11
 80011ae:	1a18      	subs	r0, r3, r0
 80011b0:	40c5      	lsrs	r5, r0
 80011b2:	0552      	lsls	r2, r2, #21
 80011b4:	032d      	lsls	r5, r5, #12
 80011b6:	0b2d      	lsrs	r5, r5, #12
 80011b8:	0d53      	lsrs	r3, r2, #21
 80011ba:	e003      	b.n	80011c4 <__aeabi_i2d+0x3c>
 80011bc:	2400      	movs	r4, #0
 80011be:	2300      	movs	r3, #0
 80011c0:	2500      	movs	r5, #0
 80011c2:	2600      	movs	r6, #0
 80011c4:	051b      	lsls	r3, r3, #20
 80011c6:	432b      	orrs	r3, r5
 80011c8:	07e4      	lsls	r4, r4, #31
 80011ca:	4323      	orrs	r3, r4
 80011cc:	0030      	movs	r0, r6
 80011ce:	0019      	movs	r1, r3
 80011d0:	bd70      	pop	{r4, r5, r6, pc}
 80011d2:	380b      	subs	r0, #11
 80011d4:	4085      	lsls	r5, r0
 80011d6:	0552      	lsls	r2, r2, #21
 80011d8:	032d      	lsls	r5, r5, #12
 80011da:	2600      	movs	r6, #0
 80011dc:	0b2d      	lsrs	r5, r5, #12
 80011de:	0d53      	lsrs	r3, r2, #21
 80011e0:	e7f0      	b.n	80011c4 <__aeabi_i2d+0x3c>
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	0000041e 	.word	0x0000041e

080011e8 <__clzsi2>:
 80011e8:	211c      	movs	r1, #28
 80011ea:	2301      	movs	r3, #1
 80011ec:	041b      	lsls	r3, r3, #16
 80011ee:	4298      	cmp	r0, r3
 80011f0:	d301      	bcc.n	80011f6 <__clzsi2+0xe>
 80011f2:	0c00      	lsrs	r0, r0, #16
 80011f4:	3910      	subs	r1, #16
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	4298      	cmp	r0, r3
 80011fa:	d301      	bcc.n	8001200 <__clzsi2+0x18>
 80011fc:	0a00      	lsrs	r0, r0, #8
 80011fe:	3908      	subs	r1, #8
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	4298      	cmp	r0, r3
 8001204:	d301      	bcc.n	800120a <__clzsi2+0x22>
 8001206:	0900      	lsrs	r0, r0, #4
 8001208:	3904      	subs	r1, #4
 800120a:	a202      	add	r2, pc, #8	; (adr r2, 8001214 <__clzsi2+0x2c>)
 800120c:	5c10      	ldrb	r0, [r2, r0]
 800120e:	1840      	adds	r0, r0, r1
 8001210:	4770      	bx	lr
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	02020304 	.word	0x02020304
 8001218:	01010101 	.word	0x01010101
	...

08001224 <__clzdi2>:
 8001224:	b510      	push	{r4, lr}
 8001226:	2900      	cmp	r1, #0
 8001228:	d103      	bne.n	8001232 <__clzdi2+0xe>
 800122a:	f7ff ffdd 	bl	80011e8 <__clzsi2>
 800122e:	3020      	adds	r0, #32
 8001230:	e002      	b.n	8001238 <__clzdi2+0x14>
 8001232:	0008      	movs	r0, r1
 8001234:	f7ff ffd8 	bl	80011e8 <__clzsi2>
 8001238:	bd10      	pop	{r4, pc}
 800123a:	46c0      	nop			; (mov r8, r8)

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001240:	f000 ffd8 	bl	80021f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001244:	f000 f852 	bl	80012ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001248:	f000 fb80 	bl	800194c <MX_GPIO_Init>
  MX_DMA_Init();
 800124c:	f000 fb60 	bl	8001910 <MX_DMA_Init>
  MX_ADC1_Init();
 8001250:	f000 f8a4 	bl	800139c <MX_ADC1_Init>
  MX_SPI1_Init();
 8001254:	f000 f950 	bl	80014f8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001258:	f000 f98c 	bl	8001574 <MX_TIM1_Init>
  MX_TIM3_Init();
 800125c:	f000 fa42 	bl	80016e4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001260:	f000 fad4 	bl	800180c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001264:	f000 fb20 	bl	80018a8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001268:	f000 faa8 	bl	80017bc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
 // HAL_ADC_Start_DMA(&hadc1, ADC_readout, 6);

  //to do battery_type
  HAL_GPIO_WritePin(KILLSWITCH_GPIO_Port, KILLSWITCH_Pin, GPIO_PIN_SET);
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	019b      	lsls	r3, r3, #6
 8001270:	4818      	ldr	r0, [pc, #96]	; (80012d4 <main+0x98>)
 8001272:	2201      	movs	r2, #1
 8001274:	0019      	movs	r1, r3
 8001276:	f002 fca5 	bl	8003bc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_A_GPIO_Port, ENABLE_A_Pin, GPIO_PIN_SET);
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	4815      	ldr	r0, [pc, #84]	; (80012d4 <main+0x98>)
 8001280:	2201      	movs	r2, #1
 8001282:	0019      	movs	r1, r3
 8001284:	f002 fc9e 	bl	8003bc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_B_GPIO_Port, ENABLE_B_Pin, GPIO_PIN_SET);
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	01db      	lsls	r3, r3, #7
 800128c:	4811      	ldr	r0, [pc, #68]	; (80012d4 <main+0x98>)
 800128e:	2201      	movs	r2, #1
 8001290:	0019      	movs	r1, r3
 8001292:	f002 fc97 	bl	8003bc4 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim16);
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <main+0x9c>)
 8001298:	0018      	movs	r0, r3
 800129a:	f003 fc87 	bl	8004bac <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <main+0xa0>)
 80012a0:	2100      	movs	r1, #0
 80012a2:	0018      	movs	r0, r3
 80012a4:	f003 fd36 	bl	8004d14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <main+0xa0>)
 80012aa:	2104      	movs	r1, #4
 80012ac:	0018      	movs	r0, r3
 80012ae:	f003 fd31 	bl	8004d14 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <main+0xa4>)
 80012b4:	2100      	movs	r1, #0
 80012b6:	0018      	movs	r0, r3
 80012b8:	f003 fd2c 	bl	8004d14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <main+0xa4>)
 80012be:	2104      	movs	r1, #4
 80012c0:	0018      	movs	r0, r3
 80012c2:	f003 fd27 	bl	8004d14 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_readout, 6);
 80012c6:	4907      	ldr	r1, [pc, #28]	; (80012e4 <main+0xa8>)
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <main+0xac>)
 80012ca:	2206      	movs	r2, #6
 80012cc:	0018      	movs	r0, r3
 80012ce:	f001 fb13 	bl	80028f8 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <main+0x96>
 80012d4:	50000400 	.word	0x50000400
 80012d8:	200001e4 	.word	0x200001e4
 80012dc:	2000014c 	.word	0x2000014c
 80012e0:	20000198 	.word	0x20000198
 80012e4:	20000358 	.word	0x20000358
 80012e8:	20000028 	.word	0x20000028

080012ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b093      	sub	sp, #76	; 0x4c
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	2410      	movs	r4, #16
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	0018      	movs	r0, r3
 80012f8:	2338      	movs	r3, #56	; 0x38
 80012fa:	001a      	movs	r2, r3
 80012fc:	2100      	movs	r1, #0
 80012fe:	f005 faaf 	bl	8006860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001302:	003b      	movs	r3, r7
 8001304:	0018      	movs	r0, r3
 8001306:	2310      	movs	r3, #16
 8001308:	001a      	movs	r2, r3
 800130a:	2100      	movs	r1, #0
 800130c:	f005 faa8 	bl	8006860 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	0018      	movs	r0, r3
 8001316:	f002 fc73 	bl	8003c00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800131a:	193b      	adds	r3, r7, r4
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001320:	193b      	adds	r3, r7, r4
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	0252      	lsls	r2, r2, #9
 8001326:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001328:	0021      	movs	r1, r4
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2202      	movs	r2, #2
 800132e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2203      	movs	r2, #3
 8001334:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2208      	movs	r2, #8
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2280      	movs	r2, #128	; 0x80
 8001346:	0292      	lsls	r2, r2, #10
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800134a:	187b      	adds	r3, r7, r1
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	0492      	lsls	r2, r2, #18
 8001350:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2280      	movs	r2, #128	; 0x80
 8001356:	0592      	lsls	r2, r2, #22
 8001358:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135a:	187b      	adds	r3, r7, r1
 800135c:	0018      	movs	r0, r3
 800135e:	f002 fc9b 	bl	8003c98 <HAL_RCC_OscConfig>
 8001362:	1e03      	subs	r3, r0, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001366:	f000 fc55 	bl	8001c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	003b      	movs	r3, r7
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001370:	003b      	movs	r3, r7
 8001372:	2202      	movs	r2, #2
 8001374:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001376:	003b      	movs	r3, r7
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800137c:	003b      	movs	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001382:	003b      	movs	r3, r7
 8001384:	2102      	movs	r1, #2
 8001386:	0018      	movs	r0, r3
 8001388:	f002 ffa0 	bl	80042cc <HAL_RCC_ClockConfig>
 800138c:	1e03      	subs	r3, r0, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001390:	f000 fc40 	bl	8001c14 <Error_Handler>
  }
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b013      	add	sp, #76	; 0x4c
 800139a:	bd90      	pop	{r4, r7, pc}

0800139c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	0018      	movs	r0, r3
 80013a6:	230c      	movs	r3, #12
 80013a8:	001a      	movs	r2, r3
 80013aa:	2100      	movs	r1, #0
 80013ac:	f005 fa58 	bl	8006860 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013b0:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80013b2:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <MX_ADC1_Init+0x140>)
 80013b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013b6:	4b48      	ldr	r3, [pc, #288]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	05d2      	lsls	r2, r2, #23
 80013bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013be:	4b46      	ldr	r3, [pc, #280]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c4:	4b44      	ldr	r3, [pc, #272]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80013ca:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	0612      	lsls	r2, r2, #24
 80013d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013d2:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80013d4:	2204      	movs	r2, #4
 80013d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013d8:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80013de:	4b3e      	ldr	r3, [pc, #248]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013e4:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f0:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80013fe:	222c      	movs	r2, #44	; 0x2c
 8001400:	2101      	movs	r1, #1
 8001402:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001404:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <MX_ADC1_Init+0x13c>)
 8001406:	2200      	movs	r2, #0
 8001408:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <MX_ADC1_Init+0x13c>)
 800140c:	2205      	movs	r2, #5
 800140e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <MX_ADC1_Init+0x13c>)
 8001412:	223c      	movs	r2, #60	; 0x3c
 8001414:	2100      	movs	r1, #0
 8001416:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001418:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <MX_ADC1_Init+0x13c>)
 800141a:	2200      	movs	r2, #0
 800141c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <MX_ADC1_Init+0x13c>)
 8001420:	0018      	movs	r0, r3
 8001422:	f001 f8c1 	bl	80025a8 <HAL_ADC_Init>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d001      	beq.n	800142e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800142a:	f000 fbf3 	bl	8001c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4a2b      	ldr	r2, [pc, #172]	; (80014e0 <MX_ADC1_Init+0x144>)
 8001432:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2201      	movs	r2, #1
 8001438:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143a:	1d3a      	adds	r2, r7, #4
 800143c:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <MX_ADC1_Init+0x13c>)
 800143e:	0011      	movs	r1, r2
 8001440:	0018      	movs	r0, r3
 8001442:	f001 fc1f 	bl	8002c84 <HAL_ADC_ConfigChannel>
 8001446:	1e03      	subs	r3, r0, #0
 8001448:	d001      	beq.n	800144e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800144a:	f000 fbe3 	bl	8001c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4a24      	ldr	r2, [pc, #144]	; (80014e4 <MX_ADC1_Init+0x148>)
 8001452:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001454:	1d3a      	adds	r2, r7, #4
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <MX_ADC1_Init+0x13c>)
 8001458:	0011      	movs	r1, r2
 800145a:	0018      	movs	r0, r3
 800145c:	f001 fc12 	bl	8002c84 <HAL_ADC_ConfigChannel>
 8001460:	1e03      	subs	r3, r0, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001464:	f000 fbd6 	bl	8001c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <MX_ADC1_Init+0x14c>)
 800146c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146e:	1d3a      	adds	r2, r7, #4
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <MX_ADC1_Init+0x13c>)
 8001472:	0011      	movs	r1, r2
 8001474:	0018      	movs	r0, r3
 8001476:	f001 fc05 	bl	8002c84 <HAL_ADC_ConfigChannel>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800147e:	f000 fbc9 	bl	8001c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4a19      	ldr	r2, [pc, #100]	; (80014ec <MX_ADC1_Init+0x150>)
 8001486:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001488:	1d3a      	adds	r2, r7, #4
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <MX_ADC1_Init+0x13c>)
 800148c:	0011      	movs	r1, r2
 800148e:	0018      	movs	r0, r3
 8001490:	f001 fbf8 	bl	8002c84 <HAL_ADC_ConfigChannel>
 8001494:	1e03      	subs	r3, r0, #0
 8001496:	d001      	beq.n	800149c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001498:	f000 fbbc 	bl	8001c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <MX_ADC1_Init+0x154>)
 80014a0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a2:	1d3a      	adds	r2, r7, #4
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80014a6:	0011      	movs	r1, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	f001 fbeb 	bl	8002c84 <HAL_ADC_ConfigChannel>
 80014ae:	1e03      	subs	r3, r0, #0
 80014b0:	d001      	beq.n	80014b6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80014b2:	f000 fbaf 	bl	8001c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <MX_ADC1_Init+0x158>)
 80014ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014bc:	1d3a      	adds	r2, r7, #4
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_ADC1_Init+0x13c>)
 80014c0:	0011      	movs	r1, r2
 80014c2:	0018      	movs	r0, r3
 80014c4:	f001 fbde 	bl	8002c84 <HAL_ADC_ConfigChannel>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d001      	beq.n	80014d0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80014cc:	f000 fba2 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b004      	add	sp, #16
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000028 	.word	0x20000028
 80014dc:	40012400 	.word	0x40012400
 80014e0:	04000002 	.word	0x04000002
 80014e4:	10000010 	.word	0x10000010
 80014e8:	14000020 	.word	0x14000020
 80014ec:	18000040 	.word	0x18000040
 80014f0:	20000100 	.word	0x20000100
 80014f4:	24000200 	.word	0x24000200

080014f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_SPI1_Init+0x74>)
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <MX_SPI1_Init+0x78>)
 8001500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_SPI1_Init+0x74>)
 8001504:	2282      	movs	r2, #130	; 0x82
 8001506:	0052      	lsls	r2, r2, #1
 8001508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_SPI1_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_SPI1_Init+0x74>)
 8001512:	22e0      	movs	r2, #224	; 0xe0
 8001514:	00d2      	lsls	r2, r2, #3
 8001516:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_SPI1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_SPI1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_SPI1_Init+0x74>)
 8001526:	2280      	movs	r2, #128	; 0x80
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_SPI1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_SPI1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_SPI1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_SPI1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_SPI1_Init+0x74>)
 8001546:	2207      	movs	r2, #7
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_SPI1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_SPI1_Init+0x74>)
 8001552:	2208      	movs	r2, #8
 8001554:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <MX_SPI1_Init+0x74>)
 8001558:	0018      	movs	r0, r3
 800155a:	f003 fa17 	bl	800498c <HAL_SPI_Init>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d001      	beq.n	8001566 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001562:	f000 fb57 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200000e8 	.word	0x200000e8
 8001570:	40013000 	.word	0x40013000

08001574 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b098      	sub	sp, #96	; 0x60
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157a:	2354      	movs	r3, #84	; 0x54
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	0018      	movs	r0, r3
 8001580:	230c      	movs	r3, #12
 8001582:	001a      	movs	r2, r3
 8001584:	2100      	movs	r1, #0
 8001586:	f005 f96b 	bl	8006860 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158a:	2338      	movs	r3, #56	; 0x38
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	0018      	movs	r0, r3
 8001590:	231c      	movs	r3, #28
 8001592:	001a      	movs	r2, r3
 8001594:	2100      	movs	r1, #0
 8001596:	f005 f963 	bl	8006860 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	0018      	movs	r0, r3
 800159e:	2334      	movs	r3, #52	; 0x34
 80015a0:	001a      	movs	r2, r3
 80015a2:	2100      	movs	r1, #0
 80015a4:	f005 f95c 	bl	8006860 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015a8:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <MX_TIM1_Init+0x164>)
 80015aa:	4a4c      	ldr	r2, [pc, #304]	; (80016dc <MX_TIM1_Init+0x168>)
 80015ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015ae:	4b4a      	ldr	r3, [pc, #296]	; (80016d8 <MX_TIM1_Init+0x164>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <MX_TIM1_Init+0x164>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 80015ba:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <MX_TIM1_Init+0x164>)
 80015bc:	4a48      	ldr	r2, [pc, #288]	; (80016e0 <MX_TIM1_Init+0x16c>)
 80015be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b45      	ldr	r3, [pc, #276]	; (80016d8 <MX_TIM1_Init+0x164>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015c6:	4b44      	ldr	r3, [pc, #272]	; (80016d8 <MX_TIM1_Init+0x164>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b42      	ldr	r3, [pc, #264]	; (80016d8 <MX_TIM1_Init+0x164>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015d2:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <MX_TIM1_Init+0x164>)
 80015d4:	0018      	movs	r0, r3
 80015d6:	f003 fb45 	bl	8004c64 <HAL_TIM_PWM_Init>
 80015da:	1e03      	subs	r3, r0, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80015de:	f000 fb19 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e2:	2154      	movs	r1, #84	; 0x54
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	2200      	movs	r2, #0
 80015ee:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015f6:	187a      	adds	r2, r7, r1
 80015f8:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <MX_TIM1_Init+0x164>)
 80015fa:	0011      	movs	r1, r2
 80015fc:	0018      	movs	r0, r3
 80015fe:	f004 fa2d 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 8001602:	1e03      	subs	r3, r0, #0
 8001604:	d001      	beq.n	800160a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001606:	f000 fb05 	bl	8001c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160a:	2138      	movs	r1, #56	; 0x38
 800160c:	187b      	adds	r3, r7, r1
 800160e:	2260      	movs	r2, #96	; 0x60
 8001610:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001612:	187b      	adds	r3, r7, r1
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001618:	187b      	adds	r3, r7, r1
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800161e:	187b      	adds	r3, r7, r1
 8001620:	2200      	movs	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001624:	187b      	adds	r3, r7, r1
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800162a:	187b      	adds	r3, r7, r1
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001630:	187b      	adds	r3, r7, r1
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001636:	1879      	adds	r1, r7, r1
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <MX_TIM1_Init+0x164>)
 800163a:	2200      	movs	r2, #0
 800163c:	0018      	movs	r0, r3
 800163e:	f003 fd85 	bl	800514c <HAL_TIM_PWM_ConfigChannel>
 8001642:	1e03      	subs	r3, r0, #0
 8001644:	d001      	beq.n	800164a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001646:	f000 fae5 	bl	8001c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800164a:	2338      	movs	r3, #56	; 0x38
 800164c:	18f9      	adds	r1, r7, r3
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <MX_TIM1_Init+0x164>)
 8001650:	2204      	movs	r2, #4
 8001652:	0018      	movs	r0, r3
 8001654:	f003 fd7a 	bl	800514c <HAL_TIM_PWM_ConfigChannel>
 8001658:	1e03      	subs	r3, r0, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800165c:	f000 fada 	bl	8001c14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	0192      	lsls	r2, r2, #6
 8001684:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2280      	movs	r2, #128	; 0x80
 800169c:	0492      	lsls	r2, r2, #18
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2200      	movs	r2, #0
 80016b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016b2:	1d3a      	adds	r2, r7, #4
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <MX_TIM1_Init+0x164>)
 80016b6:	0011      	movs	r1, r2
 80016b8:	0018      	movs	r0, r3
 80016ba:	f004 fa3d 	bl	8005b38 <HAL_TIMEx_ConfigBreakDeadTime>
 80016be:	1e03      	subs	r3, r0, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 80016c2:	f000 faa7 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <MX_TIM1_Init+0x164>)
 80016c8:	0018      	movs	r0, r3
 80016ca:	f000 fc23 	bl	8001f14 <HAL_TIM_MspPostInit>

}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b018      	add	sp, #96	; 0x60
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	2000014c 	.word	0x2000014c
 80016dc:	40012c00 	.word	0x40012c00
 80016e0:	00000c7f 	.word	0x00000c7f

080016e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ea:	231c      	movs	r3, #28
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	0018      	movs	r0, r3
 80016f0:	230c      	movs	r3, #12
 80016f2:	001a      	movs	r2, r3
 80016f4:	2100      	movs	r1, #0
 80016f6:	f005 f8b3 	bl	8006860 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016fa:	003b      	movs	r3, r7
 80016fc:	0018      	movs	r0, r3
 80016fe:	231c      	movs	r3, #28
 8001700:	001a      	movs	r2, r3
 8001702:	2100      	movs	r1, #0
 8001704:	f005 f8ac 	bl	8006860 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <MX_TIM3_Init+0xcc>)
 800170a:	4a2a      	ldr	r2, [pc, #168]	; (80017b4 <MX_TIM3_Init+0xd0>)
 800170c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800170e:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <MX_TIM3_Init+0xcc>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <MX_TIM3_Init+0xcc>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3199;
 800171a:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <MX_TIM3_Init+0xcc>)
 800171c:	4a26      	ldr	r2, [pc, #152]	; (80017b8 <MX_TIM3_Init+0xd4>)
 800171e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <MX_TIM3_Init+0xcc>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <MX_TIM3_Init+0xcc>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <MX_TIM3_Init+0xcc>)
 800172e:	0018      	movs	r0, r3
 8001730:	f003 fa98 	bl	8004c64 <HAL_TIM_PWM_Init>
 8001734:	1e03      	subs	r3, r0, #0
 8001736:	d001      	beq.n	800173c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001738:	f000 fa6c 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	211c      	movs	r1, #28
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800174a:	187a      	adds	r2, r7, r1
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_TIM3_Init+0xcc>)
 800174e:	0011      	movs	r1, r2
 8001750:	0018      	movs	r0, r3
 8001752:	f004 f983 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 8001756:	1e03      	subs	r3, r0, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800175a:	f000 fa5b 	bl	8001c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800175e:	003b      	movs	r3, r7
 8001760:	2260      	movs	r2, #96	; 0x60
 8001762:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001764:	003b      	movs	r3, r7
 8001766:	2200      	movs	r2, #0
 8001768:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176a:	003b      	movs	r3, r7
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001770:	003b      	movs	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001776:	0039      	movs	r1, r7
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <MX_TIM3_Init+0xcc>)
 800177a:	2200      	movs	r2, #0
 800177c:	0018      	movs	r0, r3
 800177e:	f003 fce5 	bl	800514c <HAL_TIM_PWM_ConfigChannel>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d001      	beq.n	800178a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8001786:	f000 fa45 	bl	8001c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800178a:	0039      	movs	r1, r7
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_TIM3_Init+0xcc>)
 800178e:	2204      	movs	r2, #4
 8001790:	0018      	movs	r0, r3
 8001792:	f003 fcdb 	bl	800514c <HAL_TIM_PWM_ConfigChannel>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d001      	beq.n	800179e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800179a:	f000 fa3b 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <MX_TIM3_Init+0xcc>)
 80017a0:	0018      	movs	r0, r3
 80017a2:	f000 fbb7 	bl	8001f14 <HAL_TIM_MspPostInit>

}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b00a      	add	sp, #40	; 0x28
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	20000198 	.word	0x20000198
 80017b4:	40000400 	.word	0x40000400
 80017b8:	00000c7f 	.word	0x00000c7f

080017bc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_TIM16_Init+0x44>)
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <MX_TIM16_Init+0x48>)
 80017c4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 99;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_TIM16_Init+0x44>)
 80017c8:	2263      	movs	r2, #99	; 0x63
 80017ca:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_TIM16_Init+0x44>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_TIM16_Init+0x44>)
 80017d4:	4a0c      	ldr	r2, [pc, #48]	; (8001808 <MX_TIM16_Init+0x4c>)
 80017d6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_TIM16_Init+0x44>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_TIM16_Init+0x44>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_TIM16_Init+0x44>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <MX_TIM16_Init+0x44>)
 80017ec:	0018      	movs	r0, r3
 80017ee:	f003 f985 	bl	8004afc <HAL_TIM_Base_Init>
 80017f2:	1e03      	subs	r3, r0, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80017f6:	f000 fa0d 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200001e4 	.word	0x200001e4
 8001804:	40014400 	.word	0x40014400
 8001808:	000003e7 	.word	0x000003e7

0800180c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 8001812:	4a24      	ldr	r2, [pc, #144]	; (80018a4 <MX_USART1_UART_Init+0x98>)
 8001814:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 8001818:	22e1      	movs	r2, #225	; 0xe1
 800181a:	0252      	lsls	r2, r2, #9
 800181c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 8001832:	220c      	movs	r2, #12
 8001834:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 8001850:	2200      	movs	r2, #0
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 8001856:	0018      	movs	r0, r3
 8001858:	f004 fa2c 	bl	8005cb4 <HAL_UART_Init>
 800185c:	1e03      	subs	r3, r0, #0
 800185e:	d001      	beq.n	8001864 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001860:	f000 f9d8 	bl	8001c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 8001866:	2100      	movs	r1, #0
 8001868:	0018      	movs	r0, r3
 800186a:	f004 fef5 	bl	8006658 <HAL_UARTEx_SetTxFifoThreshold>
 800186e:	1e03      	subs	r3, r0, #0
 8001870:	d001      	beq.n	8001876 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001872:	f000 f9cf 	bl	8001c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 8001878:	2100      	movs	r1, #0
 800187a:	0018      	movs	r0, r3
 800187c:	f004 ff2c 	bl	80066d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001880:	1e03      	subs	r3, r0, #0
 8001882:	d001      	beq.n	8001888 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001884:	f000 f9c6 	bl	8001c14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <MX_USART1_UART_Init+0x94>)
 800188a:	0018      	movs	r0, r3
 800188c:	f004 feaa 	bl	80065e4 <HAL_UARTEx_DisableFifoMode>
 8001890:	1e03      	subs	r3, r0, #0
 8001892:	d001      	beq.n	8001898 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001894:	f000 f9be 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	20000230 	.word	0x20000230
 80018a4:	40013800 	.word	0x40013800

080018a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <MX_USART2_UART_Init+0x60>)
 80018ae:	4a17      	ldr	r2, [pc, #92]	; (800190c <MX_USART2_UART_Init+0x64>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <MX_USART2_UART_Init+0x60>)
 80018b4:	22e1      	movs	r2, #225	; 0xe1
 80018b6:	0252      	lsls	r2, r2, #9
 80018b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <MX_USART2_UART_Init+0x60>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_USART2_UART_Init+0x60>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <MX_USART2_UART_Init+0x60>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <MX_USART2_UART_Init+0x60>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <MX_USART2_UART_Init+0x60>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <MX_USART2_UART_Init+0x60>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <MX_USART2_UART_Init+0x60>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <MX_USART2_UART_Init+0x60>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <MX_USART2_UART_Init+0x60>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <MX_USART2_UART_Init+0x60>)
 80018f2:	0018      	movs	r0, r3
 80018f4:	f004 f9de 	bl	8005cb4 <HAL_UART_Init>
 80018f8:	1e03      	subs	r3, r0, #0
 80018fa:	d001      	beq.n	8001900 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018fc:	f000 f98a 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	200002c4 	.word	0x200002c4
 800190c:	40004400 	.word	0x40004400

08001910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_DMA_Init+0x38>)
 8001918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MX_DMA_Init+0x38>)
 800191c:	2101      	movs	r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	639a      	str	r2, [r3, #56]	; 0x38
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_DMA_Init+0x38>)
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	2201      	movs	r2, #1
 8001928:	4013      	ands	r3, r2
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	2009      	movs	r0, #9
 8001934:	f001 fd5e 	bl	80033f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001938:	2009      	movs	r0, #9
 800193a:	f001 fd70 	bl	800341e <HAL_NVIC_EnableIRQ>

}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	b002      	add	sp, #8
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	40021000 	.word	0x40021000

0800194c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b08b      	sub	sp, #44	; 0x2c
 8001950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	2414      	movs	r4, #20
 8001954:	193b      	adds	r3, r7, r4
 8001956:	0018      	movs	r0, r3
 8001958:	2314      	movs	r3, #20
 800195a:	001a      	movs	r2, r3
 800195c:	2100      	movs	r1, #0
 800195e:	f004 ff7f 	bl	8006860 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001962:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <MX_GPIO_Init+0x140>)
 8001964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001966:	4b49      	ldr	r3, [pc, #292]	; (8001a8c <MX_GPIO_Init+0x140>)
 8001968:	2104      	movs	r1, #4
 800196a:	430a      	orrs	r2, r1
 800196c:	635a      	str	r2, [r3, #52]	; 0x34
 800196e:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <MX_GPIO_Init+0x140>)
 8001970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001972:	2204      	movs	r2, #4
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800197a:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <MX_GPIO_Init+0x140>)
 800197c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800197e:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <MX_GPIO_Init+0x140>)
 8001980:	2120      	movs	r1, #32
 8001982:	430a      	orrs	r2, r1
 8001984:	635a      	str	r2, [r3, #52]	; 0x34
 8001986:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <MX_GPIO_Init+0x140>)
 8001988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198a:	2220      	movs	r2, #32
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	4b3e      	ldr	r3, [pc, #248]	; (8001a8c <MX_GPIO_Init+0x140>)
 8001994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001996:	4b3d      	ldr	r3, [pc, #244]	; (8001a8c <MX_GPIO_Init+0x140>)
 8001998:	2101      	movs	r1, #1
 800199a:	430a      	orrs	r2, r1
 800199c:	635a      	str	r2, [r3, #52]	; 0x34
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <MX_GPIO_Init+0x140>)
 80019a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a2:	2201      	movs	r2, #1
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <MX_GPIO_Init+0x140>)
 80019ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ae:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <MX_GPIO_Init+0x140>)
 80019b0:	2102      	movs	r1, #2
 80019b2:	430a      	orrs	r2, r1
 80019b4:	635a      	str	r2, [r3, #52]	; 0x34
 80019b6:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <MX_GPIO_Init+0x140>)
 80019b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ba:	2202      	movs	r2, #2
 80019bc:	4013      	ands	r3, r2
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c2:	4b32      	ldr	r3, [pc, #200]	; (8001a8c <MX_GPIO_Init+0x140>)
 80019c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <MX_GPIO_Init+0x140>)
 80019c8:	2108      	movs	r1, #8
 80019ca:	430a      	orrs	r2, r1
 80019cc:	635a      	str	r2, [r3, #52]	; 0x34
 80019ce:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <MX_GPIO_Init+0x140>)
 80019d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d2:	2208      	movs	r2, #8
 80019d4:	4013      	ands	r3, r2
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KILLSWITCH_Pin|ENABLE_B_Pin|ENABLE_A_Pin, GPIO_PIN_RESET);
 80019da:	23e0      	movs	r3, #224	; 0xe0
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	482c      	ldr	r0, [pc, #176]	; (8001a90 <MX_GPIO_Init+0x144>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	0019      	movs	r1, r3
 80019e4:	f002 f8ee 	bl	8003bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <MX_GPIO_Init+0x148>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	2101      	movs	r1, #1
 80019ee:	0018      	movs	r0, r3
 80019f0:	f002 f8e8 	bl	8003bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	22e0      	movs	r2, #224	; 0xe0
 80019f8:	0212      	lsls	r2, r2, #8
 80019fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fc:	193b      	adds	r3, r7, r4
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	193b      	adds	r3, r7, r4
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a08:	193b      	adds	r3, r7, r4
 8001a0a:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <MX_GPIO_Init+0x14c>)
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	0010      	movs	r0, r2
 8001a10:	f001 ff74 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pins : KILLSWITCH_Pin ENABLE_B_Pin ENABLE_A_Pin */
  GPIO_InitStruct.Pin = KILLSWITCH_Pin|ENABLE_B_Pin|ENABLE_A_Pin;
 8001a14:	0021      	movs	r1, r4
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	22e0      	movs	r2, #224	; 0xe0
 8001a1a:	0212      	lsls	r2, r2, #8
 8001a1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	000c      	movs	r4, r1
 8001a20:	193b      	adds	r3, r7, r4
 8001a22:	2201      	movs	r2, #1
 8001a24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	193b      	adds	r3, r7, r4
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	193b      	adds	r3, r7, r4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a32:	193b      	adds	r3, r7, r4
 8001a34:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <MX_GPIO_Init+0x144>)
 8001a36:	0019      	movs	r1, r3
 8001a38:	0010      	movs	r0, r2
 8001a3a:	f001 ff5f 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a3e:	193b      	adds	r3, r7, r4
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	193b      	adds	r3, r7, r4
 8001a46:	2201      	movs	r2, #1
 8001a48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	193b      	adds	r3, r7, r4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	193b      	adds	r3, r7, r4
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a56:	193b      	adds	r3, r7, r4
 8001a58:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <MX_GPIO_Init+0x148>)
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	0010      	movs	r0, r2
 8001a5e:	f001 ff4d 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a62:	0021      	movs	r1, r4
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	2208      	movs	r2, #8
 8001a68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <MX_GPIO_Init+0x148>)
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	0010      	movs	r0, r2
 8001a7e:	f001 ff3d 	bl	80038fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b00b      	add	sp, #44	; 0x2c
 8001a88:	bd90      	pop	{r4, r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	50000400 	.word	0x50000400
 8001a94:	50000c00 	.word	0x50000c00
 8001a98:	50000800 	.word	0x50000800

08001a9c <setEngine>:

/* USER CODE BEGIN 4 */

void setEngine(int PWM, int EngineId)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
	if(PWM>=PWM_MAX)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <setEngine+0x80>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	dd01      	ble.n	8001ab2 <setEngine+0x16>
		PWM=PWM_MAX-1;
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <setEngine+0x80>)
 8001ab0:	607b      	str	r3, [r7, #4]
	if(PWM<=-PWM_MAX)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <setEngine+0x84>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	da01      	bge.n	8001abe <setEngine+0x22>
		PWM=-PWM_MAX+1;
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <setEngine+0x84>)
 8001abc:	607b      	str	r3, [r7, #4]
	switch(EngineId)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <setEngine+0x30>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d012      	beq.n	8001af0 <setEngine+0x54>
			TIM1->CCR1 = 5;
			TIM1->CCR2 = -PWM;
		}
		break;
	}
}
 8001aca:	e023      	b.n	8001b14 <setEngine+0x78>
		if(PWM>0)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	dd06      	ble.n	8001ae0 <setEngine+0x44>
			TIM3->CCR1 = 5;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <setEngine+0x88>)
 8001ad4:	2205      	movs	r2, #5
 8001ad6:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = PWM;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <setEngine+0x88>)
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001ade:	e019      	b.n	8001b14 <setEngine+0x78>
			TIM3->CCR1 = -PWM;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	425a      	negs	r2, r3
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <setEngine+0x88>)
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 5;
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <setEngine+0x88>)
 8001aea:	2205      	movs	r2, #5
 8001aec:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001aee:	e011      	b.n	8001b14 <setEngine+0x78>
		if(PWM>0)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	dd06      	ble.n	8001b04 <setEngine+0x68>
			TIM1->CCR1 = PWM;
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <setEngine+0x8c>)
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 5;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <setEngine+0x8c>)
 8001afe:	2205      	movs	r2, #5
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001b02:	e006      	b.n	8001b12 <setEngine+0x76>
			TIM1->CCR1 = 5;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <setEngine+0x8c>)
 8001b06:	2205      	movs	r2, #5
 8001b08:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = -PWM;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	425a      	negs	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <setEngine+0x8c>)
 8001b10:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001b12:	46c0      	nop			; (mov r8, r8)
}
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	00000c1b 	.word	0x00000c1b
 8001b20:	fffff3e5 	.word	0xfffff3e5
 8001b24:	40000400 	.word	0x40000400
 8001b28:	40012c00 	.word	0x40012c00

08001b2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim16)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	static int error=0, prev_error=0;
	static short direction = 0;
	static int PD = 0;
	prev_error = error;
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b3a:	601a      	str	r2, [r3, #0]
	if(ADC_readout[SENSOR_DISTANCE_LEFT] < DETECT && ADC_readout[SENSOR_DISTANCE_RIGHT] < DETECT)
 8001b3c:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b3e:	881a      	ldrh	r2, [r3, #0]
 8001b40:	23c8      	movs	r3, #200	; 0xc8
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d213      	bcs.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x44>
 8001b48:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b4a:	88da      	ldrh	r2, [r3, #6]
 8001b4c:	23c8      	movs	r3, #200	; 0xc8
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d20d      	bcs.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		if(direction == 1)
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	5e9b      	ldrsh	r3, [r3, r2]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d104      	bne.n	8001b68 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			error = NO_LINE_OF_SIGHT;
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b60:	22fa      	movs	r2, #250	; 0xfa
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	601a      	str	r2, [r3, #0]
		if(direction == 1)
 8001b66:	e00b      	b.n	8001b80 <HAL_TIM_PeriodElapsedCallback+0x54>
		}
		else
			error = -NO_LINE_OF_SIGHT;
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b6a:	4a26      	ldr	r2, [pc, #152]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b6c:	601a      	str	r2, [r3, #0]
		if(direction == 1)
 8001b6e:	e007      	b.n	8001b80 <HAL_TIM_PeriodElapsedCallback+0x54>
	}
	else
	error = ADC_readout[SENSOR_DISTANCE_LEFT] - ADC_readout[SENSOR_DISTANCE_RIGHT];
 8001b70:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	001a      	movs	r2, r3
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b78:	88db      	ldrh	r3, [r3, #6]
 8001b7a:	1ad2      	subs	r2, r2, r3
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b7e:	601a      	str	r2, [r3, #0]
	if(error < 0)
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	da03      	bge.n	8001b90 <HAL_TIM_PeriodElapsedCallback+0x64>
	{
		direction = 0;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	801a      	strh	r2, [r3, #0]
 8001b8e:	e002      	b.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0x6a>
	}
	else
	{
		direction = 1;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	801a      	strh	r2, [r3, #0]
	}

	PD=KP*error+KD*(error-prev_error);
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f7ff faf4 	bl	8001188 <__aeabi_i2d>
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001ba4:	f7ff f84e 	bl	8000c44 <__aeabi_dmul>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	000b      	movs	r3, r1
 8001bac:	0010      	movs	r0, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f7fe fd0a 	bl	80005cc <__aeabi_dadd>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	000b      	movs	r3, r1
 8001bbc:	0010      	movs	r0, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	f7ff faac 	bl	800111c <__aeabi_d2iz>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001bc8:	601a      	str	r2, [r3, #0]
	setEngine(PWM_BASE+PD, RIGHT);
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001bd0:	4694      	mov	ip, r2
 8001bd2:	4463      	add	r3, ip
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f7ff ff60 	bl	8001a9c <setEngine>
	setEngine(PWM_BASE-PD, LEFT);
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2100      	movs	r1, #0
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff ff58 	bl	8001a9c <setEngine>
}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b002      	add	sp, #8
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000364 	.word	0x20000364
 8001bf8:	20000368 	.word	0x20000368
 8001bfc:	20000358 	.word	0x20000358
 8001c00:	2000036c 	.word	0x2000036c
 8001c04:	fffff060 	.word	0xfffff060
 8001c08:	3fe00000 	.word	0x3fe00000
 8001c0c:	20000370 	.word	0x20000370
 8001c10:	00000bb8 	.word	0x00000bb8

08001c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c18:	b672      	cpsid	i
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <Error_Handler+0x8>
	...

08001c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_MspInit+0x44>)
 8001c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_MspInit+0x44>)
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_MspInit+0x44>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	2201      	movs	r2, #1
 8001c38:	4013      	ands	r3, r2
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_MspInit+0x44>)
 8001c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_MspInit+0x44>)
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	0549      	lsls	r1, r1, #21
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_MspInit+0x44>)
 8001c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	055b      	lsls	r3, r3, #21
 8001c54:	4013      	ands	r3, r2
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b002      	add	sp, #8
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	40021000 	.word	0x40021000

08001c68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b08b      	sub	sp, #44	; 0x2c
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	2414      	movs	r4, #20
 8001c72:	193b      	adds	r3, r7, r4
 8001c74:	0018      	movs	r0, r3
 8001c76:	2314      	movs	r3, #20
 8001c78:	001a      	movs	r2, r3
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	f004 fdf0 	bl	8006860 <memset>
  if(hadc->Instance==ADC1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a3f      	ldr	r2, [pc, #252]	; (8001d84 <HAL_ADC_MspInit+0x11c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d177      	bne.n	8001d7a <HAL_ADC_MspInit+0x112>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c8a:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <HAL_ADC_MspInit+0x120>)
 8001c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <HAL_ADC_MspInit+0x120>)
 8001c90:	2180      	movs	r1, #128	; 0x80
 8001c92:	0349      	lsls	r1, r1, #13
 8001c94:	430a      	orrs	r2, r1
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
 8001c98:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <HAL_ADC_MspInit+0x120>)
 8001c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	035b      	lsls	r3, r3, #13
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <HAL_ADC_MspInit+0x120>)
 8001ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001caa:	4b37      	ldr	r3, [pc, #220]	; (8001d88 <HAL_ADC_MspInit+0x120>)
 8001cac:	2101      	movs	r1, #1
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cb2:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <HAL_ADC_MspInit+0x120>)
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <HAL_ADC_MspInit+0x120>)
 8001cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <HAL_ADC_MspInit+0x120>)
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cca:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <HAL_ADC_MspInit+0x120>)
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cce:	2202      	movs	r2, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001cd6:	193b      	adds	r3, r7, r4
 8001cd8:	2272      	movs	r2, #114	; 0x72
 8001cda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cdc:	193b      	adds	r3, r7, r4
 8001cde:	2203      	movs	r2, #3
 8001ce0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	193b      	adds	r3, r7, r4
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	193a      	adds	r2, r7, r4
 8001cea:	23a0      	movs	r3, #160	; 0xa0
 8001cec:	05db      	lsls	r3, r3, #23
 8001cee:	0011      	movs	r1, r2
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f001 fe03 	bl	80038fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cf6:	193b      	adds	r3, r7, r4
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfc:	193b      	adds	r3, r7, r4
 8001cfe:	2203      	movs	r2, #3
 8001d00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	193b      	adds	r3, r7, r4
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d08:	193b      	adds	r3, r7, r4
 8001d0a:	4a20      	ldr	r2, [pc, #128]	; (8001d8c <HAL_ADC_MspInit+0x124>)
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	0010      	movs	r0, r2
 8001d10:	f001 fdf4 	bl	80038fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_ADC_MspInit+0x128>)
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_ADC_MspInit+0x12c>)
 8001d18:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_ADC_MspInit+0x128>)
 8001d1c:	2205      	movs	r2, #5
 8001d1e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_ADC_MspInit+0x128>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_ADC_MspInit+0x128>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d2c:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_ADC_MspInit+0x128>)
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_ADC_MspInit+0x128>)
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	0052      	lsls	r2, r2, #1
 8001d38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_ADC_MspInit+0x128>)
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	00d2      	lsls	r2, r2, #3
 8001d40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_ADC_MspInit+0x128>)
 8001d44:	2220      	movs	r2, #32
 8001d46:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_ADC_MspInit+0x128>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_ADC_MspInit+0x128>)
 8001d50:	0018      	movs	r0, r3
 8001d52:	f001 fb81 	bl	8003458 <HAL_DMA_Init>
 8001d56:	1e03      	subs	r3, r0, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8001d5a:	f7ff ff5b 	bl	8001c14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <HAL_ADC_MspInit+0x128>)
 8001d62:	651a      	str	r2, [r3, #80]	; 0x50
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_ADC_MspInit+0x128>)
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	200c      	movs	r0, #12
 8001d70:	f001 fb40 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001d74:	200c      	movs	r0, #12
 8001d76:	f001 fb52 	bl	800341e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b00b      	add	sp, #44	; 0x2c
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	40012400 	.word	0x40012400
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	50000400 	.word	0x50000400
 8001d90:	2000008c 	.word	0x2000008c
 8001d94:	40020008 	.word	0x40020008

08001d98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b08b      	sub	sp, #44	; 0x2c
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	2414      	movs	r4, #20
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	0018      	movs	r0, r3
 8001da6:	2314      	movs	r3, #20
 8001da8:	001a      	movs	r2, r3
 8001daa:	2100      	movs	r1, #0
 8001dac:	f004 fd58 	bl	8006860 <memset>
  if(hspi->Instance==SPI1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1b      	ldr	r2, [pc, #108]	; (8001e24 <HAL_SPI_MspInit+0x8c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d12f      	bne.n	8001e1a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dba:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_SPI_MspInit+0x90>)
 8001dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_SPI_MspInit+0x90>)
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	0149      	lsls	r1, r1, #5
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_SPI_MspInit+0x90>)
 8001dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	015b      	lsls	r3, r3, #5
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_SPI_MspInit+0x90>)
 8001dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_SPI_MspInit+0x90>)
 8001ddc:	2102      	movs	r1, #2
 8001dde:	430a      	orrs	r2, r1
 8001de0:	635a      	str	r2, [r3, #52]	; 0x34
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <HAL_SPI_MspInit+0x90>)
 8001de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de6:	2202      	movs	r2, #2
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001dee:	0021      	movs	r1, r4
 8001df0:	187b      	adds	r3, r7, r1
 8001df2:	2238      	movs	r2, #56	; 0x38
 8001df4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	187b      	adds	r3, r7, r1
 8001df8:	2202      	movs	r2, #2
 8001dfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	187b      	adds	r3, r7, r1
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	187b      	adds	r3, r7, r1
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	4a06      	ldr	r2, [pc, #24]	; (8001e2c <HAL_SPI_MspInit+0x94>)
 8001e12:	0019      	movs	r1, r3
 8001e14:	0010      	movs	r0, r2
 8001e16:	f001 fd71 	bl	80038fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b00b      	add	sp, #44	; 0x2c
 8001e20:	bd90      	pop	{r4, r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	40013000 	.word	0x40013000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	50000400 	.word	0x50000400

08001e30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b091      	sub	sp, #68	; 0x44
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e38:	2410      	movs	r4, #16
 8001e3a:	193b      	adds	r3, r7, r4
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	2330      	movs	r3, #48	; 0x30
 8001e40:	001a      	movs	r2, r3
 8001e42:	2100      	movs	r1, #0
 8001e44:	f004 fd0c 	bl	8006860 <memset>
  if(htim_pwm->Instance==TIM1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1a      	ldr	r2, [pc, #104]	; (8001eb8 <HAL_TIM_PWM_MspInit+0x88>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d11d      	bne.n	8001e8e <HAL_TIM_PWM_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001e52:	193b      	adds	r3, r7, r4
 8001e54:	2280      	movs	r2, #128	; 0x80
 8001e56:	0392      	lsls	r2, r2, #14
 8001e58:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001e5a:	193b      	adds	r3, r7, r4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e60:	193b      	adds	r3, r7, r4
 8001e62:	0018      	movs	r0, r3
 8001e64:	f002 fbda 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 8001e68:	1e03      	subs	r3, r0, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8001e6c:	f7ff fed2 	bl	8001c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_TIM_PWM_MspInit+0x8c>)
 8001e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_TIM_PWM_MspInit+0x8c>)
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	0109      	lsls	r1, r1, #4
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_TIM_PWM_MspInit+0x8c>)
 8001e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	4013      	ands	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e8c:	e010      	b.n	8001eb0 <HAL_TIM_PWM_MspInit+0x80>
  else if(htim_pwm->Instance==TIM3)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <HAL_TIM_PWM_MspInit+0x90>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d10b      	bne.n	8001eb0 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_TIM_PWM_MspInit+0x8c>)
 8001e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <HAL_TIM_PWM_MspInit+0x8c>)
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_TIM_PWM_MspInit+0x8c>)
 8001ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b011      	add	sp, #68	; 0x44
 8001eb6:	bd90      	pop	{r4, r7, pc}
 8001eb8:	40012c00 	.word	0x40012c00
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40000400 	.word	0x40000400

08001ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <HAL_TIM_Base_MspInit+0x48>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d115      	bne.n	8001f02 <HAL_TIM_Base_MspInit+0x3e>
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_TIM_Base_MspInit+0x4c>)
 8001ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_TIM_Base_MspInit+0x4c>)
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	0289      	lsls	r1, r1, #10
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_TIM_Base_MspInit+0x4c>)
 8001ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	029b      	lsls	r3, r3, #10
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2015      	movs	r0, #21
 8001ef8:	f001 fa7c 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001efc:	2015      	movs	r0, #21
 8001efe:	f001 fa8e 	bl	800341e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b004      	add	sp, #16
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	40014400 	.word	0x40014400
 8001f10:	40021000 	.word	0x40021000

08001f14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b08b      	sub	sp, #44	; 0x2c
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	2414      	movs	r4, #20
 8001f1e:	193b      	adds	r3, r7, r4
 8001f20:	0018      	movs	r0, r3
 8001f22:	2314      	movs	r3, #20
 8001f24:	001a      	movs	r2, r3
 8001f26:	2100      	movs	r1, #0
 8001f28:	f004 fc9a 	bl	8006860 <memset>
  if(htim->Instance==TIM1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a29      	ldr	r2, [pc, #164]	; (8001fd8 <HAL_TIM_MspPostInit+0xc4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d124      	bne.n	8001f80 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_TIM_MspPostInit+0xc8>)
 8001f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f3a:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_TIM_MspPostInit+0xc8>)
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	635a      	str	r2, [r3, #52]	; 0x34
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <HAL_TIM_MspPostInit+0xc8>)
 8001f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f46:	2201      	movs	r2, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f4e:	193b      	adds	r3, r7, r4
 8001f50:	22c0      	movs	r2, #192	; 0xc0
 8001f52:	0092      	lsls	r2, r2, #2
 8001f54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	0021      	movs	r1, r4
 8001f58:	187b      	adds	r3, r7, r1
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	187b      	adds	r3, r7, r1
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	187b      	adds	r3, r7, r1
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001f6a:	187b      	adds	r3, r7, r1
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	187a      	adds	r2, r7, r1
 8001f72:	23a0      	movs	r3, #160	; 0xa0
 8001f74:	05db      	lsls	r3, r3, #23
 8001f76:	0011      	movs	r1, r2
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f001 fcbf 	bl	80038fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f7e:	e026      	b.n	8001fce <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM3)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <HAL_TIM_MspPostInit+0xcc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d121      	bne.n	8001fce <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_TIM_MspPostInit+0xc8>)
 8001f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_TIM_MspPostInit+0xc8>)
 8001f90:	2104      	movs	r1, #4
 8001f92:	430a      	orrs	r2, r1
 8001f94:	635a      	str	r2, [r3, #52]	; 0x34
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_TIM_MspPostInit+0xc8>)
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fa2:	2114      	movs	r1, #20
 8001fa4:	187b      	adds	r3, r7, r1
 8001fa6:	22c0      	movs	r2, #192	; 0xc0
 8001fa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	187b      	adds	r3, r7, r1
 8001fac:	2202      	movs	r2, #2
 8001fae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	187b      	adds	r3, r7, r1
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001fbc:	187b      	adds	r3, r7, r1
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc2:	187b      	adds	r3, r7, r1
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_TIM_MspPostInit+0xd0>)
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	0010      	movs	r0, r2
 8001fca:	f001 fc97 	bl	80038fc <HAL_GPIO_Init>
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b00b      	add	sp, #44	; 0x2c
 8001fd4:	bd90      	pop	{r4, r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	40012c00 	.word	0x40012c00
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	50000800 	.word	0x50000800

08001fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b099      	sub	sp, #100	; 0x64
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	234c      	movs	r3, #76	; 0x4c
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	2314      	movs	r3, #20
 8001ff8:	001a      	movs	r2, r3
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	f004 fc30 	bl	8006860 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002000:	241c      	movs	r4, #28
 8002002:	193b      	adds	r3, r7, r4
 8002004:	0018      	movs	r0, r3
 8002006:	2330      	movs	r3, #48	; 0x30
 8002008:	001a      	movs	r2, r3
 800200a:	2100      	movs	r1, #0
 800200c:	f004 fc28 	bl	8006860 <memset>
  if(huart->Instance==USART1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a3d      	ldr	r2, [pc, #244]	; (800210c <HAL_UART_MspInit+0x124>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d13e      	bne.n	8002098 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800201a:	193b      	adds	r3, r7, r4
 800201c:	2201      	movs	r2, #1
 800201e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002020:	193b      	adds	r3, r7, r4
 8002022:	2200      	movs	r2, #0
 8002024:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002026:	193b      	adds	r3, r7, r4
 8002028:	0018      	movs	r0, r3
 800202a:	f002 faf7 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 800202e:	1e03      	subs	r3, r0, #0
 8002030:	d001      	beq.n	8002036 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002032:	f7ff fdef 	bl	8001c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002036:	4b36      	ldr	r3, [pc, #216]	; (8002110 <HAL_UART_MspInit+0x128>)
 8002038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800203a:	4b35      	ldr	r3, [pc, #212]	; (8002110 <HAL_UART_MspInit+0x128>)
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	430a      	orrs	r2, r1
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
 8002044:	4b32      	ldr	r3, [pc, #200]	; (8002110 <HAL_UART_MspInit+0x128>)
 8002046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	01db      	lsls	r3, r3, #7
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <HAL_UART_MspInit+0x128>)
 8002054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002056:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <HAL_UART_MspInit+0x128>)
 8002058:	2102      	movs	r1, #2
 800205a:	430a      	orrs	r2, r1
 800205c:	635a      	str	r2, [r3, #52]	; 0x34
 800205e:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <HAL_UART_MspInit+0x128>)
 8002060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002062:	2202      	movs	r2, #2
 8002064:	4013      	ands	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800206a:	214c      	movs	r1, #76	; 0x4c
 800206c:	187b      	adds	r3, r7, r1
 800206e:	22c0      	movs	r2, #192	; 0xc0
 8002070:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	187b      	adds	r3, r7, r1
 8002074:	2202      	movs	r2, #2
 8002076:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	187b      	adds	r3, r7, r1
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	187b      	adds	r3, r7, r1
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002084:	187b      	adds	r3, r7, r1
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208a:	187b      	adds	r3, r7, r1
 800208c:	4a21      	ldr	r2, [pc, #132]	; (8002114 <HAL_UART_MspInit+0x12c>)
 800208e:	0019      	movs	r1, r3
 8002090:	0010      	movs	r0, r2
 8002092:	f001 fc33 	bl	80038fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002096:	e035      	b.n	8002104 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <HAL_UART_MspInit+0x130>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d130      	bne.n	8002104 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_UART_MspInit+0x128>)
 80020a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <HAL_UART_MspInit+0x128>)
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	0289      	lsls	r1, r1, #10
 80020ac:	430a      	orrs	r2, r1
 80020ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <HAL_UART_MspInit+0x128>)
 80020b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	029b      	lsls	r3, r3, #10
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <HAL_UART_MspInit+0x128>)
 80020c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_UART_MspInit+0x128>)
 80020c4:	2101      	movs	r1, #1
 80020c6:	430a      	orrs	r2, r1
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_UART_MspInit+0x128>)
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	2201      	movs	r2, #1
 80020d0:	4013      	ands	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020d6:	214c      	movs	r1, #76	; 0x4c
 80020d8:	187b      	adds	r3, r7, r1
 80020da:	220c      	movs	r2, #12
 80020dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	187b      	adds	r3, r7, r1
 80020e0:	2202      	movs	r2, #2
 80020e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	187b      	adds	r3, r7, r1
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	187b      	adds	r3, r7, r1
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	2201      	movs	r2, #1
 80020f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	187a      	adds	r2, r7, r1
 80020f8:	23a0      	movs	r3, #160	; 0xa0
 80020fa:	05db      	lsls	r3, r3, #23
 80020fc:	0011      	movs	r1, r2
 80020fe:	0018      	movs	r0, r3
 8002100:	f001 fbfc 	bl	80038fc <HAL_GPIO_Init>
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b019      	add	sp, #100	; 0x64
 800210a:	bd90      	pop	{r4, r7, pc}
 800210c:	40013800 	.word	0x40013800
 8002110:	40021000 	.word	0x40021000
 8002114:	50000400 	.word	0x50000400
 8002118:	40004400 	.word	0x40004400

0800211c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <NMI_Handler+0x4>

08002122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002126:	e7fe      	b.n	8002126 <HardFault_Handler+0x4>

08002128 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800212c:	46c0      	nop			; (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002140:	f000 f8c2 	bl	80022c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002144:	46c0      	nop			; (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <DMA1_Channel1_IRQHandler+0x14>)
 8002152:	0018      	movs	r0, r3
 8002154:	f001 fa90 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002158:	46c0      	nop			; (mov r8, r8)
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	2000008c 	.word	0x2000008c

08002164 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <ADC1_COMP_IRQHandler+0x14>)
 800216a:	0018      	movs	r0, r3
 800216c:	f000 fc52 	bl	8002a14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	20000028 	.word	0x20000028

0800217c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <TIM16_IRQHandler+0x14>)
 8002182:	0018      	movs	r0, r3
 8002184:	f002 feb0 	bl	8004ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	200001e4 	.word	0x200001e4

08002194 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021a0:	480d      	ldr	r0, [pc, #52]	; (80021d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021a4:	f7ff fff6 	bl	8002194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a8:	480c      	ldr	r0, [pc, #48]	; (80021dc <LoopForever+0x6>)
  ldr r1, =_edata
 80021aa:	490d      	ldr	r1, [pc, #52]	; (80021e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021ac:	4a0d      	ldr	r2, [pc, #52]	; (80021e4 <LoopForever+0xe>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b0:	e002      	b.n	80021b8 <LoopCopyDataInit>

080021b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b6:	3304      	adds	r3, #4

080021b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021bc:	d3f9      	bcc.n	80021b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021be:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021c0:	4c0a      	ldr	r4, [pc, #40]	; (80021ec <LoopForever+0x16>)
  movs r3, #0
 80021c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c4:	e001      	b.n	80021ca <LoopFillZerobss>

080021c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c8:	3204      	adds	r2, #4

080021ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021cc:	d3fb      	bcc.n	80021c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021ce:	f004 fb23 	bl	8006818 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80021d2:	f7ff f833 	bl	800123c <main>

080021d6 <LoopForever>:

LoopForever:
  b LoopForever
 80021d6:	e7fe      	b.n	80021d6 <LoopForever>
  ldr   r0, =_estack
 80021d8:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 80021dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80021e4:	080069b4 	.word	0x080069b4
  ldr r2, =_sbss
 80021e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021ec:	20000378 	.word	0x20000378

080021f0 <AES_RNG_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021f0:	e7fe      	b.n	80021f0 <AES_RNG_IRQHandler>
	...

080021f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021fa:	1dfb      	adds	r3, r7, #7
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_Init+0x3c>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_Init+0x3c>)
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	0049      	lsls	r1, r1, #1
 800220a:	430a      	orrs	r2, r1
 800220c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800220e:	2003      	movs	r0, #3
 8002210:	f000 f810 	bl	8002234 <HAL_InitTick>
 8002214:	1e03      	subs	r3, r0, #0
 8002216:	d003      	beq.n	8002220 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002218:	1dfb      	adds	r3, r7, #7
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e001      	b.n	8002224 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002220:	f7ff fcfe 	bl	8001c20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002224:	1dfb      	adds	r3, r7, #7
 8002226:	781b      	ldrb	r3, [r3, #0]
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40022000 	.word	0x40022000

08002234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800223c:	230f      	movs	r3, #15
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_InitTick+0x88>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d02b      	beq.n	80022a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800224c:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_InitTick+0x8c>)
 800224e:	681c      	ldr	r4, [r3, #0]
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_InitTick+0x88>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	0019      	movs	r1, r3
 8002256:	23fa      	movs	r3, #250	; 0xfa
 8002258:	0098      	lsls	r0, r3, #2
 800225a:	f7fd ff55 	bl	8000108 <__udivsi3>
 800225e:	0003      	movs	r3, r0
 8002260:	0019      	movs	r1, r3
 8002262:	0020      	movs	r0, r4
 8002264:	f7fd ff50 	bl	8000108 <__udivsi3>
 8002268:	0003      	movs	r3, r0
 800226a:	0018      	movs	r0, r3
 800226c:	f001 f8e7 	bl	800343e <HAL_SYSTICK_Config>
 8002270:	1e03      	subs	r3, r0, #0
 8002272:	d112      	bne.n	800229a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d80a      	bhi.n	8002290 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	2301      	movs	r3, #1
 800227e:	425b      	negs	r3, r3
 8002280:	2200      	movs	r2, #0
 8002282:	0018      	movs	r0, r3
 8002284:	f001 f8b6 	bl	80033f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HAL_InitTick+0x90>)
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e00d      	b.n	80022ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002290:	230f      	movs	r3, #15
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e008      	b.n	80022ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800229a:	230f      	movs	r3, #15
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	e003      	b.n	80022ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022a4:	230f      	movs	r3, #15
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80022ac:	230f      	movs	r3, #15
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	781b      	ldrb	r3, [r3, #0]
}
 80022b2:	0018      	movs	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b005      	add	sp, #20
 80022b8:	bd90      	pop	{r4, r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	20000008 	.word	0x20000008
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20000004 	.word	0x20000004

080022c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_IncTick+0x1c>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	001a      	movs	r2, r3
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_IncTick+0x20>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	18d2      	adds	r2, r2, r3
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_IncTick+0x20>)
 80022da:	601a      	str	r2, [r3, #0]
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	20000008 	.word	0x20000008
 80022e8:	20000374 	.word	0x20000374

080022ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  return uwTick;
 80022f0:	4b02      	ldr	r3, [pc, #8]	; (80022fc <HAL_GetTick+0x10>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	20000374 	.word	0x20000374

08002300 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002310:	401a      	ands	r2, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	601a      	str	r2, [r3, #0]
}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b002      	add	sp, #8
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	fe3fffff 	.word	0xfe3fffff

08002328 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	23e0      	movs	r3, #224	; 0xe0
 8002336:	045b      	lsls	r3, r3, #17
 8002338:	4013      	ands	r3, r2
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b002      	add	sp, #8
 8002340:	bd80      	pop	{r7, pc}

08002342 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	2104      	movs	r1, #4
 8002356:	400a      	ands	r2, r1
 8002358:	2107      	movs	r1, #7
 800235a:	4091      	lsls	r1, r2
 800235c:	000a      	movs	r2, r1
 800235e:	43d2      	mvns	r2, r2
 8002360:	401a      	ands	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2104      	movs	r1, #4
 8002366:	400b      	ands	r3, r1
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4099      	lsls	r1, r3
 800236c:	000b      	movs	r3, r1
 800236e:	431a      	orrs	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b004      	add	sp, #16
 800237a:	bd80      	pop	{r7, pc}

0800237c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	2104      	movs	r1, #4
 800238e:	400a      	ands	r2, r1
 8002390:	2107      	movs	r1, #7
 8002392:	4091      	lsls	r1, r2
 8002394:	000a      	movs	r2, r1
 8002396:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	2104      	movs	r1, #4
 800239c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800239e:	40da      	lsrs	r2, r3
 80023a0:	0013      	movs	r3, r2
}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b002      	add	sp, #8
 80023a8:	bd80      	pop	{r7, pc}

080023aa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	23c0      	movs	r3, #192	; 0xc0
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	4013      	ands	r3, r2
 80023bc:	d101      	bne.n	80023c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	0018      	movs	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}

080023cc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	211f      	movs	r1, #31
 80023e0:	400a      	ands	r2, r1
 80023e2:	210f      	movs	r1, #15
 80023e4:	4091      	lsls	r1, r2
 80023e6:	000a      	movs	r2, r1
 80023e8:	43d2      	mvns	r2, r2
 80023ea:	401a      	ands	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	0e9b      	lsrs	r3, r3, #26
 80023f0:	210f      	movs	r1, #15
 80023f2:	4019      	ands	r1, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	201f      	movs	r0, #31
 80023f8:	4003      	ands	r3, r0
 80023fa:	4099      	lsls	r1, r3
 80023fc:	000b      	movs	r3, r1
 80023fe:	431a      	orrs	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b004      	add	sp, #16
 800240a:	bd80      	pop	{r7, pc}

0800240c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	035b      	lsls	r3, r3, #13
 800241e:	0b5b      	lsrs	r3, r3, #13
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	46bd      	mov	sp, r7
 800242a:	b002      	add	sp, #8
 800242c:	bd80      	pop	{r7, pc}

0800242e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	0352      	lsls	r2, r2, #13
 8002440:	0b52      	lsrs	r2, r2, #13
 8002442:	43d2      	mvns	r2, r2
 8002444:	401a      	ands	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	629a      	str	r2, [r3, #40]	; 0x28
}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b002      	add	sp, #8
 8002450:	bd80      	pop	{r7, pc}

08002452 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2203      	movs	r2, #3
 8002460:	4013      	ands	r3, r2
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b002      	add	sp, #8
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	0212      	lsls	r2, r2, #8
 8002480:	43d2      	mvns	r2, r2
 8002482:	401a      	ands	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	400b      	ands	r3, r1
 800248c:	4904      	ldr	r1, [pc, #16]	; (80024a0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800248e:	400b      	ands	r3, r1
 8002490:	431a      	orrs	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	46bd      	mov	sp, r7
 800249a:	b004      	add	sp, #16
 800249c:	bd80      	pop	{r7, pc}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	07ffff00 	.word	0x07ffff00

080024a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a05      	ldr	r2, [pc, #20]	; (80024c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	2280      	movs	r2, #128	; 0x80
 80024b6:	0552      	lsls	r2, r2, #21
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b002      	add	sp, #8
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	6fffffe8 	.word	0x6fffffe8

080024cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	401a      	ands	r2, r3
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	055b      	lsls	r3, r3, #21
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d101      	bne.n	80024ea <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b002      	add	sp, #8
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <LL_ADC_Enable+0x20>)
 8002502:	4013      	ands	r3, r2
 8002504:	2201      	movs	r2, #1
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800250c:	46c0      	nop			; (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}
 8002514:	7fffffe8 	.word	0x7fffffe8

08002518 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <LL_ADC_Disable+0x20>)
 8002526:	4013      	ands	r3, r2
 8002528:	2202      	movs	r2, #2
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b002      	add	sp, #8
 8002536:	bd80      	pop	{r7, pc}
 8002538:	7fffffe8 	.word	0x7fffffe8

0800253c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2201      	movs	r2, #1
 800254a:	4013      	ands	r3, r2
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <LL_ADC_IsEnabled+0x18>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <LL_ADC_IsEnabled+0x1a>
 8002554:	2300      	movs	r3, #0
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	b002      	add	sp, #8
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <LL_ADC_REG_StartConversion+0x20>)
 800256e:	4013      	ands	r3, r2
 8002570:	2204      	movs	r2, #4
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}
 8002580:	7fffffe8 	.word	0x7fffffe8

08002584 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2204      	movs	r2, #4
 8002592:	4013      	ands	r3, r2
 8002594:	2b04      	cmp	r3, #4
 8002596:	d101      	bne.n	800259c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800259c:	2300      	movs	r3, #0
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b002      	add	sp, #8
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b0:	231f      	movs	r3, #31
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e17f      	b.n	80028ce <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10a      	bne.n	80025ec <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7ff fb45 	bl	8001c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2254      	movs	r2, #84	; 0x54
 80025e8:	2100      	movs	r1, #0
 80025ea:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7ff ff6b 	bl	80024cc <LL_ADC_IsInternalRegulatorEnabled>
 80025f6:	1e03      	subs	r3, r0, #0
 80025f8:	d115      	bne.n	8002626 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	0018      	movs	r0, r3
 8002600:	f7ff ff50 	bl	80024a4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002604:	4bb4      	ldr	r3, [pc, #720]	; (80028d8 <HAL_ADC_Init+0x330>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	49b4      	ldr	r1, [pc, #720]	; (80028dc <HAL_ADC_Init+0x334>)
 800260a:	0018      	movs	r0, r3
 800260c:	f7fd fd7c 	bl	8000108 <__udivsi3>
 8002610:	0003      	movs	r3, r0
 8002612:	3301      	adds	r3, #1
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002618:	e002      	b.n	8002620 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3b01      	subs	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f9      	bne.n	800261a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	0018      	movs	r0, r3
 800262c:	f7ff ff4e 	bl	80024cc <LL_ADC_IsInternalRegulatorEnabled>
 8002630:	1e03      	subs	r3, r0, #0
 8002632:	d10f      	bne.n	8002654 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	2210      	movs	r2, #16
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	2201      	movs	r2, #1
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800264c:	231f      	movs	r3, #31
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0018      	movs	r0, r3
 800265a:	f7ff ff93 	bl	8002584 <LL_ADC_REG_IsConversionOngoing>
 800265e:	0003      	movs	r3, r0
 8002660:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002666:	2210      	movs	r2, #16
 8002668:	4013      	ands	r3, r2
 800266a:	d000      	beq.n	800266e <HAL_ADC_Init+0xc6>
 800266c:	e122      	b.n	80028b4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d000      	beq.n	8002676 <HAL_ADC_Init+0xce>
 8002674:	e11e      	b.n	80028b4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	4a99      	ldr	r2, [pc, #612]	; (80028e0 <HAL_ADC_Init+0x338>)
 800267c:	4013      	ands	r3, r2
 800267e:	2202      	movs	r2, #2
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff ff56 	bl	800253c <LL_ADC_IsEnabled>
 8002690:	1e03      	subs	r3, r0, #0
 8002692:	d000      	beq.n	8002696 <HAL_ADC_Init+0xee>
 8002694:	e0ad      	b.n	80027f2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7e1b      	ldrb	r3, [r3, #24]
 800269e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80026a0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	7e5b      	ldrb	r3, [r3, #25]
 80026a6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80026a8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7e9b      	ldrb	r3, [r3, #26]
 80026ae:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80026b0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_ADC_Init+0x118>
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	015b      	lsls	r3, r3, #5
 80026be:	e000      	b.n	80026c2 <HAL_ADC_Init+0x11a>
 80026c0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80026c2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80026c8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	da04      	bge.n	80026dc <HAL_ADC_Init+0x134>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	e001      	b.n	80026e0 <HAL_ADC_Init+0x138>
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80026e0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	212c      	movs	r1, #44	; 0x2c
 80026e6:	5c5b      	ldrb	r3, [r3, r1]
 80026e8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026ea:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	5c9b      	ldrb	r3, [r3, r2]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d115      	bne.n	8002728 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7e9b      	ldrb	r3, [r3, #26]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2280      	movs	r2, #128	; 0x80
 8002708:	0252      	lsls	r2, r2, #9
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	e00b      	b.n	8002728 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002714:	2220      	movs	r2, #32
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002720:	2201      	movs	r2, #1
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002734:	23e0      	movs	r3, #224	; 0xe0
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800273e:	4313      	orrs	r3, r2
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a65      	ldr	r2, [pc, #404]	; (80028e4 <HAL_ADC_Init+0x33c>)
 800274e:	4013      	ands	r3, r2
 8002750:	0019      	movs	r1, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	430a      	orrs	r2, r1
 800275a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	0f9b      	lsrs	r3, r3, #30
 8002762:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002768:	4313      	orrs	r3, r2
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	223c      	movs	r2, #60	; 0x3c
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d111      	bne.n	800279e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	0f9b      	lsrs	r3, r3, #30
 8002780:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002786:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800278c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002792:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	2201      	movs	r2, #1
 800279a:	4313      	orrs	r3, r2
 800279c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	4a50      	ldr	r2, [pc, #320]	; (80028e8 <HAL_ADC_Init+0x340>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	23c0      	movs	r3, #192	; 0xc0
 80027ba:	061b      	lsls	r3, r3, #24
 80027bc:	429a      	cmp	r2, r3
 80027be:	d018      	beq.n	80027f2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	05db      	lsls	r3, r3, #23
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d012      	beq.n	80027f2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	061b      	lsls	r3, r3, #24
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d00c      	beq.n	80027f2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80027d8:	4b44      	ldr	r3, [pc, #272]	; (80028ec <HAL_ADC_Init+0x344>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a44      	ldr	r2, [pc, #272]	; (80028f0 <HAL_ADC_Init+0x348>)
 80027de:	4013      	ands	r3, r2
 80027e0:	0019      	movs	r1, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	23f0      	movs	r3, #240	; 0xf0
 80027e8:	039b      	lsls	r3, r3, #14
 80027ea:	401a      	ands	r2, r3
 80027ec:	4b3f      	ldr	r3, [pc, #252]	; (80028ec <HAL_ADC_Init+0x344>)
 80027ee:	430a      	orrs	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	001a      	movs	r2, r3
 80027fc:	2100      	movs	r1, #0
 80027fe:	f7ff fda0 	bl	8002342 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	493a      	ldr	r1, [pc, #232]	; (80028f4 <HAL_ADC_Init+0x34c>)
 800280c:	001a      	movs	r2, r3
 800280e:	f7ff fd98 	bl	8002342 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2110      	movs	r1, #16
 8002826:	4249      	negs	r1, r1
 8002828:	430a      	orrs	r2, r1
 800282a:	629a      	str	r2, [r3, #40]	; 0x28
 800282c:	e018      	b.n	8002860 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	039b      	lsls	r3, r3, #14
 8002836:	429a      	cmp	r2, r3
 8002838:	d112      	bne.n	8002860 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	3b01      	subs	r3, #1
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	221c      	movs	r2, #28
 800284a:	4013      	ands	r3, r2
 800284c:	2210      	movs	r2, #16
 800284e:	4252      	negs	r2, r2
 8002850:	409a      	lsls	r2, r3
 8002852:	0011      	movs	r1, r2
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2100      	movs	r1, #0
 8002866:	0018      	movs	r0, r3
 8002868:	f7ff fd88 	bl	800237c <LL_ADC_GetSamplingTimeCommonChannels>
 800286c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002872:	429a      	cmp	r2, r3
 8002874:	d10b      	bne.n	800288e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002880:	2203      	movs	r2, #3
 8002882:	4393      	bics	r3, r2
 8002884:	2201      	movs	r2, #1
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800288c:	e01c      	b.n	80028c8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	2212      	movs	r2, #18
 8002894:	4393      	bics	r3, r2
 8002896:	2210      	movs	r2, #16
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	2201      	movs	r2, #1
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80028aa:	231f      	movs	r3, #31
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80028b2:	e009      	b.n	80028c8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	2210      	movs	r2, #16
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028c0:	231f      	movs	r3, #31
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80028c8:	231f      	movs	r3, #31
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	781b      	ldrb	r3, [r3, #0]
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b008      	add	sp, #32
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	20000000 	.word	0x20000000
 80028dc:	00030d40 	.word	0x00030d40
 80028e0:	fffffefd 	.word	0xfffffefd
 80028e4:	fffe0201 	.word	0xfffe0201
 80028e8:	1ffffc02 	.word	0x1ffffc02
 80028ec:	40012708 	.word	0x40012708
 80028f0:	ffc3ffff 	.word	0xffc3ffff
 80028f4:	07ffff04 	.word	0x07ffff04

080028f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028f8:	b5b0      	push	{r4, r5, r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0018      	movs	r0, r3
 800290a:	f7ff fe3b 	bl	8002584 <LL_ADC_REG_IsConversionOngoing>
 800290e:	1e03      	subs	r3, r0, #0
 8002910:	d16c      	bne.n	80029ec <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2254      	movs	r2, #84	; 0x54
 8002916:	5c9b      	ldrb	r3, [r3, r2]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_ADC_Start_DMA+0x28>
 800291c:	2302      	movs	r3, #2
 800291e:	e06c      	b.n	80029fa <HAL_ADC_Start_DMA+0x102>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2254      	movs	r2, #84	; 0x54
 8002924:	2101      	movs	r1, #1
 8002926:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	4013      	ands	r3, r2
 8002932:	d113      	bne.n	800295c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	0018      	movs	r0, r3
 800293a:	f7ff fdff 	bl	800253c <LL_ADC_IsEnabled>
 800293e:	1e03      	subs	r3, r0, #0
 8002940:	d004      	beq.n	800294c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	0018      	movs	r0, r3
 8002948:	f7ff fde6 	bl	8002518 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2101      	movs	r1, #1
 8002958:	430a      	orrs	r2, r1
 800295a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800295c:	2517      	movs	r5, #23
 800295e:	197c      	adds	r4, r7, r5
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	0018      	movs	r0, r3
 8002964:	f000 fb66 	bl	8003034 <ADC_Enable>
 8002968:	0003      	movs	r3, r0
 800296a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800296c:	002c      	movs	r4, r5
 800296e:	193b      	adds	r3, r7, r4
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d13e      	bne.n	80029f4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	4a22      	ldr	r2, [pc, #136]	; (8002a04 <HAL_ADC_Start_DMA+0x10c>)
 800297c:	4013      	ands	r3, r2
 800297e:	2280      	movs	r2, #128	; 0x80
 8002980:	0052      	lsls	r2, r2, #1
 8002982:	431a      	orrs	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002992:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <HAL_ADC_Start_DMA+0x110>)
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299a:	4a1c      	ldr	r2, [pc, #112]	; (8002a0c <HAL_ADC_Start_DMA+0x114>)
 800299c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a2:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <HAL_ADC_Start_DMA+0x118>)
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	221c      	movs	r2, #28
 80029ac:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2254      	movs	r2, #84	; 0x54
 80029b2:	2100      	movs	r1, #0
 80029b4:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2110      	movs	r1, #16
 80029c2:	430a      	orrs	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3340      	adds	r3, #64	; 0x40
 80029d0:	0019      	movs	r1, r3
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	193c      	adds	r4, r7, r4
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f000 fdc8 	bl	800356c <HAL_DMA_Start_IT>
 80029dc:	0003      	movs	r3, r0
 80029de:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f7ff fdbb 	bl	8002560 <LL_ADC_REG_StartConversion>
 80029ea:	e003      	b.n	80029f4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029ec:	2317      	movs	r3, #23
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	2202      	movs	r2, #2
 80029f2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80029f4:	2317      	movs	r3, #23
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	781b      	ldrb	r3, [r3, #0]
}
 80029fa:	0018      	movs	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b006      	add	sp, #24
 8002a00:	bdb0      	pop	{r4, r5, r7, pc}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	fffff0fe 	.word	0xfffff0fe
 8002a08:	08003141 	.word	0x08003141
 8002a0c:	08003209 	.word	0x08003209
 8002a10:	08003227 	.word	0x08003227

08002a14 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	2202      	movs	r2, #2
 8002a34:	4013      	ands	r3, r2
 8002a36:	d017      	beq.n	8002a68 <HAL_ADC_IRQHandler+0x54>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	2210      	movs	r2, #16
 8002a46:	4013      	ands	r3, r2
 8002a48:	d106      	bne.n	8002a58 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 fc0e 	bl	800327c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2202      	movs	r2, #2
 8002a66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d003      	beq.n	8002a78 <HAL_ADC_IRQHandler+0x64>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2204      	movs	r2, #4
 8002a74:	4013      	ands	r3, r2
 8002a76:	d107      	bne.n	8002a88 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a7e:	d04d      	beq.n	8002b1c <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2208      	movs	r2, #8
 8002a84:	4013      	ands	r3, r2
 8002a86:	d049      	beq.n	8002b1c <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d106      	bne.n	8002aa0 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	2280      	movs	r2, #128	; 0x80
 8002a98:	0092      	lsls	r2, r2, #2
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7ff fc80 	bl	80023aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8002aaa:	1e03      	subs	r3, r0, #0
 8002aac:	d02e      	beq.n	8002b0c <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	7e9b      	ldrb	r3, [r3, #26]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d12a      	bne.n	8002b0c <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2208      	movs	r2, #8
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d123      	bne.n	8002b0c <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7ff fd5b 	bl	8002584 <LL_ADC_REG_IsConversionOngoing>
 8002ace:	1e03      	subs	r3, r0, #0
 8002ad0:	d110      	bne.n	8002af4 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	210c      	movs	r1, #12
 8002ade:	438a      	bics	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	4a56      	ldr	r2, [pc, #344]	; (8002c40 <HAL_ADC_IRQHandler+0x22c>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2201      	movs	r2, #1
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	659a      	str	r2, [r3, #88]	; 0x58
 8002af2:	e00b      	b.n	8002b0c <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	2220      	movs	r2, #32
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	2201      	movs	r2, #1
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f000 f898 	bl	8002c44 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	220c      	movs	r2, #12
 8002b1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2280      	movs	r2, #128	; 0x80
 8002b20:	4013      	ands	r3, r2
 8002b22:	d012      	beq.n	8002b4a <HAL_ADC_IRQHandler+0x136>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2280      	movs	r2, #128	; 0x80
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d00e      	beq.n	8002b4a <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	0252      	lsls	r2, r2, #9
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f000 f891 	bl	8002c64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2280      	movs	r2, #128	; 0x80
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4013      	ands	r3, r2
 8002b52:	d014      	beq.n	8002b7e <HAL_ADC_IRQHandler+0x16a>
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d00f      	beq.n	8002b7e <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	0292      	lsls	r2, r2, #10
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 fb74 	bl	800325c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2280      	movs	r2, #128	; 0x80
 8002b7a:	0052      	lsls	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	d014      	beq.n	8002bb2 <HAL_ADC_IRQHandler+0x19e>
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d00f      	beq.n	8002bb2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	2280      	movs	r2, #128	; 0x80
 8002b98:	02d2      	lsls	r2, r2, #11
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 fb62 	bl	800326c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	0092      	lsls	r2, r2, #2
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d02b      	beq.n	8002c12 <HAL_ADC_IRQHandler+0x1fe>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d027      	beq.n	8002c12 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	e008      	b.n	8002be2 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7ff fc3c 	bl	8002452 <LL_ADC_REG_GetDMATransfer>
 8002bda:	1e03      	subs	r3, r0, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002bde:	2301      	movs	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d110      	bne.n	8002c0a <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	2280      	movs	r2, #128	; 0x80
 8002bee:	00d2      	lsls	r2, r2, #3
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 f835 	bl	8002c74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2210      	movs	r2, #16
 8002c10:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	019b      	lsls	r3, r3, #6
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d00d      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x224>
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	4013      	ands	r3, r2
 8002c24:	d008      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f000 fb2f 	bl	800328c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	0192      	lsls	r2, r2, #6
 8002c36:	601a      	str	r2, [r3, #0]
  }
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b006      	add	sp, #24
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	fffffefe 	.word	0xfffffefe

08002c44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b002      	add	sp, #8
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b002      	add	sp, #8
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c7c:	46c0      	nop			; (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b002      	add	sp, #8
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c8e:	2317      	movs	r3, #23
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2254      	movs	r2, #84	; 0x54
 8002c9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x24>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e1c0      	b.n	800302a <HAL_ADC_ConfigChannel+0x3a6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2254      	movs	r2, #84	; 0x54
 8002cac:	2101      	movs	r1, #1
 8002cae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7ff fc65 	bl	8002584 <LL_ADC_REG_IsConversionOngoing>
 8002cba:	1e03      	subs	r3, r0, #0
 8002cbc:	d000      	beq.n	8002cc0 <HAL_ADC_ConfigChannel+0x3c>
 8002cbe:	e1a3      	b.n	8003008 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d100      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x46>
 8002cc8:	e143      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d004      	beq.n	8002ce0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cda:	4ac1      	ldr	r2, [pc, #772]	; (8002fe0 <HAL_ADC_ConfigChannel+0x35c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d108      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	0019      	movs	r1, r3
 8002cea:	0010      	movs	r0, r2
 8002cec:	f7ff fb8e 	bl	800240c <LL_ADC_REG_SetSequencerChAdd>
 8002cf0:	e0c9      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	211f      	movs	r1, #31
 8002cfc:	400b      	ands	r3, r1
 8002cfe:	210f      	movs	r1, #15
 8002d00:	4099      	lsls	r1, r3
 8002d02:	000b      	movs	r3, r1
 8002d04:	43db      	mvns	r3, r3
 8002d06:	4013      	ands	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	035b      	lsls	r3, r3, #13
 8002d10:	0b5b      	lsrs	r3, r3, #13
 8002d12:	d105      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x9c>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	0e9b      	lsrs	r3, r3, #26
 8002d1a:	221f      	movs	r2, #31
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	e098      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2201      	movs	r2, #1
 8002d26:	4013      	ands	r3, r2
 8002d28:	d000      	beq.n	8002d2c <HAL_ADC_ConfigChannel+0xa8>
 8002d2a:	e091      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x1cc>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2202      	movs	r2, #2
 8002d32:	4013      	ands	r3, r2
 8002d34:	d000      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0xb4>
 8002d36:	e089      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x1c8>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d000      	beq.n	8002d44 <HAL_ADC_ConfigChannel+0xc0>
 8002d42:	e081      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x1c4>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2208      	movs	r2, #8
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d000      	beq.n	8002d50 <HAL_ADC_ConfigChannel+0xcc>
 8002d4e:	e079      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x1c0>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2210      	movs	r2, #16
 8002d56:	4013      	ands	r3, r2
 8002d58:	d000      	beq.n	8002d5c <HAL_ADC_ConfigChannel+0xd8>
 8002d5a:	e071      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x1bc>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2220      	movs	r2, #32
 8002d62:	4013      	ands	r3, r2
 8002d64:	d000      	beq.n	8002d68 <HAL_ADC_ConfigChannel+0xe4>
 8002d66:	e069      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x1b8>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2240      	movs	r2, #64	; 0x40
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d000      	beq.n	8002d74 <HAL_ADC_ConfigChannel+0xf0>
 8002d72:	e061      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x1b4>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d000      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0xfc>
 8002d7e:	e059      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x1b0>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d151      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x1ac>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4013      	ands	r3, r2
 8002d96:	d149      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x1a8>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4013      	ands	r3, r2
 8002da2:	d141      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1a4>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	4013      	ands	r3, r2
 8002dae:	d139      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x1a0>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	015b      	lsls	r3, r3, #5
 8002db8:	4013      	ands	r3, r2
 8002dba:	d131      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x19c>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	019b      	lsls	r3, r3, #6
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d129      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x198>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	01db      	lsls	r3, r3, #7
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d121      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x194>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d119      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x190>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	025b      	lsls	r3, r3, #9
 8002de8:	4013      	ands	r3, r2
 8002dea:	d111      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x18c>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	029b      	lsls	r3, r3, #10
 8002df4:	4013      	ands	r3, r2
 8002df6:	d109      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x188>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	02db      	lsls	r3, r3, #11
 8002e00:	4013      	ands	r3, r2
 8002e02:	d001      	beq.n	8002e08 <HAL_ADC_ConfigChannel+0x184>
 8002e04:	2312      	movs	r3, #18
 8002e06:	e024      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e022      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e0c:	2311      	movs	r3, #17
 8002e0e:	e020      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e10:	2310      	movs	r3, #16
 8002e12:	e01e      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e14:	230f      	movs	r3, #15
 8002e16:	e01c      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e18:	230e      	movs	r3, #14
 8002e1a:	e01a      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e1c:	230d      	movs	r3, #13
 8002e1e:	e018      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e20:	230c      	movs	r3, #12
 8002e22:	e016      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e24:	230b      	movs	r3, #11
 8002e26:	e014      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e28:	230a      	movs	r3, #10
 8002e2a:	e012      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e2c:	2309      	movs	r3, #9
 8002e2e:	e010      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e30:	2308      	movs	r3, #8
 8002e32:	e00e      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e34:	2307      	movs	r3, #7
 8002e36:	e00c      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e38:	2306      	movs	r3, #6
 8002e3a:	e00a      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e3c:	2305      	movs	r3, #5
 8002e3e:	e008      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e40:	2304      	movs	r3, #4
 8002e42:	e006      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e44:	2303      	movs	r3, #3
 8002e46:	e004      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e002      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1ce>
 8002e50:	2300      	movs	r3, #0
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	6852      	ldr	r2, [r2, #4]
 8002e56:	201f      	movs	r0, #31
 8002e58:	4002      	ands	r2, r0
 8002e5a:	4093      	lsls	r3, r2
 8002e5c:	000a      	movs	r2, r1
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	089b      	lsrs	r3, r3, #2
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d808      	bhi.n	8002e86 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	001a      	movs	r2, r3
 8002e82:	f7ff faa3 	bl	80023cc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	001a      	movs	r2, r3
 8002e94:	f7ff faea 	bl	800246c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	db00      	blt.n	8002ea2 <HAL_ADC_ConfigChannel+0x21e>
 8002ea0:	e0bc      	b.n	800301c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ea2:	4b50      	ldr	r3, [pc, #320]	; (8002fe4 <HAL_ADC_ConfigChannel+0x360>)
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f7ff fa3f 	bl	8002328 <LL_ADC_GetCommonPathInternalCh>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a4d      	ldr	r2, [pc, #308]	; (8002fe8 <HAL_ADC_ConfigChannel+0x364>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d122      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	041b      	lsls	r3, r3, #16
 8002ebe:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ec0:	d11d      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2280      	movs	r2, #128	; 0x80
 8002ec6:	0412      	lsls	r2, r2, #16
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	4a46      	ldr	r2, [pc, #280]	; (8002fe4 <HAL_ADC_ConfigChannel+0x360>)
 8002ecc:	0019      	movs	r1, r3
 8002ece:	0010      	movs	r0, r2
 8002ed0:	f7ff fa16 	bl	8002300 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ed4:	4b45      	ldr	r3, [pc, #276]	; (8002fec <HAL_ADC_ConfigChannel+0x368>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4945      	ldr	r1, [pc, #276]	; (8002ff0 <HAL_ADC_ConfigChannel+0x36c>)
 8002eda:	0018      	movs	r0, r3
 8002edc:	f7fd f914 	bl	8000108 <__udivsi3>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	0013      	movs	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	189b      	adds	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002eee:	e002      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f9      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002efc:	e08e      	b.n	800301c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a3c      	ldr	r2, [pc, #240]	; (8002ff4 <HAL_ADC_ConfigChannel+0x370>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d10e      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	045b      	lsls	r3, r3, #17
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d109      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2280      	movs	r2, #128	; 0x80
 8002f16:	0452      	lsls	r2, r2, #17
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	4a32      	ldr	r2, [pc, #200]	; (8002fe4 <HAL_ADC_ConfigChannel+0x360>)
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	0010      	movs	r0, r2
 8002f20:	f7ff f9ee 	bl	8002300 <LL_ADC_SetCommonPathInternalCh>
 8002f24:	e07a      	b.n	800301c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a33      	ldr	r2, [pc, #204]	; (8002ff8 <HAL_ADC_ConfigChannel+0x374>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d000      	beq.n	8002f32 <HAL_ADC_ConfigChannel+0x2ae>
 8002f30:	e074      	b.n	800301c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	2380      	movs	r3, #128	; 0x80
 8002f36:	03db      	lsls	r3, r3, #15
 8002f38:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f3a:	d000      	beq.n	8002f3e <HAL_ADC_ConfigChannel+0x2ba>
 8002f3c:	e06e      	b.n	800301c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	03d2      	lsls	r2, r2, #15
 8002f44:	4313      	orrs	r3, r2
 8002f46:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <HAL_ADC_ConfigChannel+0x360>)
 8002f48:	0019      	movs	r1, r3
 8002f4a:	0010      	movs	r0, r2
 8002f4c:	f7ff f9d8 	bl	8002300 <LL_ADC_SetCommonPathInternalCh>
 8002f50:	e064      	b.n	800301c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	061b      	lsls	r3, r3, #24
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d004      	beq.n	8002f68 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f62:	4a1f      	ldr	r2, [pc, #124]	; (8002fe0 <HAL_ADC_ConfigChannel+0x35c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d107      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	0019      	movs	r1, r3
 8002f72:	0010      	movs	r0, r2
 8002f74:	f7ff fa5b 	bl	800242e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	da4d      	bge.n	800301c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f80:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <HAL_ADC_ConfigChannel+0x360>)
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff f9d0 	bl	8002328 <LL_ADC_GetCommonPathInternalCh>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <HAL_ADC_ConfigChannel+0x364>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d108      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <HAL_ADC_ConfigChannel+0x378>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <HAL_ADC_ConfigChannel+0x360>)
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	0010      	movs	r0, r2
 8002fa2:	f7ff f9ad 	bl	8002300 <LL_ADC_SetCommonPathInternalCh>
 8002fa6:	e039      	b.n	800301c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a11      	ldr	r2, [pc, #68]	; (8002ff4 <HAL_ADC_ConfigChannel+0x370>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d108      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4a12      	ldr	r2, [pc, #72]	; (8003000 <HAL_ADC_ConfigChannel+0x37c>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	4a0a      	ldr	r2, [pc, #40]	; (8002fe4 <HAL_ADC_ConfigChannel+0x360>)
 8002fba:	0019      	movs	r1, r3
 8002fbc:	0010      	movs	r0, r2
 8002fbe:	f7ff f99f 	bl	8002300 <LL_ADC_SetCommonPathInternalCh>
 8002fc2:	e02b      	b.n	800301c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <HAL_ADC_ConfigChannel+0x374>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d126      	bne.n	800301c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4a0c      	ldr	r2, [pc, #48]	; (8003004 <HAL_ADC_ConfigChannel+0x380>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	4a03      	ldr	r2, [pc, #12]	; (8002fe4 <HAL_ADC_ConfigChannel+0x360>)
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	0010      	movs	r0, r2
 8002fda:	f7ff f991 	bl	8002300 <LL_ADC_SetCommonPathInternalCh>
 8002fde:	e01d      	b.n	800301c <HAL_ADC_ConfigChannel+0x398>
 8002fe0:	80000004 	.word	0x80000004
 8002fe4:	40012708 	.word	0x40012708
 8002fe8:	b0001000 	.word	0xb0001000
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	00030d40 	.word	0x00030d40
 8002ff4:	b8004000 	.word	0xb8004000
 8002ff8:	b4002000 	.word	0xb4002000
 8002ffc:	ff7fffff 	.word	0xff7fffff
 8003000:	feffffff 	.word	0xfeffffff
 8003004:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	2220      	movs	r2, #32
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003014:	2317      	movs	r3, #23
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2254      	movs	r2, #84	; 0x54
 8003020:	2100      	movs	r1, #0
 8003022:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003024:	2317      	movs	r3, #23
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	781b      	ldrb	r3, [r3, #0]
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b006      	add	sp, #24
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)

08003034 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800303c:	2300      	movs	r3, #0
 800303e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0018      	movs	r0, r3
 8003046:	f7ff fa79 	bl	800253c <LL_ADC_IsEnabled>
 800304a:	1e03      	subs	r3, r0, #0
 800304c:	d000      	beq.n	8003050 <ADC_Enable+0x1c>
 800304e:	e069      	b.n	8003124 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	4a36      	ldr	r2, [pc, #216]	; (8003130 <ADC_Enable+0xfc>)
 8003058:	4013      	ands	r3, r2
 800305a:	d00d      	beq.n	8003078 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	2210      	movs	r2, #16
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	2201      	movs	r2, #1
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e056      	b.n	8003126 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	0018      	movs	r0, r3
 800307e:	f7ff fa39 	bl	80024f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003082:	4b2c      	ldr	r3, [pc, #176]	; (8003134 <ADC_Enable+0x100>)
 8003084:	0018      	movs	r0, r3
 8003086:	f7ff f94f 	bl	8002328 <LL_ADC_GetCommonPathInternalCh>
 800308a:	0002      	movs	r2, r0
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	041b      	lsls	r3, r3, #16
 8003090:	4013      	ands	r3, r2
 8003092:	d00f      	beq.n	80030b4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003094:	4b28      	ldr	r3, [pc, #160]	; (8003138 <ADC_Enable+0x104>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4928      	ldr	r1, [pc, #160]	; (800313c <ADC_Enable+0x108>)
 800309a:	0018      	movs	r0, r3
 800309c:	f7fd f834 	bl	8000108 <__udivsi3>
 80030a0:	0003      	movs	r3, r0
 80030a2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80030a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030a6:	e002      	b.n	80030ae <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f9      	bne.n	80030a8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	7e5b      	ldrb	r3, [r3, #25]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d033      	beq.n	8003124 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80030bc:	f7ff f916 	bl	80022ec <HAL_GetTick>
 80030c0:	0003      	movs	r3, r0
 80030c2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030c4:	e027      	b.n	8003116 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	0018      	movs	r0, r3
 80030cc:	f7ff fa36 	bl	800253c <LL_ADC_IsEnabled>
 80030d0:	1e03      	subs	r3, r0, #0
 80030d2:	d104      	bne.n	80030de <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0018      	movs	r0, r3
 80030da:	f7ff fa0b 	bl	80024f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030de:	f7ff f905 	bl	80022ec <HAL_GetTick>
 80030e2:	0002      	movs	r2, r0
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d914      	bls.n	8003116 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2201      	movs	r2, #1
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d00d      	beq.n	8003116 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	2210      	movs	r2, #16
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	2201      	movs	r2, #1
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e007      	b.n	8003126 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2201      	movs	r2, #1
 800311e:	4013      	ands	r3, r2
 8003120:	2b01      	cmp	r3, #1
 8003122:	d1d0      	bne.n	80030c6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	0018      	movs	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	b004      	add	sp, #16
 800312c:	bd80      	pop	{r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	80000017 	.word	0x80000017
 8003134:	40012708 	.word	0x40012708
 8003138:	20000000 	.word	0x20000000
 800313c:	00030d40 	.word	0x00030d40

08003140 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	2250      	movs	r2, #80	; 0x50
 8003154:	4013      	ands	r3, r2
 8003156:	d141      	bne.n	80031dc <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	2280      	movs	r2, #128	; 0x80
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	431a      	orrs	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0018      	movs	r0, r3
 800316c:	f7ff f91d 	bl	80023aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d02e      	beq.n	80031d2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	7e9b      	ldrb	r3, [r3, #26]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d12a      	bne.n	80031d2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2208      	movs	r2, #8
 8003184:	4013      	ands	r3, r2
 8003186:	2b08      	cmp	r3, #8
 8003188:	d123      	bne.n	80031d2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	0018      	movs	r0, r3
 8003190:	f7ff f9f8 	bl	8002584 <LL_ADC_REG_IsConversionOngoing>
 8003194:	1e03      	subs	r3, r0, #0
 8003196:	d110      	bne.n	80031ba <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	210c      	movs	r1, #12
 80031a4:	438a      	bics	r2, r1
 80031a6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	4a15      	ldr	r2, [pc, #84]	; (8003204 <ADC_DMAConvCplt+0xc4>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	2201      	movs	r2, #1
 80031b2:	431a      	orrs	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	659a      	str	r2, [r3, #88]	; 0x58
 80031b8:	e00b      	b.n	80031d2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	2220      	movs	r2, #32
 80031c0:	431a      	orrs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ca:	2201      	movs	r2, #1
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	0018      	movs	r0, r3
 80031d6:	f7ff fd35 	bl	8002c44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031da:	e00f      	b.n	80031fc <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	2210      	movs	r2, #16
 80031e2:	4013      	ands	r3, r2
 80031e4:	d004      	beq.n	80031f0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7ff fd43 	bl	8002c74 <HAL_ADC_ErrorCallback>
}
 80031ee:	e005      	b.n	80031fc <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	0010      	movs	r0, r2
 80031fa:	4798      	blx	r3
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b004      	add	sp, #16
 8003202:	bd80      	pop	{r7, pc}
 8003204:	fffffefe 	.word	0xfffffefe

08003208 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	0018      	movs	r0, r3
 800321a:	f7ff fd1b 	bl	8002c54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	b004      	add	sp, #16
 8003224:	bd80      	pop	{r7, pc}

08003226 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003238:	2240      	movs	r2, #64	; 0x40
 800323a:	431a      	orrs	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	2204      	movs	r2, #4
 8003246:	431a      	orrs	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	0018      	movs	r0, r3
 8003250:	f7ff fd10 	bl	8002c74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	46bd      	mov	sp, r7
 8003258:	b004      	add	sp, #16
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b002      	add	sp, #8
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b002      	add	sp, #8
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003284:	46c0      	nop			; (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	b002      	add	sp, #8
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}

0800329c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	0002      	movs	r2, r0
 80032a4:	1dfb      	adds	r3, r7, #7
 80032a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032a8:	1dfb      	adds	r3, r7, #7
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b7f      	cmp	r3, #127	; 0x7f
 80032ae:	d809      	bhi.n	80032c4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032b0:	1dfb      	adds	r3, r7, #7
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	001a      	movs	r2, r3
 80032b6:	231f      	movs	r3, #31
 80032b8:	401a      	ands	r2, r3
 80032ba:	4b04      	ldr	r3, [pc, #16]	; (80032cc <__NVIC_EnableIRQ+0x30>)
 80032bc:	2101      	movs	r1, #1
 80032be:	4091      	lsls	r1, r2
 80032c0:	000a      	movs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80032c4:	46c0      	nop			; (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b002      	add	sp, #8
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	e000e100 	.word	0xe000e100

080032d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	0002      	movs	r2, r0
 80032d8:	6039      	str	r1, [r7, #0]
 80032da:	1dfb      	adds	r3, r7, #7
 80032dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032de:	1dfb      	adds	r3, r7, #7
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b7f      	cmp	r3, #127	; 0x7f
 80032e4:	d828      	bhi.n	8003338 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032e6:	4a2f      	ldr	r2, [pc, #188]	; (80033a4 <__NVIC_SetPriority+0xd4>)
 80032e8:	1dfb      	adds	r3, r7, #7
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b25b      	sxtb	r3, r3
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	33c0      	adds	r3, #192	; 0xc0
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	589b      	ldr	r3, [r3, r2]
 80032f6:	1dfa      	adds	r2, r7, #7
 80032f8:	7812      	ldrb	r2, [r2, #0]
 80032fa:	0011      	movs	r1, r2
 80032fc:	2203      	movs	r2, #3
 80032fe:	400a      	ands	r2, r1
 8003300:	00d2      	lsls	r2, r2, #3
 8003302:	21ff      	movs	r1, #255	; 0xff
 8003304:	4091      	lsls	r1, r2
 8003306:	000a      	movs	r2, r1
 8003308:	43d2      	mvns	r2, r2
 800330a:	401a      	ands	r2, r3
 800330c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	019b      	lsls	r3, r3, #6
 8003312:	22ff      	movs	r2, #255	; 0xff
 8003314:	401a      	ands	r2, r3
 8003316:	1dfb      	adds	r3, r7, #7
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	0018      	movs	r0, r3
 800331c:	2303      	movs	r3, #3
 800331e:	4003      	ands	r3, r0
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003324:	481f      	ldr	r0, [pc, #124]	; (80033a4 <__NVIC_SetPriority+0xd4>)
 8003326:	1dfb      	adds	r3, r7, #7
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	b25b      	sxtb	r3, r3
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	430a      	orrs	r2, r1
 8003330:	33c0      	adds	r3, #192	; 0xc0
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003336:	e031      	b.n	800339c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003338:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <__NVIC_SetPriority+0xd8>)
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	0019      	movs	r1, r3
 8003340:	230f      	movs	r3, #15
 8003342:	400b      	ands	r3, r1
 8003344:	3b08      	subs	r3, #8
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	3306      	adds	r3, #6
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	18d3      	adds	r3, r2, r3
 800334e:	3304      	adds	r3, #4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	1dfa      	adds	r2, r7, #7
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	0011      	movs	r1, r2
 8003358:	2203      	movs	r2, #3
 800335a:	400a      	ands	r2, r1
 800335c:	00d2      	lsls	r2, r2, #3
 800335e:	21ff      	movs	r1, #255	; 0xff
 8003360:	4091      	lsls	r1, r2
 8003362:	000a      	movs	r2, r1
 8003364:	43d2      	mvns	r2, r2
 8003366:	401a      	ands	r2, r3
 8003368:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	019b      	lsls	r3, r3, #6
 800336e:	22ff      	movs	r2, #255	; 0xff
 8003370:	401a      	ands	r2, r3
 8003372:	1dfb      	adds	r3, r7, #7
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	0018      	movs	r0, r3
 8003378:	2303      	movs	r3, #3
 800337a:	4003      	ands	r3, r0
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003380:	4809      	ldr	r0, [pc, #36]	; (80033a8 <__NVIC_SetPriority+0xd8>)
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	001c      	movs	r4, r3
 8003388:	230f      	movs	r3, #15
 800338a:	4023      	ands	r3, r4
 800338c:	3b08      	subs	r3, #8
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	430a      	orrs	r2, r1
 8003392:	3306      	adds	r3, #6
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	18c3      	adds	r3, r0, r3
 8003398:	3304      	adds	r3, #4
 800339a:	601a      	str	r2, [r3, #0]
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b003      	add	sp, #12
 80033a2:	bd90      	pop	{r4, r7, pc}
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	1e5a      	subs	r2, r3, #1
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	045b      	lsls	r3, r3, #17
 80033bc:	429a      	cmp	r2, r3
 80033be:	d301      	bcc.n	80033c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033c0:	2301      	movs	r3, #1
 80033c2:	e010      	b.n	80033e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <SysTick_Config+0x44>)
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	3a01      	subs	r2, #1
 80033ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033cc:	2301      	movs	r3, #1
 80033ce:	425b      	negs	r3, r3
 80033d0:	2103      	movs	r1, #3
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7ff ff7c 	bl	80032d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <SysTick_Config+0x44>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <SysTick_Config+0x44>)
 80033e0:	2207      	movs	r2, #7
 80033e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	0018      	movs	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b002      	add	sp, #8
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	e000e010 	.word	0xe000e010

080033f4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	210f      	movs	r1, #15
 8003400:	187b      	adds	r3, r7, r1
 8003402:	1c02      	adds	r2, r0, #0
 8003404:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	187b      	adds	r3, r7, r1
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	b25b      	sxtb	r3, r3
 800340e:	0011      	movs	r1, r2
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff ff5d 	bl	80032d0 <__NVIC_SetPriority>
}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	b004      	add	sp, #16
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	0002      	movs	r2, r0
 8003426:	1dfb      	adds	r3, r7, #7
 8003428:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800342a:	1dfb      	adds	r3, r7, #7
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	b25b      	sxtb	r3, r3
 8003430:	0018      	movs	r0, r3
 8003432:	f7ff ff33 	bl	800329c <__NVIC_EnableIRQ>
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	b002      	add	sp, #8
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	0018      	movs	r0, r3
 800344a:	f7ff ffaf 	bl	80033ac <SysTick_Config>
 800344e:	0003      	movs	r3, r0
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b002      	add	sp, #8
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e077      	b.n	800355a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a3d      	ldr	r2, [pc, #244]	; (8003564 <HAL_DMA_Init+0x10c>)
 8003470:	4694      	mov	ip, r2
 8003472:	4463      	add	r3, ip
 8003474:	2114      	movs	r1, #20
 8003476:	0018      	movs	r0, r3
 8003478:	f7fc fe46 	bl	8000108 <__udivsi3>
 800347c:	0003      	movs	r3, r0
 800347e:	009a      	lsls	r2, r3, #2
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2225      	movs	r2, #37	; 0x25
 8003488:	2102      	movs	r1, #2
 800348a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4934      	ldr	r1, [pc, #208]	; (8003568 <HAL_DMA_Init+0x110>)
 8003498:	400a      	ands	r2, r1
 800349a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6819      	ldr	r1, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f000 f9c1 	bl	800385c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	01db      	lsls	r3, r3, #7
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d102      	bne.n	80034ec <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	213f      	movs	r1, #63	; 0x3f
 80034f6:	400a      	ands	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003502:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d011      	beq.n	8003530 <HAL_DMA_Init+0xd8>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b04      	cmp	r3, #4
 8003512:	d80d      	bhi.n	8003530 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	0018      	movs	r0, r3
 8003518:	f000 f9cc 	bl	80038b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	e008      	b.n	8003542 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2225      	movs	r2, #37	; 0x25
 800354c:	2101      	movs	r1, #1
 800354e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2224      	movs	r2, #36	; 0x24
 8003554:	2100      	movs	r1, #0
 8003556:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	bffdfff8 	.word	0xbffdfff8
 8003568:	ffff800f 	.word	0xffff800f

0800356c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800357a:	2317      	movs	r3, #23
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2224      	movs	r2, #36	; 0x24
 8003586:	5c9b      	ldrb	r3, [r3, r2]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_DMA_Start_IT+0x24>
 800358c:	2302      	movs	r3, #2
 800358e:	e06f      	b.n	8003670 <HAL_DMA_Start_IT+0x104>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2224      	movs	r2, #36	; 0x24
 8003594:	2101      	movs	r1, #1
 8003596:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2225      	movs	r2, #37	; 0x25
 800359c:	5c9b      	ldrb	r3, [r3, r2]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d157      	bne.n	8003654 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2225      	movs	r2, #37	; 0x25
 80035a8:	2102      	movs	r1, #2
 80035aa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2101      	movs	r1, #1
 80035be:	438a      	bics	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f907 	bl	80037dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	210e      	movs	r1, #14
 80035e2:	430a      	orrs	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e00f      	b.n	8003608 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2104      	movs	r1, #4
 80035f4:	438a      	bics	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	210a      	movs	r1, #10
 8003604:	430a      	orrs	r2, r1
 8003606:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	025b      	lsls	r3, r3, #9
 8003612:	4013      	ands	r3, r2
 8003614:	d008      	beq.n	8003628 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	0049      	lsls	r1, r1, #1
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	0049      	lsls	r1, r1, #1
 800363e:	430a      	orrs	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2101      	movs	r1, #1
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	e00a      	b.n	800366a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2224      	movs	r2, #36	; 0x24
 800365e:	2100      	movs	r1, #0
 8003660:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003662:	2317      	movs	r3, #23
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800366a:	2317      	movs	r3, #23
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	781b      	ldrb	r3, [r3, #0]
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b006      	add	sp, #24
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003680:	4b55      	ldr	r3, [pc, #340]	; (80037d8 <HAL_DMA_IRQHandler+0x160>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	221c      	movs	r2, #28
 8003694:	4013      	ands	r3, r2
 8003696:	2204      	movs	r2, #4
 8003698:	409a      	lsls	r2, r3
 800369a:	0013      	movs	r3, r2
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	d027      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x7a>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2204      	movs	r2, #4
 80036a6:	4013      	ands	r3, r2
 80036a8:	d023      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2220      	movs	r2, #32
 80036b2:	4013      	ands	r3, r2
 80036b4:	d107      	bne.n	80036c6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2104      	movs	r1, #4
 80036c2:	438a      	bics	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80036c6:	4b44      	ldr	r3, [pc, #272]	; (80037d8 <HAL_DMA_IRQHandler+0x160>)
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	221c      	movs	r2, #28
 80036d0:	4013      	ands	r3, r2
 80036d2:	2204      	movs	r2, #4
 80036d4:	409a      	lsls	r2, r3
 80036d6:	4b40      	ldr	r3, [pc, #256]	; (80037d8 <HAL_DMA_IRQHandler+0x160>)
 80036d8:	430a      	orrs	r2, r1
 80036da:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d100      	bne.n	80036e6 <HAL_DMA_IRQHandler+0x6e>
 80036e4:	e073      	b.n	80037ce <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	0010      	movs	r0, r2
 80036ee:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80036f0:	e06d      	b.n	80037ce <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	221c      	movs	r2, #28
 80036f8:	4013      	ands	r3, r2
 80036fa:	2202      	movs	r2, #2
 80036fc:	409a      	lsls	r2, r3
 80036fe:	0013      	movs	r3, r2
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4013      	ands	r3, r2
 8003704:	d02e      	beq.n	8003764 <HAL_DMA_IRQHandler+0xec>
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2202      	movs	r2, #2
 800370a:	4013      	ands	r3, r2
 800370c:	d02a      	beq.n	8003764 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2220      	movs	r2, #32
 8003716:	4013      	ands	r3, r2
 8003718:	d10b      	bne.n	8003732 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	210a      	movs	r1, #10
 8003726:	438a      	bics	r2, r1
 8003728:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2225      	movs	r2, #37	; 0x25
 800372e:	2101      	movs	r1, #1
 8003730:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003732:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <HAL_DMA_IRQHandler+0x160>)
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	221c      	movs	r2, #28
 800373c:	4013      	ands	r3, r2
 800373e:	2202      	movs	r2, #2
 8003740:	409a      	lsls	r2, r3
 8003742:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <HAL_DMA_IRQHandler+0x160>)
 8003744:	430a      	orrs	r2, r1
 8003746:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	; 0x24
 800374c:	2100      	movs	r1, #0
 800374e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d03a      	beq.n	80037ce <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	0010      	movs	r0, r2
 8003760:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003762:	e034      	b.n	80037ce <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	221c      	movs	r2, #28
 800376a:	4013      	ands	r3, r2
 800376c:	2208      	movs	r2, #8
 800376e:	409a      	lsls	r2, r3
 8003770:	0013      	movs	r3, r2
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4013      	ands	r3, r2
 8003776:	d02b      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x158>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2208      	movs	r2, #8
 800377c:	4013      	ands	r3, r2
 800377e:	d027      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	210e      	movs	r1, #14
 800378c:	438a      	bics	r2, r1
 800378e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003790:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_DMA_IRQHandler+0x160>)
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	221c      	movs	r2, #28
 800379a:	4013      	ands	r3, r2
 800379c:	2201      	movs	r2, #1
 800379e:	409a      	lsls	r2, r3
 80037a0:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <HAL_DMA_IRQHandler+0x160>)
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2225      	movs	r2, #37	; 0x25
 80037b0:	2101      	movs	r1, #1
 80037b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	; 0x24
 80037b8:	2100      	movs	r1, #0
 80037ba:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	0010      	movs	r0, r2
 80037cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46c0      	nop			; (mov r8, r8)
}
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b004      	add	sp, #16
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40020000 	.word	0x40020000

080037dc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80037f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003804:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003806:	4b14      	ldr	r3, [pc, #80]	; (8003858 <DMA_SetConfig+0x7c>)
 8003808:	6859      	ldr	r1, [r3, #4]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	221c      	movs	r2, #28
 8003810:	4013      	ands	r3, r2
 8003812:	2201      	movs	r2, #1
 8003814:	409a      	lsls	r2, r3
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <DMA_SetConfig+0x7c>)
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b10      	cmp	r3, #16
 800382a:	d108      	bne.n	800383e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800383c:	e007      	b.n	800384e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	60da      	str	r2, [r3, #12]
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	b004      	add	sp, #16
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	40020000 	.word	0x40020000

0800385c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	089b      	lsrs	r3, r3, #2
 800386a:	4a10      	ldr	r2, [pc, #64]	; (80038ac <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800386c:	4694      	mov	ip, r2
 800386e:	4463      	add	r3, ip
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	001a      	movs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	001a      	movs	r2, r3
 800387e:	23ff      	movs	r3, #255	; 0xff
 8003880:	4013      	ands	r3, r2
 8003882:	3b08      	subs	r3, #8
 8003884:	2114      	movs	r1, #20
 8003886:	0018      	movs	r0, r3
 8003888:	f7fc fc3e 	bl	8000108 <__udivsi3>
 800388c:	0003      	movs	r3, r0
 800388e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a07      	ldr	r2, [pc, #28]	; (80038b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003894:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	221f      	movs	r2, #31
 800389a:	4013      	ands	r3, r2
 800389c:	2201      	movs	r2, #1
 800389e:	409a      	lsls	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b004      	add	sp, #16
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	10008200 	.word	0x10008200
 80038b0:	40020880 	.word	0x40020880

080038b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	223f      	movs	r2, #63	; 0x3f
 80038c2:	4013      	ands	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80038ca:	4694      	mov	ip, r2
 80038cc:	4463      	add	r3, ip
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	001a      	movs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a07      	ldr	r2, [pc, #28]	; (80038f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80038da:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3b01      	subs	r3, #1
 80038e0:	2203      	movs	r2, #3
 80038e2:	4013      	ands	r3, r2
 80038e4:	2201      	movs	r2, #1
 80038e6:	409a      	lsls	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	659a      	str	r2, [r3, #88]	; 0x58
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b004      	add	sp, #16
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	1000823f 	.word	0x1000823f
 80038f8:	40020940 	.word	0x40020940

080038fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800390a:	e147      	b.n	8003b9c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2101      	movs	r1, #1
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4091      	lsls	r1, r2
 8003916:	000a      	movs	r2, r1
 8003918:	4013      	ands	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d100      	bne.n	8003924 <HAL_GPIO_Init+0x28>
 8003922:	e138      	b.n	8003b96 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2203      	movs	r2, #3
 800392a:	4013      	ands	r3, r2
 800392c:	2b01      	cmp	r3, #1
 800392e:	d005      	beq.n	800393c <HAL_GPIO_Init+0x40>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2203      	movs	r2, #3
 8003936:	4013      	ands	r3, r2
 8003938:	2b02      	cmp	r3, #2
 800393a:	d130      	bne.n	800399e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	2203      	movs	r2, #3
 8003948:	409a      	lsls	r2, r3
 800394a:	0013      	movs	r3, r2
 800394c:	43da      	mvns	r2, r3
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	409a      	lsls	r2, r3
 800395e:	0013      	movs	r3, r2
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003972:	2201      	movs	r2, #1
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	409a      	lsls	r2, r3
 8003978:	0013      	movs	r3, r2
 800397a:	43da      	mvns	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	2201      	movs	r2, #1
 800398a:	401a      	ands	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	409a      	lsls	r2, r3
 8003990:	0013      	movs	r3, r2
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2203      	movs	r2, #3
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d017      	beq.n	80039da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	2203      	movs	r2, #3
 80039b6:	409a      	lsls	r2, r3
 80039b8:	0013      	movs	r3, r2
 80039ba:	43da      	mvns	r2, r3
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	409a      	lsls	r2, r3
 80039cc:	0013      	movs	r3, r2
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2203      	movs	r2, #3
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d123      	bne.n	8003a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	08da      	lsrs	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3208      	adds	r2, #8
 80039ee:	0092      	lsls	r2, r2, #2
 80039f0:	58d3      	ldr	r3, [r2, r3]
 80039f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2207      	movs	r2, #7
 80039f8:	4013      	ands	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	220f      	movs	r2, #15
 80039fe:	409a      	lsls	r2, r3
 8003a00:	0013      	movs	r3, r2
 8003a02:	43da      	mvns	r2, r3
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2107      	movs	r1, #7
 8003a12:	400b      	ands	r3, r1
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	409a      	lsls	r2, r3
 8003a18:	0013      	movs	r3, r2
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	08da      	lsrs	r2, r3, #3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3208      	adds	r2, #8
 8003a28:	0092      	lsls	r2, r2, #2
 8003a2a:	6939      	ldr	r1, [r7, #16]
 8003a2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	2203      	movs	r2, #3
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	0013      	movs	r3, r2
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4013      	ands	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	401a      	ands	r2, r3
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	409a      	lsls	r2, r3
 8003a54:	0013      	movs	r3, r2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	23c0      	movs	r3, #192	; 0xc0
 8003a68:	029b      	lsls	r3, r3, #10
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d100      	bne.n	8003a70 <HAL_GPIO_Init+0x174>
 8003a6e:	e092      	b.n	8003b96 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a70:	4a50      	ldr	r2, [pc, #320]	; (8003bb4 <HAL_GPIO_Init+0x2b8>)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	089b      	lsrs	r3, r3, #2
 8003a76:	3318      	adds	r3, #24
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	589b      	ldr	r3, [r3, r2]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2203      	movs	r2, #3
 8003a82:	4013      	ands	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	220f      	movs	r2, #15
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	0013      	movs	r3, r2
 8003a8c:	43da      	mvns	r2, r3
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4013      	ands	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	23a0      	movs	r3, #160	; 0xa0
 8003a98:	05db      	lsls	r3, r3, #23
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d013      	beq.n	8003ac6 <HAL_GPIO_Init+0x1ca>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a45      	ldr	r2, [pc, #276]	; (8003bb8 <HAL_GPIO_Init+0x2bc>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00d      	beq.n	8003ac2 <HAL_GPIO_Init+0x1c6>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a44      	ldr	r2, [pc, #272]	; (8003bbc <HAL_GPIO_Init+0x2c0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d007      	beq.n	8003abe <HAL_GPIO_Init+0x1c2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a43      	ldr	r2, [pc, #268]	; (8003bc0 <HAL_GPIO_Init+0x2c4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d101      	bne.n	8003aba <HAL_GPIO_Init+0x1be>
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e006      	b.n	8003ac8 <HAL_GPIO_Init+0x1cc>
 8003aba:	2305      	movs	r3, #5
 8003abc:	e004      	b.n	8003ac8 <HAL_GPIO_Init+0x1cc>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e002      	b.n	8003ac8 <HAL_GPIO_Init+0x1cc>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_GPIO_Init+0x1cc>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	2103      	movs	r1, #3
 8003acc:	400a      	ands	r2, r1
 8003ace:	00d2      	lsls	r2, r2, #3
 8003ad0:	4093      	lsls	r3, r2
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ad8:	4936      	ldr	r1, [pc, #216]	; (8003bb4 <HAL_GPIO_Init+0x2b8>)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	3318      	adds	r3, #24
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ae6:	4b33      	ldr	r3, [pc, #204]	; (8003bb4 <HAL_GPIO_Init+0x2b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	43da      	mvns	r2, r3
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4013      	ands	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	035b      	lsls	r3, r3, #13
 8003afe:	4013      	ands	r3, r2
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b0a:	4b2a      	ldr	r3, [pc, #168]	; (8003bb4 <HAL_GPIO_Init+0x2b8>)
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003b10:	4b28      	ldr	r3, [pc, #160]	; (8003bb4 <HAL_GPIO_Init+0x2b8>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	43da      	mvns	r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	2380      	movs	r3, #128	; 0x80
 8003b26:	039b      	lsls	r3, r3, #14
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b34:	4b1f      	ldr	r3, [pc, #124]	; (8003bb4 <HAL_GPIO_Init+0x2b8>)
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b3a:	4a1e      	ldr	r2, [pc, #120]	; (8003bb4 <HAL_GPIO_Init+0x2b8>)
 8003b3c:	2384      	movs	r3, #132	; 0x84
 8003b3e:	58d3      	ldr	r3, [r2, r3]
 8003b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	43da      	mvns	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	029b      	lsls	r3, r3, #10
 8003b54:	4013      	ands	r3, r2
 8003b56:	d003      	beq.n	8003b60 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b60:	4914      	ldr	r1, [pc, #80]	; (8003bb4 <HAL_GPIO_Init+0x2b8>)
 8003b62:	2284      	movs	r2, #132	; 0x84
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003b68:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <HAL_GPIO_Init+0x2b8>)
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	58d3      	ldr	r3, [r2, r3]
 8003b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	43da      	mvns	r2, r3
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4013      	ands	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	2380      	movs	r3, #128	; 0x80
 8003b80:	025b      	lsls	r3, r3, #9
 8003b82:	4013      	ands	r3, r2
 8003b84:	d003      	beq.n	8003b8e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b8e:	4909      	ldr	r1, [pc, #36]	; (8003bb4 <HAL_GPIO_Init+0x2b8>)
 8003b90:	2280      	movs	r2, #128	; 0x80
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	40da      	lsrs	r2, r3
 8003ba4:	1e13      	subs	r3, r2, #0
 8003ba6:	d000      	beq.n	8003baa <HAL_GPIO_Init+0x2ae>
 8003ba8:	e6b0      	b.n	800390c <HAL_GPIO_Init+0x10>
  }
}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b006      	add	sp, #24
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021800 	.word	0x40021800
 8003bb8:	50000400 	.word	0x50000400
 8003bbc:	50000800 	.word	0x50000800
 8003bc0:	50000c00 	.word	0x50000c00

08003bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	0008      	movs	r0, r1
 8003bce:	0011      	movs	r1, r2
 8003bd0:	1cbb      	adds	r3, r7, #2
 8003bd2:	1c02      	adds	r2, r0, #0
 8003bd4:	801a      	strh	r2, [r3, #0]
 8003bd6:	1c7b      	adds	r3, r7, #1
 8003bd8:	1c0a      	adds	r2, r1, #0
 8003bda:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bdc:	1c7b      	adds	r3, r7, #1
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d004      	beq.n	8003bee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003be4:	1cbb      	adds	r3, r7, #2
 8003be6:	881a      	ldrh	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bec:	e003      	b.n	8003bf6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bee:	1cbb      	adds	r3, r7, #2
 8003bf0:	881a      	ldrh	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	b002      	add	sp, #8
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	0019      	movs	r1, r3
 8003c12:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d11f      	bne.n	8003c64 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003c24:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	0013      	movs	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	189b      	adds	r3, r3, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	4912      	ldr	r1, [pc, #72]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003c32:	0018      	movs	r0, r3
 8003c34:	f7fc fa68 	bl	8000108 <__udivsi3>
 8003c38:	0003      	movs	r3, r0
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c3e:	e008      	b.n	8003c52 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	e001      	b.n	8003c52 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e009      	b.n	8003c66 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d0ed      	beq.n	8003c40 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	0018      	movs	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b004      	add	sp, #16
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	40007000 	.word	0x40007000
 8003c74:	fffff9ff 	.word	0xfffff9ff
 8003c78:	20000000 	.word	0x20000000
 8003c7c:	000f4240 	.word	0x000f4240

08003c80 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	23e0      	movs	r3, #224	; 0xe0
 8003c8a:	01db      	lsls	r3, r3, #7
 8003c8c:	4013      	ands	r3, r2
}
 8003c8e:	0018      	movs	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000

08003c98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e2fe      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x1e>
 8003cb4:	e07c      	b.n	8003db0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb6:	4bc3      	ldr	r3, [pc, #780]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2238      	movs	r2, #56	; 0x38
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc0:	4bc0      	ldr	r3, [pc, #768]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d102      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x3e>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d002      	beq.n	8003cdc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d10b      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cdc:	4bb9      	ldr	r3, [pc, #740]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	029b      	lsls	r3, r3, #10
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d062      	beq.n	8003dae <HAL_RCC_OscConfig+0x116>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d15e      	bne.n	8003dae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e2d9      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	025b      	lsls	r3, r3, #9
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCC_OscConfig+0x78>
 8003d00:	4bb0      	ldr	r3, [pc, #704]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4baf      	ldr	r3, [pc, #700]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003d06:	2180      	movs	r1, #128	; 0x80
 8003d08:	0249      	lsls	r1, r1, #9
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	e020      	b.n	8003d52 <HAL_RCC_OscConfig+0xba>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	23a0      	movs	r3, #160	; 0xa0
 8003d16:	02db      	lsls	r3, r3, #11
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d10e      	bne.n	8003d3a <HAL_RCC_OscConfig+0xa2>
 8003d1c:	4ba9      	ldr	r3, [pc, #676]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4ba8      	ldr	r3, [pc, #672]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003d22:	2180      	movs	r1, #128	; 0x80
 8003d24:	02c9      	lsls	r1, r1, #11
 8003d26:	430a      	orrs	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	4ba6      	ldr	r3, [pc, #664]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4ba5      	ldr	r3, [pc, #660]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	0249      	lsls	r1, r1, #9
 8003d34:	430a      	orrs	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e00b      	b.n	8003d52 <HAL_RCC_OscConfig+0xba>
 8003d3a:	4ba2      	ldr	r3, [pc, #648]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4ba1      	ldr	r3, [pc, #644]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003d40:	49a1      	ldr	r1, [pc, #644]	; (8003fc8 <HAL_RCC_OscConfig+0x330>)
 8003d42:	400a      	ands	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	4b9f      	ldr	r3, [pc, #636]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	4b9e      	ldr	r3, [pc, #632]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003d4c:	499f      	ldr	r1, [pc, #636]	; (8003fcc <HAL_RCC_OscConfig+0x334>)
 8003d4e:	400a      	ands	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d014      	beq.n	8003d84 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fe fac7 	bl	80022ec <HAL_GetTick>
 8003d5e:	0003      	movs	r3, r0
 8003d60:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fe fac2 	bl	80022ec <HAL_GetTick>
 8003d68:	0002      	movs	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e298      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d76:	4b93      	ldr	r3, [pc, #588]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	029b      	lsls	r3, r3, #10
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0xcc>
 8003d82:	e015      	b.n	8003db0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe fab2 	bl	80022ec <HAL_GetTick>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d8e:	f7fe faad 	bl	80022ec <HAL_GetTick>
 8003d92:	0002      	movs	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b64      	cmp	r3, #100	; 0x64
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e283      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003da0:	4b88      	ldr	r3, [pc, #544]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	029b      	lsls	r3, r3, #10
 8003da8:	4013      	ands	r3, r2
 8003daa:	d1f0      	bne.n	8003d8e <HAL_RCC_OscConfig+0xf6>
 8003dac:	e000      	b.n	8003db0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2202      	movs	r2, #2
 8003db6:	4013      	ands	r3, r2
 8003db8:	d100      	bne.n	8003dbc <HAL_RCC_OscConfig+0x124>
 8003dba:	e099      	b.n	8003ef0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dbc:	4b81      	ldr	r3, [pc, #516]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2238      	movs	r2, #56	; 0x38
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dc6:	4b7f      	ldr	r3, [pc, #508]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2203      	movs	r2, #3
 8003dcc:	4013      	ands	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d102      	bne.n	8003ddc <HAL_RCC_OscConfig+0x144>
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d002      	beq.n	8003de2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d135      	bne.n	8003e4e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003de2:	4b78      	ldr	r3, [pc, #480]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4013      	ands	r3, r2
 8003dec:	d005      	beq.n	8003dfa <HAL_RCC_OscConfig+0x162>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e256      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfa:	4b72      	ldr	r3, [pc, #456]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4a74      	ldr	r2, [pc, #464]	; (8003fd0 <HAL_RCC_OscConfig+0x338>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	0019      	movs	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	021a      	lsls	r2, r3, #8
 8003e0a:	4b6e      	ldr	r3, [pc, #440]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d112      	bne.n	8003e3c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e16:	4b6b      	ldr	r3, [pc, #428]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a6e      	ldr	r2, [pc, #440]	; (8003fd4 <HAL_RCC_OscConfig+0x33c>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	0019      	movs	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	4b67      	ldr	r3, [pc, #412]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003e26:	430a      	orrs	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e2a:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	0adb      	lsrs	r3, r3, #11
 8003e30:	2207      	movs	r2, #7
 8003e32:	4013      	ands	r3, r2
 8003e34:	4a68      	ldr	r2, [pc, #416]	; (8003fd8 <HAL_RCC_OscConfig+0x340>)
 8003e36:	40da      	lsrs	r2, r3
 8003e38:	4b68      	ldr	r3, [pc, #416]	; (8003fdc <HAL_RCC_OscConfig+0x344>)
 8003e3a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e3c:	4b68      	ldr	r3, [pc, #416]	; (8003fe0 <HAL_RCC_OscConfig+0x348>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7fe f9f7 	bl	8002234 <HAL_InitTick>
 8003e46:	1e03      	subs	r3, r0, #0
 8003e48:	d051      	beq.n	8003eee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e22c      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d030      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e56:	4b5b      	ldr	r3, [pc, #364]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a5e      	ldr	r2, [pc, #376]	; (8003fd4 <HAL_RCC_OscConfig+0x33c>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	0019      	movs	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	4b57      	ldr	r3, [pc, #348]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003e66:	430a      	orrs	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003e6a:	4b56      	ldr	r3, [pc, #344]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4b55      	ldr	r3, [pc, #340]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003e70:	2180      	movs	r1, #128	; 0x80
 8003e72:	0049      	lsls	r1, r1, #1
 8003e74:	430a      	orrs	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fe fa38 	bl	80022ec <HAL_GetTick>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e82:	f7fe fa33 	bl	80022ec <HAL_GetTick>
 8003e86:	0002      	movs	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e209      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e94:	4b4b      	ldr	r3, [pc, #300]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea0:	4b48      	ldr	r3, [pc, #288]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4a4a      	ldr	r2, [pc, #296]	; (8003fd0 <HAL_RCC_OscConfig+0x338>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	0019      	movs	r1, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	021a      	lsls	r2, r3, #8
 8003eb0:	4b44      	ldr	r3, [pc, #272]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	e01b      	b.n	8003ef0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003eb8:	4b42      	ldr	r3, [pc, #264]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b41      	ldr	r3, [pc, #260]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003ebe:	4949      	ldr	r1, [pc, #292]	; (8003fe4 <HAL_RCC_OscConfig+0x34c>)
 8003ec0:	400a      	ands	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fe fa12 	bl	80022ec <HAL_GetTick>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ece:	f7fe fa0d 	bl	80022ec <HAL_GetTick>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e1e3      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ee0:	4b38      	ldr	r3, [pc, #224]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d1f0      	bne.n	8003ece <HAL_RCC_OscConfig+0x236>
 8003eec:	e000      	b.n	8003ef0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d047      	beq.n	8003f8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003efa:	4b32      	ldr	r3, [pc, #200]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2238      	movs	r2, #56	; 0x38
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b18      	cmp	r3, #24
 8003f04:	d10a      	bne.n	8003f1c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003f06:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d03c      	beq.n	8003f8a <HAL_RCC_OscConfig+0x2f2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d138      	bne.n	8003f8a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e1c5      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d019      	beq.n	8003f58 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003f24:	4b27      	ldr	r3, [pc, #156]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003f26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f28:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fe f9dc 	bl	80022ec <HAL_GetTick>
 8003f34:	0003      	movs	r3, r0
 8003f36:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f3a:	f7fe f9d7 	bl	80022ec <HAL_GetTick>
 8003f3e:	0002      	movs	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e1ad      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f4c:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f50:	2202      	movs	r2, #2
 8003f52:	4013      	ands	r3, r2
 8003f54:	d0f1      	beq.n	8003f3a <HAL_RCC_OscConfig+0x2a2>
 8003f56:	e018      	b.n	8003f8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003f5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f5c:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003f5e:	2101      	movs	r1, #1
 8003f60:	438a      	bics	r2, r1
 8003f62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fe f9c2 	bl	80022ec <HAL_GetTick>
 8003f68:	0003      	movs	r3, r0
 8003f6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f6e:	f7fe f9bd 	bl	80022ec <HAL_GetTick>
 8003f72:	0002      	movs	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e193      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f80:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f84:	2202      	movs	r2, #2
 8003f86:	4013      	ands	r3, r2
 8003f88:	d1f1      	bne.n	8003f6e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2204      	movs	r2, #4
 8003f90:	4013      	ands	r3, r2
 8003f92:	d100      	bne.n	8003f96 <HAL_RCC_OscConfig+0x2fe>
 8003f94:	e0c6      	b.n	8004124 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f96:	231f      	movs	r3, #31
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f9e:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2238      	movs	r2, #56	; 0x38
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d11e      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCC_OscConfig+0x32c>)
 8003fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fae:	2202      	movs	r2, #2
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d100      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x31e>
 8003fb4:	e0b6      	b.n	8004124 <HAL_RCC_OscConfig+0x48c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d000      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x328>
 8003fbe:	e0b1      	b.n	8004124 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e171      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	fffeffff 	.word	0xfffeffff
 8003fcc:	fffbffff 	.word	0xfffbffff
 8003fd0:	ffff80ff 	.word	0xffff80ff
 8003fd4:	ffffc7ff 	.word	0xffffc7ff
 8003fd8:	00f42400 	.word	0x00f42400
 8003fdc:	20000000 	.word	0x20000000
 8003fe0:	20000004 	.word	0x20000004
 8003fe4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fe8:	4bb1      	ldr	r3, [pc, #708]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8003fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fec:	2380      	movs	r3, #128	; 0x80
 8003fee:	055b      	lsls	r3, r3, #21
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x360>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <HAL_RCC_OscConfig+0x362>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d011      	beq.n	8004022 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003ffe:	4bac      	ldr	r3, [pc, #688]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004002:	4bab      	ldr	r3, [pc, #684]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004004:	2180      	movs	r1, #128	; 0x80
 8004006:	0549      	lsls	r1, r1, #21
 8004008:	430a      	orrs	r2, r1
 800400a:	63da      	str	r2, [r3, #60]	; 0x3c
 800400c:	4ba8      	ldr	r3, [pc, #672]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 800400e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	055b      	lsls	r3, r3, #21
 8004014:	4013      	ands	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800401a:	231f      	movs	r3, #31
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	2201      	movs	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004022:	4ba4      	ldr	r3, [pc, #656]	; (80042b4 <HAL_RCC_OscConfig+0x61c>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4013      	ands	r3, r2
 800402c:	d11a      	bne.n	8004064 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800402e:	4ba1      	ldr	r3, [pc, #644]	; (80042b4 <HAL_RCC_OscConfig+0x61c>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4ba0      	ldr	r3, [pc, #640]	; (80042b4 <HAL_RCC_OscConfig+0x61c>)
 8004034:	2180      	movs	r1, #128	; 0x80
 8004036:	0049      	lsls	r1, r1, #1
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800403c:	f7fe f956 	bl	80022ec <HAL_GetTick>
 8004040:	0003      	movs	r3, r0
 8004042:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004046:	f7fe f951 	bl	80022ec <HAL_GetTick>
 800404a:	0002      	movs	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e127      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004058:	4b96      	ldr	r3, [pc, #600]	; (80042b4 <HAL_RCC_OscConfig+0x61c>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4013      	ands	r3, r2
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d106      	bne.n	800407a <HAL_RCC_OscConfig+0x3e2>
 800406c:	4b90      	ldr	r3, [pc, #576]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 800406e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004070:	4b8f      	ldr	r3, [pc, #572]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004072:	2101      	movs	r1, #1
 8004074:	430a      	orrs	r2, r1
 8004076:	65da      	str	r2, [r3, #92]	; 0x5c
 8004078:	e01c      	b.n	80040b4 <HAL_RCC_OscConfig+0x41c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b05      	cmp	r3, #5
 8004080:	d10c      	bne.n	800409c <HAL_RCC_OscConfig+0x404>
 8004082:	4b8b      	ldr	r3, [pc, #556]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004084:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004086:	4b8a      	ldr	r3, [pc, #552]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004088:	2104      	movs	r1, #4
 800408a:	430a      	orrs	r2, r1
 800408c:	65da      	str	r2, [r3, #92]	; 0x5c
 800408e:	4b88      	ldr	r3, [pc, #544]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004090:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004092:	4b87      	ldr	r3, [pc, #540]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004094:	2101      	movs	r1, #1
 8004096:	430a      	orrs	r2, r1
 8004098:	65da      	str	r2, [r3, #92]	; 0x5c
 800409a:	e00b      	b.n	80040b4 <HAL_RCC_OscConfig+0x41c>
 800409c:	4b84      	ldr	r3, [pc, #528]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 800409e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040a0:	4b83      	ldr	r3, [pc, #524]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80040a2:	2101      	movs	r1, #1
 80040a4:	438a      	bics	r2, r1
 80040a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80040a8:	4b81      	ldr	r3, [pc, #516]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80040aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040ac:	4b80      	ldr	r3, [pc, #512]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80040ae:	2104      	movs	r1, #4
 80040b0:	438a      	bics	r2, r1
 80040b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d014      	beq.n	80040e6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fe f916 	bl	80022ec <HAL_GetTick>
 80040c0:	0003      	movs	r3, r0
 80040c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c4:	e009      	b.n	80040da <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fe f911 	bl	80022ec <HAL_GetTick>
 80040ca:	0002      	movs	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	4a79      	ldr	r2, [pc, #484]	; (80042b8 <HAL_RCC_OscConfig+0x620>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e0e6      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040da:	4b75      	ldr	r3, [pc, #468]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80040dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040de:	2202      	movs	r2, #2
 80040e0:	4013      	ands	r3, r2
 80040e2:	d0f0      	beq.n	80040c6 <HAL_RCC_OscConfig+0x42e>
 80040e4:	e013      	b.n	800410e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e6:	f7fe f901 	bl	80022ec <HAL_GetTick>
 80040ea:	0003      	movs	r3, r0
 80040ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040ee:	e009      	b.n	8004104 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f0:	f7fe f8fc 	bl	80022ec <HAL_GetTick>
 80040f4:	0002      	movs	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	4a6f      	ldr	r2, [pc, #444]	; (80042b8 <HAL_RCC_OscConfig+0x620>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e0d1      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004104:	4b6a      	ldr	r3, [pc, #424]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004108:	2202      	movs	r2, #2
 800410a:	4013      	ands	r3, r2
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800410e:	231f      	movs	r3, #31
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d105      	bne.n	8004124 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004118:	4b65      	ldr	r3, [pc, #404]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 800411a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800411c:	4b64      	ldr	r3, [pc, #400]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 800411e:	4967      	ldr	r1, [pc, #412]	; (80042bc <HAL_RCC_OscConfig+0x624>)
 8004120:	400a      	ands	r2, r1
 8004122:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d100      	bne.n	800412e <HAL_RCC_OscConfig+0x496>
 800412c:	e0bb      	b.n	80042a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800412e:	4b60      	ldr	r3, [pc, #384]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2238      	movs	r2, #56	; 0x38
 8004134:	4013      	ands	r3, r2
 8004136:	2b10      	cmp	r3, #16
 8004138:	d100      	bne.n	800413c <HAL_RCC_OscConfig+0x4a4>
 800413a:	e07b      	b.n	8004234 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d156      	bne.n	80041f2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004144:	4b5a      	ldr	r3, [pc, #360]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b59      	ldr	r3, [pc, #356]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 800414a:	495d      	ldr	r1, [pc, #372]	; (80042c0 <HAL_RCC_OscConfig+0x628>)
 800414c:	400a      	ands	r2, r1
 800414e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fe f8cc 	bl	80022ec <HAL_GetTick>
 8004154:	0003      	movs	r3, r0
 8004156:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415a:	f7fe f8c7 	bl	80022ec <HAL_GetTick>
 800415e:	0002      	movs	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e09d      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800416c:	4b50      	ldr	r3, [pc, #320]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	049b      	lsls	r3, r3, #18
 8004174:	4013      	ands	r3, r2
 8004176:	d1f0      	bne.n	800415a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004178:	4b4d      	ldr	r3, [pc, #308]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a51      	ldr	r2, [pc, #324]	; (80042c4 <HAL_RCC_OscConfig+0x62c>)
 800417e:	4013      	ands	r3, r2
 8004180:	0019      	movs	r1, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a4:	431a      	orrs	r2, r3
 80041a6:	4b42      	ldr	r3, [pc, #264]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041a8:	430a      	orrs	r2, r1
 80041aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ac:	4b40      	ldr	r3, [pc, #256]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b3f      	ldr	r3, [pc, #252]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041b2:	2180      	movs	r1, #128	; 0x80
 80041b4:	0449      	lsls	r1, r1, #17
 80041b6:	430a      	orrs	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80041ba:	4b3d      	ldr	r3, [pc, #244]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	4b3c      	ldr	r3, [pc, #240]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041c0:	2180      	movs	r1, #128	; 0x80
 80041c2:	0549      	lsls	r1, r1, #21
 80041c4:	430a      	orrs	r2, r1
 80041c6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fe f890 	bl	80022ec <HAL_GetTick>
 80041cc:	0003      	movs	r3, r0
 80041ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d2:	f7fe f88b 	bl	80022ec <HAL_GetTick>
 80041d6:	0002      	movs	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e061      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e4:	4b32      	ldr	r3, [pc, #200]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	049b      	lsls	r3, r3, #18
 80041ec:	4013      	ands	r3, r2
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x53a>
 80041f0:	e059      	b.n	80042a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f2:	4b2f      	ldr	r3, [pc, #188]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b2e      	ldr	r3, [pc, #184]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 80041f8:	4931      	ldr	r1, [pc, #196]	; (80042c0 <HAL_RCC_OscConfig+0x628>)
 80041fa:	400a      	ands	r2, r1
 80041fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fe:	f7fe f875 	bl	80022ec <HAL_GetTick>
 8004202:	0003      	movs	r3, r0
 8004204:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004208:	f7fe f870 	bl	80022ec <HAL_GetTick>
 800420c:	0002      	movs	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e046      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800421a:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	049b      	lsls	r3, r3, #18
 8004222:	4013      	ands	r3, r2
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004226:	4b22      	ldr	r3, [pc, #136]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 800422c:	4926      	ldr	r1, [pc, #152]	; (80042c8 <HAL_RCC_OscConfig+0x630>)
 800422e:	400a      	ands	r2, r1
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	e038      	b.n	80042a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e033      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <HAL_RCC_OscConfig+0x618>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2203      	movs	r2, #3
 800424a:	401a      	ands	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	429a      	cmp	r2, r3
 8004252:	d126      	bne.n	80042a2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2270      	movs	r2, #112	; 0x70
 8004258:	401a      	ands	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d11f      	bne.n	80042a2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	23fe      	movs	r3, #254	; 0xfe
 8004266:	01db      	lsls	r3, r3, #7
 8004268:	401a      	ands	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d116      	bne.n	80042a2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	23f8      	movs	r3, #248	; 0xf8
 8004278:	039b      	lsls	r3, r3, #14
 800427a:	401a      	ands	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d10e      	bne.n	80042a2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	23e0      	movs	r3, #224	; 0xe0
 8004288:	051b      	lsls	r3, r3, #20
 800428a:	401a      	ands	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	0f5b      	lsrs	r3, r3, #29
 8004298:	075a      	lsls	r2, r3, #29
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d001      	beq.n	80042a6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b008      	add	sp, #32
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40007000 	.word	0x40007000
 80042b8:	00001388 	.word	0x00001388
 80042bc:	efffffff 	.word	0xefffffff
 80042c0:	feffffff 	.word	0xfeffffff
 80042c4:	11c1808c 	.word	0x11c1808c
 80042c8:	eefefffc 	.word	0xeefefffc

080042cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0e9      	b.n	80044b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042e0:	4b76      	ldr	r3, [pc, #472]	; (80044bc <HAL_RCC_ClockConfig+0x1f0>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2207      	movs	r2, #7
 80042e6:	4013      	ands	r3, r2
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d91e      	bls.n	800432c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b73      	ldr	r3, [pc, #460]	; (80044bc <HAL_RCC_ClockConfig+0x1f0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2207      	movs	r2, #7
 80042f4:	4393      	bics	r3, r2
 80042f6:	0019      	movs	r1, r3
 80042f8:	4b70      	ldr	r3, [pc, #448]	; (80044bc <HAL_RCC_ClockConfig+0x1f0>)
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004300:	f7fd fff4 	bl	80022ec <HAL_GetTick>
 8004304:	0003      	movs	r3, r0
 8004306:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004308:	e009      	b.n	800431e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430a:	f7fd ffef 	bl	80022ec <HAL_GetTick>
 800430e:	0002      	movs	r2, r0
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	4a6a      	ldr	r2, [pc, #424]	; (80044c0 <HAL_RCC_ClockConfig+0x1f4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e0ca      	b.n	80044b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800431e:	4b67      	ldr	r3, [pc, #412]	; (80044bc <HAL_RCC_ClockConfig+0x1f0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2207      	movs	r2, #7
 8004324:	4013      	ands	r3, r2
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d1ee      	bne.n	800430a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2202      	movs	r2, #2
 8004332:	4013      	ands	r3, r2
 8004334:	d015      	beq.n	8004362 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2204      	movs	r2, #4
 800433c:	4013      	ands	r3, r2
 800433e:	d006      	beq.n	800434e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004340:	4b60      	ldr	r3, [pc, #384]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	4b5f      	ldr	r3, [pc, #380]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 8004346:	21e0      	movs	r1, #224	; 0xe0
 8004348:	01c9      	lsls	r1, r1, #7
 800434a:	430a      	orrs	r2, r1
 800434c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434e:	4b5d      	ldr	r3, [pc, #372]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	4a5d      	ldr	r2, [pc, #372]	; (80044c8 <HAL_RCC_ClockConfig+0x1fc>)
 8004354:	4013      	ands	r3, r2
 8004356:	0019      	movs	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	4b59      	ldr	r3, [pc, #356]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 800435e:	430a      	orrs	r2, r1
 8004360:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2201      	movs	r2, #1
 8004368:	4013      	ands	r3, r2
 800436a:	d057      	beq.n	800441c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d107      	bne.n	8004384 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004374:	4b53      	ldr	r3, [pc, #332]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	2380      	movs	r3, #128	; 0x80
 800437a:	029b      	lsls	r3, r3, #10
 800437c:	4013      	ands	r3, r2
 800437e:	d12b      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e097      	b.n	80044b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d107      	bne.n	800439c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438c:	4b4d      	ldr	r3, [pc, #308]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	049b      	lsls	r3, r3, #18
 8004394:	4013      	ands	r3, r2
 8004396:	d11f      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e08b      	b.n	80044b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d107      	bne.n	80043b4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a4:	4b47      	ldr	r3, [pc, #284]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4013      	ands	r3, r2
 80043ae:	d113      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e07f      	b.n	80044b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d106      	bne.n	80043ca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043bc:	4b41      	ldr	r3, [pc, #260]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 80043be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c0:	2202      	movs	r2, #2
 80043c2:	4013      	ands	r3, r2
 80043c4:	d108      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e074      	b.n	80044b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ca:	4b3e      	ldr	r3, [pc, #248]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 80043cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ce:	2202      	movs	r2, #2
 80043d0:	4013      	ands	r3, r2
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e06d      	b.n	80044b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043d8:	4b3a      	ldr	r3, [pc, #232]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2207      	movs	r2, #7
 80043de:	4393      	bics	r3, r2
 80043e0:	0019      	movs	r1, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	4b37      	ldr	r3, [pc, #220]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 80043e8:	430a      	orrs	r2, r1
 80043ea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ec:	f7fd ff7e 	bl	80022ec <HAL_GetTick>
 80043f0:	0003      	movs	r3, r0
 80043f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f4:	e009      	b.n	800440a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f6:	f7fd ff79 	bl	80022ec <HAL_GetTick>
 80043fa:	0002      	movs	r2, r0
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	4a2f      	ldr	r2, [pc, #188]	; (80044c0 <HAL_RCC_ClockConfig+0x1f4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e054      	b.n	80044b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	4b2e      	ldr	r3, [pc, #184]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2238      	movs	r2, #56	; 0x38
 8004410:	401a      	ands	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	429a      	cmp	r2, r3
 800441a:	d1ec      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800441c:	4b27      	ldr	r3, [pc, #156]	; (80044bc <HAL_RCC_ClockConfig+0x1f0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2207      	movs	r2, #7
 8004422:	4013      	ands	r3, r2
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d21e      	bcs.n	8004468 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b24      	ldr	r3, [pc, #144]	; (80044bc <HAL_RCC_ClockConfig+0x1f0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2207      	movs	r2, #7
 8004430:	4393      	bics	r3, r2
 8004432:	0019      	movs	r1, r3
 8004434:	4b21      	ldr	r3, [pc, #132]	; (80044bc <HAL_RCC_ClockConfig+0x1f0>)
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800443c:	f7fd ff56 	bl	80022ec <HAL_GetTick>
 8004440:	0003      	movs	r3, r0
 8004442:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004444:	e009      	b.n	800445a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004446:	f7fd ff51 	bl	80022ec <HAL_GetTick>
 800444a:	0002      	movs	r2, r0
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	4a1b      	ldr	r2, [pc, #108]	; (80044c0 <HAL_RCC_ClockConfig+0x1f4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d901      	bls.n	800445a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e02c      	b.n	80044b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800445a:	4b18      	ldr	r3, [pc, #96]	; (80044bc <HAL_RCC_ClockConfig+0x1f0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2207      	movs	r2, #7
 8004460:	4013      	ands	r3, r2
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d1ee      	bne.n	8004446 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2204      	movs	r2, #4
 800446e:	4013      	ands	r3, r2
 8004470:	d009      	beq.n	8004486 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004472:	4b14      	ldr	r3, [pc, #80]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	4a15      	ldr	r2, [pc, #84]	; (80044cc <HAL_RCC_ClockConfig+0x200>)
 8004478:	4013      	ands	r3, r2
 800447a:	0019      	movs	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 8004482:	430a      	orrs	r2, r1
 8004484:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004486:	f000 f829 	bl	80044dc <HAL_RCC_GetSysClockFreq>
 800448a:	0001      	movs	r1, r0
 800448c:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <HAL_RCC_ClockConfig+0x1f8>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	220f      	movs	r2, #15
 8004494:	401a      	ands	r2, r3
 8004496:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <HAL_RCC_ClockConfig+0x204>)
 8004498:	0092      	lsls	r2, r2, #2
 800449a:	58d3      	ldr	r3, [r2, r3]
 800449c:	221f      	movs	r2, #31
 800449e:	4013      	ands	r3, r2
 80044a0:	000a      	movs	r2, r1
 80044a2:	40da      	lsrs	r2, r3
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <HAL_RCC_ClockConfig+0x208>)
 80044a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_RCC_ClockConfig+0x20c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	0018      	movs	r0, r3
 80044ae:	f7fd fec1 	bl	8002234 <HAL_InitTick>
 80044b2:	0003      	movs	r3, r0
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b004      	add	sp, #16
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40022000 	.word	0x40022000
 80044c0:	00001388 	.word	0x00001388
 80044c4:	40021000 	.word	0x40021000
 80044c8:	fffff0ff 	.word	0xfffff0ff
 80044cc:	ffff8fff 	.word	0xffff8fff
 80044d0:	080068c8 	.word	0x080068c8
 80044d4:	20000000 	.word	0x20000000
 80044d8:	20000004 	.word	0x20000004

080044dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044e2:	4b3c      	ldr	r3, [pc, #240]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2238      	movs	r2, #56	; 0x38
 80044e8:	4013      	ands	r3, r2
 80044ea:	d10f      	bne.n	800450c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80044ec:	4b39      	ldr	r3, [pc, #228]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	0adb      	lsrs	r3, r3, #11
 80044f2:	2207      	movs	r2, #7
 80044f4:	4013      	ands	r3, r2
 80044f6:	2201      	movs	r2, #1
 80044f8:	409a      	lsls	r2, r3
 80044fa:	0013      	movs	r3, r2
 80044fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80044fe:	6839      	ldr	r1, [r7, #0]
 8004500:	4835      	ldr	r0, [pc, #212]	; (80045d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004502:	f7fb fe01 	bl	8000108 <__udivsi3>
 8004506:	0003      	movs	r3, r0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	e05d      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800450c:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2238      	movs	r2, #56	; 0x38
 8004512:	4013      	ands	r3, r2
 8004514:	2b08      	cmp	r3, #8
 8004516:	d102      	bne.n	800451e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004518:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	e054      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800451e:	4b2d      	ldr	r3, [pc, #180]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2238      	movs	r2, #56	; 0x38
 8004524:	4013      	ands	r3, r2
 8004526:	2b10      	cmp	r3, #16
 8004528:	d138      	bne.n	800459c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800452a:	4b2a      	ldr	r3, [pc, #168]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2203      	movs	r2, #3
 8004530:	4013      	ands	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004534:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	091b      	lsrs	r3, r3, #4
 800453a:	2207      	movs	r2, #7
 800453c:	4013      	ands	r3, r2
 800453e:	3301      	adds	r3, #1
 8004540:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b03      	cmp	r3, #3
 8004546:	d10d      	bne.n	8004564 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	4823      	ldr	r0, [pc, #140]	; (80045d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800454c:	f7fb fddc 	bl	8000108 <__udivsi3>
 8004550:	0003      	movs	r3, r0
 8004552:	0019      	movs	r1, r3
 8004554:	4b1f      	ldr	r3, [pc, #124]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	0a1b      	lsrs	r3, r3, #8
 800455a:	227f      	movs	r2, #127	; 0x7f
 800455c:	4013      	ands	r3, r2
 800455e:	434b      	muls	r3, r1
 8004560:	617b      	str	r3, [r7, #20]
        break;
 8004562:	e00d      	b.n	8004580 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	481c      	ldr	r0, [pc, #112]	; (80045d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004568:	f7fb fdce 	bl	8000108 <__udivsi3>
 800456c:	0003      	movs	r3, r0
 800456e:	0019      	movs	r1, r3
 8004570:	4b18      	ldr	r3, [pc, #96]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	0a1b      	lsrs	r3, r3, #8
 8004576:	227f      	movs	r2, #127	; 0x7f
 8004578:	4013      	ands	r3, r2
 800457a:	434b      	muls	r3, r1
 800457c:	617b      	str	r3, [r7, #20]
        break;
 800457e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004580:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	0f5b      	lsrs	r3, r3, #29
 8004586:	2207      	movs	r2, #7
 8004588:	4013      	ands	r3, r2
 800458a:	3301      	adds	r3, #1
 800458c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	6978      	ldr	r0, [r7, #20]
 8004592:	f7fb fdb9 	bl	8000108 <__udivsi3>
 8004596:	0003      	movs	r3, r0
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	e015      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800459c:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2238      	movs	r2, #56	; 0x38
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d103      	bne.n	80045b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80045b0:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2238      	movs	r2, #56	; 0x38
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b18      	cmp	r3, #24
 80045ba:	d103      	bne.n	80045c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80045bc:	23fa      	movs	r3, #250	; 0xfa
 80045be:	01db      	lsls	r3, r3, #7
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	e001      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80045c8:	693b      	ldr	r3, [r7, #16]
}
 80045ca:	0018      	movs	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b006      	add	sp, #24
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	40021000 	.word	0x40021000
 80045d8:	00f42400 	.word	0x00f42400

080045dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e0:	4b02      	ldr	r3, [pc, #8]	; (80045ec <HAL_RCC_GetHCLKFreq+0x10>)
 80045e2:	681b      	ldr	r3, [r3, #0]
}
 80045e4:	0018      	movs	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	20000000 	.word	0x20000000

080045f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f0:	b5b0      	push	{r4, r5, r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80045f4:	f7ff fff2 	bl	80045dc <HAL_RCC_GetHCLKFreq>
 80045f8:	0004      	movs	r4, r0
 80045fa:	f7ff fb41 	bl	8003c80 <LL_RCC_GetAPB1Prescaler>
 80045fe:	0003      	movs	r3, r0
 8004600:	0b1a      	lsrs	r2, r3, #12
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004604:	0092      	lsls	r2, r2, #2
 8004606:	58d3      	ldr	r3, [r2, r3]
 8004608:	221f      	movs	r2, #31
 800460a:	4013      	ands	r3, r2
 800460c:	40dc      	lsrs	r4, r3
 800460e:	0023      	movs	r3, r4
}
 8004610:	0018      	movs	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	bdb0      	pop	{r4, r5, r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	08006908 	.word	0x08006908

0800461c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004624:	2313      	movs	r3, #19
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800462c:	2312      	movs	r3, #18
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	2200      	movs	r2, #0
 8004632:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	029b      	lsls	r3, r3, #10
 800463c:	4013      	ands	r3, r2
 800463e:	d100      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004640:	e0a3      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004642:	2011      	movs	r0, #17
 8004644:	183b      	adds	r3, r7, r0
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464a:	4bc2      	ldr	r3, [pc, #776]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800464c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800464e:	2380      	movs	r3, #128	; 0x80
 8004650:	055b      	lsls	r3, r3, #21
 8004652:	4013      	ands	r3, r2
 8004654:	d110      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004656:	4bbf      	ldr	r3, [pc, #764]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800465a:	4bbe      	ldr	r3, [pc, #760]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800465c:	2180      	movs	r1, #128	; 0x80
 800465e:	0549      	lsls	r1, r1, #21
 8004660:	430a      	orrs	r2, r1
 8004662:	63da      	str	r2, [r3, #60]	; 0x3c
 8004664:	4bbb      	ldr	r3, [pc, #748]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	055b      	lsls	r3, r3, #21
 800466c:	4013      	ands	r3, r2
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004672:	183b      	adds	r3, r7, r0
 8004674:	2201      	movs	r2, #1
 8004676:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004678:	4bb7      	ldr	r3, [pc, #732]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4bb6      	ldr	r3, [pc, #728]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800467e:	2180      	movs	r1, #128	; 0x80
 8004680:	0049      	lsls	r1, r1, #1
 8004682:	430a      	orrs	r2, r1
 8004684:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004686:	f7fd fe31 	bl	80022ec <HAL_GetTick>
 800468a:	0003      	movs	r3, r0
 800468c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800468e:	e00b      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004690:	f7fd fe2c 	bl	80022ec <HAL_GetTick>
 8004694:	0002      	movs	r2, r0
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d904      	bls.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800469e:	2313      	movs	r3, #19
 80046a0:	18fb      	adds	r3, r7, r3
 80046a2:	2203      	movs	r2, #3
 80046a4:	701a      	strb	r2, [r3, #0]
        break;
 80046a6:	e005      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046a8:	4bab      	ldr	r3, [pc, #684]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	2380      	movs	r3, #128	; 0x80
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	4013      	ands	r3, r2
 80046b2:	d0ed      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80046b4:	2313      	movs	r3, #19
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d154      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046be:	4ba5      	ldr	r3, [pc, #660]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046c2:	23c0      	movs	r3, #192	; 0xc0
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4013      	ands	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d019      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d014      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046da:	4b9e      	ldr	r3, [pc, #632]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046de:	4a9f      	ldr	r2, [pc, #636]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046e4:	4b9b      	ldr	r3, [pc, #620]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046e8:	4b9a      	ldr	r3, [pc, #616]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ea:	2180      	movs	r1, #128	; 0x80
 80046ec:	0249      	lsls	r1, r1, #9
 80046ee:	430a      	orrs	r2, r1
 80046f0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046f2:	4b98      	ldr	r3, [pc, #608]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046f6:	4b97      	ldr	r3, [pc, #604]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046f8:	4999      	ldr	r1, [pc, #612]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80046fa:	400a      	ands	r2, r1
 80046fc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046fe:	4b95      	ldr	r3, [pc, #596]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2201      	movs	r2, #1
 8004708:	4013      	ands	r3, r2
 800470a:	d016      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fd fdee 	bl	80022ec <HAL_GetTick>
 8004710:	0003      	movs	r3, r0
 8004712:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004714:	e00c      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004716:	f7fd fde9 	bl	80022ec <HAL_GetTick>
 800471a:	0002      	movs	r2, r0
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	4a90      	ldr	r2, [pc, #576]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d904      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004726:	2313      	movs	r3, #19
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	2203      	movs	r2, #3
 800472c:	701a      	strb	r2, [r3, #0]
            break;
 800472e:	e004      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004730:	4b88      	ldr	r3, [pc, #544]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004734:	2202      	movs	r2, #2
 8004736:	4013      	ands	r3, r2
 8004738:	d0ed      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800473a:	2313      	movs	r3, #19
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004744:	4b83      	ldr	r3, [pc, #524]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004748:	4a84      	ldr	r2, [pc, #528]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800474a:	4013      	ands	r3, r2
 800474c:	0019      	movs	r1, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004752:	4b80      	ldr	r3, [pc, #512]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004754:	430a      	orrs	r2, r1
 8004756:	65da      	str	r2, [r3, #92]	; 0x5c
 8004758:	e00c      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800475a:	2312      	movs	r3, #18
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	2213      	movs	r2, #19
 8004760:	18ba      	adds	r2, r7, r2
 8004762:	7812      	ldrb	r2, [r2, #0]
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e005      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004768:	2312      	movs	r3, #18
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	2213      	movs	r2, #19
 800476e:	18ba      	adds	r2, r7, r2
 8004770:	7812      	ldrb	r2, [r2, #0]
 8004772:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004774:	2311      	movs	r3, #17
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d105      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477e:	4b75      	ldr	r3, [pc, #468]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004782:	4b74      	ldr	r3, [pc, #464]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004784:	4978      	ldr	r1, [pc, #480]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004786:	400a      	ands	r2, r1
 8004788:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2201      	movs	r2, #1
 8004790:	4013      	ands	r3, r2
 8004792:	d009      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004794:	4b6f      	ldr	r3, [pc, #444]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004798:	2203      	movs	r2, #3
 800479a:	4393      	bics	r3, r2
 800479c:	0019      	movs	r1, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	4b6c      	ldr	r3, [pc, #432]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047a4:	430a      	orrs	r2, r1
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2210      	movs	r2, #16
 80047ae:	4013      	ands	r3, r2
 80047b0:	d009      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047b2:	4b68      	ldr	r3, [pc, #416]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	4a6d      	ldr	r2, [pc, #436]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	0019      	movs	r1, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	4b64      	ldr	r3, [pc, #400]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047c2:	430a      	orrs	r2, r1
 80047c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	2380      	movs	r3, #128	; 0x80
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4013      	ands	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047d2:	4b60      	ldr	r3, [pc, #384]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d6:	4a66      	ldr	r2, [pc, #408]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80047d8:	4013      	ands	r3, r2
 80047da:	0019      	movs	r1, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	4b5c      	ldr	r3, [pc, #368]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047e2:	430a      	orrs	r2, r1
 80047e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	2380      	movs	r3, #128	; 0x80
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4013      	ands	r3, r2
 80047f0:	d009      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047f2:	4b58      	ldr	r3, [pc, #352]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	4a5f      	ldr	r2, [pc, #380]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	0019      	movs	r1, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	4b54      	ldr	r3, [pc, #336]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004802:	430a      	orrs	r2, r1
 8004804:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2220      	movs	r2, #32
 800480c:	4013      	ands	r3, r2
 800480e:	d009      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004810:	4b50      	ldr	r3, [pc, #320]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004814:	4a58      	ldr	r2, [pc, #352]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004816:	4013      	ands	r3, r2
 8004818:	0019      	movs	r1, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	4b4d      	ldr	r3, [pc, #308]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004820:	430a      	orrs	r2, r1
 8004822:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	02db      	lsls	r3, r3, #11
 800482c:	4013      	ands	r3, r2
 800482e:	d016      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004830:	4b48      	ldr	r3, [pc, #288]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	4a51      	ldr	r2, [pc, #324]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004836:	4013      	ands	r3, r2
 8004838:	0019      	movs	r1, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	4b45      	ldr	r3, [pc, #276]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004840:	430a      	orrs	r2, r1
 8004842:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	23c0      	movs	r3, #192	; 0xc0
 800484a:	051b      	lsls	r3, r3, #20
 800484c:	429a      	cmp	r2, r3
 800484e:	d106      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004850:	4b40      	ldr	r3, [pc, #256]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004856:	2180      	movs	r1, #128	; 0x80
 8004858:	0449      	lsls	r1, r1, #17
 800485a:	430a      	orrs	r2, r1
 800485c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	01db      	lsls	r3, r3, #7
 8004866:	4013      	ands	r3, r2
 8004868:	d015      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800486a:	4b3a      	ldr	r3, [pc, #232]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	0899      	lsrs	r1, r3, #2
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1a      	ldr	r2, [r3, #32]
 8004876:	4b37      	ldr	r3, [pc, #220]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004878:	430a      	orrs	r2, r1
 800487a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1a      	ldr	r2, [r3, #32]
 8004880:	2380      	movs	r3, #128	; 0x80
 8004882:	05db      	lsls	r3, r3, #23
 8004884:	429a      	cmp	r2, r3
 8004886:	d106      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004888:	4b32      	ldr	r3, [pc, #200]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	4b31      	ldr	r3, [pc, #196]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800488e:	2180      	movs	r1, #128	; 0x80
 8004890:	0249      	lsls	r1, r1, #9
 8004892:	430a      	orrs	r2, r1
 8004894:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	039b      	lsls	r3, r3, #14
 800489e:	4013      	ands	r3, r2
 80048a0:	d016      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048a2:	4b2c      	ldr	r3, [pc, #176]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	4a36      	ldr	r2, [pc, #216]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	0019      	movs	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b0:	4b28      	ldr	r3, [pc, #160]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048b2:	430a      	orrs	r2, r1
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ba:	2380      	movs	r3, #128	; 0x80
 80048bc:	03db      	lsls	r3, r3, #15
 80048be:	429a      	cmp	r2, r3
 80048c0:	d106      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80048c2:	4b24      	ldr	r3, [pc, #144]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	4b23      	ldr	r3, [pc, #140]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048c8:	2180      	movs	r1, #128	; 0x80
 80048ca:	0449      	lsls	r1, r1, #17
 80048cc:	430a      	orrs	r2, r1
 80048ce:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	03db      	lsls	r3, r3, #15
 80048d8:	4013      	ands	r3, r2
 80048da:	d016      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80048dc:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e0:	4a28      	ldr	r2, [pc, #160]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	0019      	movs	r1, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ea:	4b1a      	ldr	r3, [pc, #104]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048ec:	430a      	orrs	r2, r1
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f4:	2380      	movs	r3, #128	; 0x80
 80048f6:	045b      	lsls	r3, r3, #17
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d106      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80048fc:	4b15      	ldr	r3, [pc, #84]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	4b14      	ldr	r3, [pc, #80]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004902:	2180      	movs	r1, #128	; 0x80
 8004904:	0449      	lsls	r1, r1, #17
 8004906:	430a      	orrs	r2, r1
 8004908:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	4013      	ands	r3, r2
 8004914:	d016      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004916:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491a:	4a1b      	ldr	r2, [pc, #108]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800491c:	4013      	ands	r3, r2
 800491e:	0019      	movs	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004926:	430a      	orrs	r2, r1
 8004928:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	2380      	movs	r3, #128	; 0x80
 8004930:	01db      	lsls	r3, r3, #7
 8004932:	429a      	cmp	r2, r3
 8004934:	d106      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004936:	4b07      	ldr	r3, [pc, #28]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800493c:	2180      	movs	r1, #128	; 0x80
 800493e:	0249      	lsls	r1, r1, #9
 8004940:	430a      	orrs	r2, r1
 8004942:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004944:	2312      	movs	r3, #18
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	781b      	ldrb	r3, [r3, #0]
}
 800494a:	0018      	movs	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	b006      	add	sp, #24
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	40021000 	.word	0x40021000
 8004958:	40007000 	.word	0x40007000
 800495c:	fffffcff 	.word	0xfffffcff
 8004960:	fffeffff 	.word	0xfffeffff
 8004964:	00001388 	.word	0x00001388
 8004968:	efffffff 	.word	0xefffffff
 800496c:	fffff3ff 	.word	0xfffff3ff
 8004970:	fff3ffff 	.word	0xfff3ffff
 8004974:	ffcfffff 	.word	0xffcfffff
 8004978:	ffffcfff 	.word	0xffffcfff
 800497c:	f3ffffff 	.word	0xf3ffffff
 8004980:	ffbfffff 	.word	0xffbfffff
 8004984:	feffffff 	.word	0xfeffffff
 8004988:	ffff3fff 	.word	0xffff3fff

0800498c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e0a8      	b.n	8004af0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	2382      	movs	r3, #130	; 0x82
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d009      	beq.n	80049c6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	61da      	str	r2, [r3, #28]
 80049b8:	e005      	b.n	80049c6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	225d      	movs	r2, #93	; 0x5d
 80049d0:	5c9b      	ldrb	r3, [r3, r2]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d107      	bne.n	80049e8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	225c      	movs	r2, #92	; 0x5c
 80049dc:	2100      	movs	r1, #0
 80049de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	0018      	movs	r0, r3
 80049e4:	f7fd f9d8 	bl	8001d98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	225d      	movs	r2, #93	; 0x5d
 80049ec:	2102      	movs	r1, #2
 80049ee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2140      	movs	r1, #64	; 0x40
 80049fc:	438a      	bics	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	23e0      	movs	r3, #224	; 0xe0
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d902      	bls.n	8004a12 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	e002      	b.n	8004a18 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	015b      	lsls	r3, r3, #5
 8004a16:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	23f0      	movs	r3, #240	; 0xf0
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d008      	beq.n	8004a36 <HAL_SPI_Init+0xaa>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	23e0      	movs	r3, #224	; 0xe0
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d002      	beq.n	8004a36 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	2382      	movs	r3, #130	; 0x82
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	401a      	ands	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6899      	ldr	r1, [r3, #8]
 8004a44:	2384      	movs	r3, #132	; 0x84
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	400b      	ands	r3, r1
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2102      	movs	r1, #2
 8004a52:	400b      	ands	r3, r1
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	400b      	ands	r3, r1
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6999      	ldr	r1, [r3, #24]
 8004a64:	2380      	movs	r3, #128	; 0x80
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	400b      	ands	r3, r1
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	2138      	movs	r1, #56	; 0x38
 8004a72:	400b      	ands	r3, r1
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	2180      	movs	r1, #128	; 0x80
 8004a7c:	400b      	ands	r3, r1
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	0011      	movs	r1, r2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a86:	2380      	movs	r3, #128	; 0x80
 8004a88:	019b      	lsls	r3, r3, #6
 8004a8a:	401a      	ands	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	401a      	ands	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2110      	movs	r1, #16
 8004aa4:	400b      	ands	r3, r1
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aac:	2108      	movs	r1, #8
 8004aae:	400b      	ands	r3, r1
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68d9      	ldr	r1, [r3, #12]
 8004ab6:	23f0      	movs	r3, #240	; 0xf0
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	400b      	ands	r3, r1
 8004abc:	431a      	orrs	r2, r3
 8004abe:	0011      	movs	r1, r2
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	015b      	lsls	r3, r3, #5
 8004ac6:	401a      	ands	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4907      	ldr	r1, [pc, #28]	; (8004af8 <HAL_SPI_Init+0x16c>)
 8004adc:	400a      	ands	r2, r1
 8004ade:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	225d      	movs	r2, #93	; 0x5d
 8004aea:	2101      	movs	r1, #1
 8004aec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	0018      	movs	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b004      	add	sp, #16
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	fffff7ff 	.word	0xfffff7ff

08004afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e04a      	b.n	8004ba4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	223d      	movs	r2, #61	; 0x3d
 8004b12:	5c9b      	ldrb	r3, [r3, r2]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d107      	bne.n	8004b2a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	223c      	movs	r2, #60	; 0x3c
 8004b1e:	2100      	movs	r1, #0
 8004b20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f7fd f9cd 	bl	8001ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	223d      	movs	r2, #61	; 0x3d
 8004b2e:	2102      	movs	r1, #2
 8004b30:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	0019      	movs	r1, r3
 8004b3c:	0010      	movs	r0, r2
 8004b3e:	f000 fc25 	bl	800538c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2248      	movs	r2, #72	; 0x48
 8004b46:	2101      	movs	r1, #1
 8004b48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	223e      	movs	r2, #62	; 0x3e
 8004b4e:	2101      	movs	r1, #1
 8004b50:	5499      	strb	r1, [r3, r2]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	223f      	movs	r2, #63	; 0x3f
 8004b56:	2101      	movs	r1, #1
 8004b58:	5499      	strb	r1, [r3, r2]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2240      	movs	r2, #64	; 0x40
 8004b5e:	2101      	movs	r1, #1
 8004b60:	5499      	strb	r1, [r3, r2]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2241      	movs	r2, #65	; 0x41
 8004b66:	2101      	movs	r1, #1
 8004b68:	5499      	strb	r1, [r3, r2]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2242      	movs	r2, #66	; 0x42
 8004b6e:	2101      	movs	r1, #1
 8004b70:	5499      	strb	r1, [r3, r2]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2243      	movs	r2, #67	; 0x43
 8004b76:	2101      	movs	r1, #1
 8004b78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2244      	movs	r2, #68	; 0x44
 8004b7e:	2101      	movs	r1, #1
 8004b80:	5499      	strb	r1, [r3, r2]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2245      	movs	r2, #69	; 0x45
 8004b86:	2101      	movs	r1, #1
 8004b88:	5499      	strb	r1, [r3, r2]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2246      	movs	r2, #70	; 0x46
 8004b8e:	2101      	movs	r1, #1
 8004b90:	5499      	strb	r1, [r3, r2]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2247      	movs	r2, #71	; 0x47
 8004b96:	2101      	movs	r1, #1
 8004b98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	223d      	movs	r2, #61	; 0x3d
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b002      	add	sp, #8
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	223d      	movs	r2, #61	; 0x3d
 8004bb8:	5c9b      	ldrb	r3, [r3, r2]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d001      	beq.n	8004bc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e042      	b.n	8004c4a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	223d      	movs	r2, #61	; 0x3d
 8004bc8:	2102      	movs	r1, #2
 8004bca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1c      	ldr	r2, [pc, #112]	; (8004c54 <HAL_TIM_Base_Start_IT+0xa8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00f      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x5a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	05db      	lsls	r3, r3, #23
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d009      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x5a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <HAL_TIM_Base_Start_IT+0xac>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x5a>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a16      	ldr	r2, [pc, #88]	; (8004c5c <HAL_TIM_Base_Start_IT+0xb0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d116      	bne.n	8004c34 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a14      	ldr	r2, [pc, #80]	; (8004c60 <HAL_TIM_Base_Start_IT+0xb4>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b06      	cmp	r3, #6
 8004c16:	d016      	beq.n	8004c46 <HAL_TIM_Base_Start_IT+0x9a>
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	025b      	lsls	r3, r3, #9
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d011      	beq.n	8004c46 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c32:	e008      	b.n	8004c46 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2101      	movs	r1, #1
 8004c40:	430a      	orrs	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	e000      	b.n	8004c48 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c46:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b004      	add	sp, #16
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	00010007 	.word	0x00010007

08004c64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e04a      	b.n	8004d0c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	223d      	movs	r2, #61	; 0x3d
 8004c7a:	5c9b      	ldrb	r3, [r3, r2]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d107      	bne.n	8004c92 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	223c      	movs	r2, #60	; 0x3c
 8004c86:	2100      	movs	r1, #0
 8004c88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7fd f8cf 	bl	8001e30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	223d      	movs	r2, #61	; 0x3d
 8004c96:	2102      	movs	r1, #2
 8004c98:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	0019      	movs	r1, r3
 8004ca4:	0010      	movs	r0, r2
 8004ca6:	f000 fb71 	bl	800538c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2248      	movs	r2, #72	; 0x48
 8004cae:	2101      	movs	r1, #1
 8004cb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	223e      	movs	r2, #62	; 0x3e
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	5499      	strb	r1, [r3, r2]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	223f      	movs	r2, #63	; 0x3f
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	5499      	strb	r1, [r3, r2]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2240      	movs	r2, #64	; 0x40
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	5499      	strb	r1, [r3, r2]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2241      	movs	r2, #65	; 0x41
 8004cce:	2101      	movs	r1, #1
 8004cd0:	5499      	strb	r1, [r3, r2]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2242      	movs	r2, #66	; 0x42
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	5499      	strb	r1, [r3, r2]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2243      	movs	r2, #67	; 0x43
 8004cde:	2101      	movs	r1, #1
 8004ce0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2244      	movs	r2, #68	; 0x44
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	5499      	strb	r1, [r3, r2]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2245      	movs	r2, #69	; 0x45
 8004cee:	2101      	movs	r1, #1
 8004cf0:	5499      	strb	r1, [r3, r2]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2246      	movs	r2, #70	; 0x46
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	5499      	strb	r1, [r3, r2]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2247      	movs	r2, #71	; 0x47
 8004cfe:	2101      	movs	r1, #1
 8004d00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	223d      	movs	r2, #61	; 0x3d
 8004d06:	2101      	movs	r1, #1
 8004d08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b002      	add	sp, #8
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d108      	bne.n	8004d36 <HAL_TIM_PWM_Start+0x22>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	223e      	movs	r2, #62	; 0x3e
 8004d28:	5c9b      	ldrb	r3, [r3, r2]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	1e5a      	subs	r2, r3, #1
 8004d30:	4193      	sbcs	r3, r2
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	e037      	b.n	8004da6 <HAL_TIM_PWM_Start+0x92>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d108      	bne.n	8004d4e <HAL_TIM_PWM_Start+0x3a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	223f      	movs	r2, #63	; 0x3f
 8004d40:	5c9b      	ldrb	r3, [r3, r2]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	1e5a      	subs	r2, r3, #1
 8004d48:	4193      	sbcs	r3, r2
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	e02b      	b.n	8004da6 <HAL_TIM_PWM_Start+0x92>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d108      	bne.n	8004d66 <HAL_TIM_PWM_Start+0x52>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2240      	movs	r2, #64	; 0x40
 8004d58:	5c9b      	ldrb	r3, [r3, r2]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	1e5a      	subs	r2, r3, #1
 8004d60:	4193      	sbcs	r3, r2
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	e01f      	b.n	8004da6 <HAL_TIM_PWM_Start+0x92>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b0c      	cmp	r3, #12
 8004d6a:	d108      	bne.n	8004d7e <HAL_TIM_PWM_Start+0x6a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2241      	movs	r2, #65	; 0x41
 8004d70:	5c9b      	ldrb	r3, [r3, r2]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	1e5a      	subs	r2, r3, #1
 8004d78:	4193      	sbcs	r3, r2
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	e013      	b.n	8004da6 <HAL_TIM_PWM_Start+0x92>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d108      	bne.n	8004d96 <HAL_TIM_PWM_Start+0x82>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2242      	movs	r2, #66	; 0x42
 8004d88:	5c9b      	ldrb	r3, [r3, r2]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	1e5a      	subs	r2, r3, #1
 8004d90:	4193      	sbcs	r3, r2
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	e007      	b.n	8004da6 <HAL_TIM_PWM_Start+0x92>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2243      	movs	r2, #67	; 0x43
 8004d9a:	5c9b      	ldrb	r3, [r3, r2]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	1e5a      	subs	r2, r3, #1
 8004da2:	4193      	sbcs	r3, r2
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e08b      	b.n	8004ec6 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_PWM_Start+0xaa>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	223e      	movs	r2, #62	; 0x3e
 8004db8:	2102      	movs	r1, #2
 8004dba:	5499      	strb	r1, [r3, r2]
 8004dbc:	e023      	b.n	8004e06 <HAL_TIM_PWM_Start+0xf2>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_PWM_Start+0xba>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	223f      	movs	r2, #63	; 0x3f
 8004dc8:	2102      	movs	r1, #2
 8004dca:	5499      	strb	r1, [r3, r2]
 8004dcc:	e01b      	b.n	8004e06 <HAL_TIM_PWM_Start+0xf2>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_PWM_Start+0xca>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2240      	movs	r2, #64	; 0x40
 8004dd8:	2102      	movs	r1, #2
 8004dda:	5499      	strb	r1, [r3, r2]
 8004ddc:	e013      	b.n	8004e06 <HAL_TIM_PWM_Start+0xf2>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b0c      	cmp	r3, #12
 8004de2:	d104      	bne.n	8004dee <HAL_TIM_PWM_Start+0xda>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2241      	movs	r2, #65	; 0x41
 8004de8:	2102      	movs	r1, #2
 8004dea:	5499      	strb	r1, [r3, r2]
 8004dec:	e00b      	b.n	8004e06 <HAL_TIM_PWM_Start+0xf2>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b10      	cmp	r3, #16
 8004df2:	d104      	bne.n	8004dfe <HAL_TIM_PWM_Start+0xea>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2242      	movs	r2, #66	; 0x42
 8004df8:	2102      	movs	r1, #2
 8004dfa:	5499      	strb	r1, [r3, r2]
 8004dfc:	e003      	b.n	8004e06 <HAL_TIM_PWM_Start+0xf2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2243      	movs	r2, #67	; 0x43
 8004e02:	2102      	movs	r1, #2
 8004e04:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6839      	ldr	r1, [r7, #0]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f000 fe00 	bl	8005a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a2d      	ldr	r2, [pc, #180]	; (8004ed0 <HAL_TIM_PWM_Start+0x1bc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00e      	beq.n	8004e3c <HAL_TIM_PWM_Start+0x128>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a2c      	ldr	r2, [pc, #176]	; (8004ed4 <HAL_TIM_PWM_Start+0x1c0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d009      	beq.n	8004e3c <HAL_TIM_PWM_Start+0x128>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a2a      	ldr	r2, [pc, #168]	; (8004ed8 <HAL_TIM_PWM_Start+0x1c4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_TIM_PWM_Start+0x128>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a29      	ldr	r2, [pc, #164]	; (8004edc <HAL_TIM_PWM_Start+0x1c8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIM_PWM_Start+0x12c>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <HAL_TIM_PWM_Start+0x12e>
 8004e40:	2300      	movs	r3, #0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2180      	movs	r1, #128	; 0x80
 8004e52:	0209      	lsls	r1, r1, #8
 8004e54:	430a      	orrs	r2, r1
 8004e56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <HAL_TIM_PWM_Start+0x1bc>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00f      	beq.n	8004e82 <HAL_TIM_PWM_Start+0x16e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	05db      	lsls	r3, r3, #23
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d009      	beq.n	8004e82 <HAL_TIM_PWM_Start+0x16e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <HAL_TIM_PWM_Start+0x1cc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_TIM_PWM_Start+0x16e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a15      	ldr	r2, [pc, #84]	; (8004ed4 <HAL_TIM_PWM_Start+0x1c0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d116      	bne.n	8004eb0 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a16      	ldr	r2, [pc, #88]	; (8004ee4 <HAL_TIM_PWM_Start+0x1d0>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b06      	cmp	r3, #6
 8004e92:	d016      	beq.n	8004ec2 <HAL_TIM_PWM_Start+0x1ae>
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	025b      	lsls	r3, r3, #9
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d011      	beq.n	8004ec2 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eae:	e008      	b.n	8004ec2 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2101      	movs	r1, #1
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	e000      	b.n	8004ec4 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b004      	add	sp, #16
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	00010007 	.word	0x00010007

08004ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d124      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	2202      	movs	r2, #2
 8004f06:	4013      	ands	r3, r2
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d11d      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2203      	movs	r2, #3
 8004f12:	4252      	negs	r2, r2
 8004f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2203      	movs	r2, #3
 8004f24:	4013      	ands	r3, r2
 8004f26:	d004      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f000 fa16 	bl	800535c <HAL_TIM_IC_CaptureCallback>
 8004f30:	e007      	b.n	8004f42 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	0018      	movs	r0, r3
 8004f36:	f000 fa09 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f000 fa15 	bl	800536c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	2204      	movs	r2, #4
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d125      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d11e      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2205      	movs	r2, #5
 8004f6a:	4252      	negs	r2, r2
 8004f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	23c0      	movs	r3, #192	; 0xc0
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4013      	ands	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	0018      	movs	r0, r3
 8004f86:	f000 f9e9 	bl	800535c <HAL_TIM_IC_CaptureCallback>
 8004f8a:	e007      	b.n	8004f9c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f000 f9dc 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	0018      	movs	r0, r3
 8004f98:	f000 f9e8 	bl	800536c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2208      	movs	r2, #8
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d124      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	2208      	movs	r2, #8
 8004fb8:	4013      	ands	r3, r2
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d11d      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2209      	movs	r2, #9
 8004fc4:	4252      	negs	r2, r2
 8004fc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2204      	movs	r2, #4
 8004fcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	d004      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f000 f9bd 	bl	800535c <HAL_TIM_IC_CaptureCallback>
 8004fe2:	e007      	b.n	8004ff4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f000 f9b0 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f000 f9bc 	bl	800536c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2210      	movs	r2, #16
 8005002:	4013      	ands	r3, r2
 8005004:	2b10      	cmp	r3, #16
 8005006:	d125      	bne.n	8005054 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2210      	movs	r2, #16
 8005010:	4013      	ands	r3, r2
 8005012:	2b10      	cmp	r3, #16
 8005014:	d11e      	bne.n	8005054 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2211      	movs	r2, #17
 800501c:	4252      	negs	r2, r2
 800501e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2208      	movs	r2, #8
 8005024:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	23c0      	movs	r3, #192	; 0xc0
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4013      	ands	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	0018      	movs	r0, r3
 8005038:	f000 f990 	bl	800535c <HAL_TIM_IC_CaptureCallback>
 800503c:	e007      	b.n	800504e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	0018      	movs	r0, r3
 8005042:	f000 f983 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	0018      	movs	r0, r3
 800504a:	f000 f98f 	bl	800536c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2201      	movs	r2, #1
 800505c:	4013      	ands	r3, r2
 800505e:	2b01      	cmp	r3, #1
 8005060:	d10f      	bne.n	8005082 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	4013      	ands	r3, r2
 800506c:	2b01      	cmp	r3, #1
 800506e:	d108      	bne.n	8005082 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2202      	movs	r2, #2
 8005076:	4252      	negs	r2, r2
 8005078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	0018      	movs	r0, r3
 800507e:	f7fc fd55 	bl	8001b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2280      	movs	r2, #128	; 0x80
 800508a:	4013      	ands	r3, r2
 800508c:	2b80      	cmp	r3, #128	; 0x80
 800508e:	d10f      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	2280      	movs	r2, #128	; 0x80
 8005098:	4013      	ands	r3, r2
 800509a:	2b80      	cmp	r3, #128	; 0x80
 800509c:	d108      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2281      	movs	r2, #129	; 0x81
 80050a4:	4252      	negs	r2, r2
 80050a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	0018      	movs	r0, r3
 80050ac:	f000 fdf2 	bl	8005c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691a      	ldr	r2, [r3, #16]
 80050b6:	2380      	movs	r3, #128	; 0x80
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	401a      	ands	r2, r3
 80050bc:	2380      	movs	r3, #128	; 0x80
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d10e      	bne.n	80050e2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2280      	movs	r2, #128	; 0x80
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b80      	cmp	r3, #128	; 0x80
 80050d0:	d107      	bne.n	80050e2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1c      	ldr	r2, [pc, #112]	; (8005148 <HAL_TIM_IRQHandler+0x260>)
 80050d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	0018      	movs	r0, r3
 80050de:	f000 fde1 	bl	8005ca4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2240      	movs	r2, #64	; 0x40
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d10f      	bne.n	8005110 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2240      	movs	r2, #64	; 0x40
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b40      	cmp	r3, #64	; 0x40
 80050fc:	d108      	bne.n	8005110 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2241      	movs	r2, #65	; 0x41
 8005104:	4252      	negs	r2, r2
 8005106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	0018      	movs	r0, r3
 800510c:	f000 f936 	bl	800537c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2220      	movs	r2, #32
 8005118:	4013      	ands	r3, r2
 800511a:	2b20      	cmp	r3, #32
 800511c:	d10f      	bne.n	800513e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	4013      	ands	r3, r2
 8005128:	2b20      	cmp	r3, #32
 800512a:	d108      	bne.n	800513e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2221      	movs	r2, #33	; 0x21
 8005132:	4252      	negs	r2, r2
 8005134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	0018      	movs	r0, r3
 800513a:	f000 fda3 	bl	8005c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b002      	add	sp, #8
 8005144:	bd80      	pop	{r7, pc}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	fffffeff 	.word	0xfffffeff

0800514c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005158:	2317      	movs	r3, #23
 800515a:	18fb      	adds	r3, r7, r3
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	223c      	movs	r2, #60	; 0x3c
 8005164:	5c9b      	ldrb	r3, [r3, r2]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_TIM_PWM_ConfigChannel+0x22>
 800516a:	2302      	movs	r3, #2
 800516c:	e0e5      	b.n	800533a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	223c      	movs	r2, #60	; 0x3c
 8005172:	2101      	movs	r1, #1
 8005174:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b14      	cmp	r3, #20
 800517a:	d900      	bls.n	800517e <HAL_TIM_PWM_ConfigChannel+0x32>
 800517c:	e0d1      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	009a      	lsls	r2, r3, #2
 8005182:	4b70      	ldr	r3, [pc, #448]	; (8005344 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005184:	18d3      	adds	r3, r2, r3
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	0011      	movs	r1, r2
 8005192:	0018      	movs	r0, r3
 8005194:	f000 f97a 	bl	800548c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2108      	movs	r1, #8
 80051a4:	430a      	orrs	r2, r1
 80051a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2104      	movs	r1, #4
 80051b4:	438a      	bics	r2, r1
 80051b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6999      	ldr	r1, [r3, #24]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	619a      	str	r2, [r3, #24]
      break;
 80051ca:	e0af      	b.n	800532c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	0011      	movs	r1, r2
 80051d4:	0018      	movs	r0, r3
 80051d6:	f000 f9e3 	bl	80055a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699a      	ldr	r2, [r3, #24]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2180      	movs	r1, #128	; 0x80
 80051e6:	0109      	lsls	r1, r1, #4
 80051e8:	430a      	orrs	r2, r1
 80051ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4954      	ldr	r1, [pc, #336]	; (8005348 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80051f8:	400a      	ands	r2, r1
 80051fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6999      	ldr	r1, [r3, #24]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	021a      	lsls	r2, r3, #8
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	619a      	str	r2, [r3, #24]
      break;
 8005210:	e08c      	b.n	800532c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	0011      	movs	r1, r2
 800521a:	0018      	movs	r0, r3
 800521c:	f000 fa44 	bl	80056a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69da      	ldr	r2, [r3, #28]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2108      	movs	r1, #8
 800522c:	430a      	orrs	r2, r1
 800522e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69da      	ldr	r2, [r3, #28]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2104      	movs	r1, #4
 800523c:	438a      	bics	r2, r1
 800523e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69d9      	ldr	r1, [r3, #28]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	691a      	ldr	r2, [r3, #16]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	61da      	str	r2, [r3, #28]
      break;
 8005252:	e06b      	b.n	800532c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	0011      	movs	r1, r2
 800525c:	0018      	movs	r0, r3
 800525e:	f000 faab 	bl	80057b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69da      	ldr	r2, [r3, #28]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2180      	movs	r1, #128	; 0x80
 800526e:	0109      	lsls	r1, r1, #4
 8005270:	430a      	orrs	r2, r1
 8005272:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69da      	ldr	r2, [r3, #28]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4932      	ldr	r1, [pc, #200]	; (8005348 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005280:	400a      	ands	r2, r1
 8005282:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69d9      	ldr	r1, [r3, #28]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	021a      	lsls	r2, r3, #8
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	61da      	str	r2, [r3, #28]
      break;
 8005298:	e048      	b.n	800532c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	0011      	movs	r1, r2
 80052a2:	0018      	movs	r0, r3
 80052a4:	f000 faf2 	bl	800588c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2108      	movs	r1, #8
 80052b4:	430a      	orrs	r2, r1
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2104      	movs	r1, #4
 80052c4:	438a      	bics	r2, r1
 80052c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052da:	e027      	b.n	800532c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	0011      	movs	r1, r2
 80052e4:	0018      	movs	r0, r3
 80052e6:	f000 fb31 	bl	800594c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2180      	movs	r1, #128	; 0x80
 80052f6:	0109      	lsls	r1, r1, #4
 80052f8:	430a      	orrs	r2, r1
 80052fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4910      	ldr	r1, [pc, #64]	; (8005348 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005308:	400a      	ands	r2, r1
 800530a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	021a      	lsls	r2, r3, #8
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005320:	e004      	b.n	800532c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005322:	2317      	movs	r3, #23
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
      break;
 800532a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	223c      	movs	r2, #60	; 0x3c
 8005330:	2100      	movs	r1, #0
 8005332:	5499      	strb	r1, [r3, r2]

  return status;
 8005334:	2317      	movs	r3, #23
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	781b      	ldrb	r3, [r3, #0]
}
 800533a:	0018      	movs	r0, r3
 800533c:	46bd      	mov	sp, r7
 800533e:	b006      	add	sp, #24
 8005340:	bd80      	pop	{r7, pc}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	08006928 	.word	0x08006928
 8005348:	fffffbff 	.word	0xfffffbff

0800534c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005354:	46c0      	nop			; (mov r8, r8)
 8005356:	46bd      	mov	sp, r7
 8005358:	b002      	add	sp, #8
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005364:	46c0      	nop			; (mov r8, r8)
 8005366:	46bd      	mov	sp, r7
 8005368:	b002      	add	sp, #8
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005374:	46c0      	nop			; (mov r8, r8)
 8005376:	46bd      	mov	sp, r7
 8005378:	b002      	add	sp, #8
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005384:	46c0      	nop			; (mov r8, r8)
 8005386:	46bd      	mov	sp, r7
 8005388:	b002      	add	sp, #8
 800538a:	bd80      	pop	{r7, pc}

0800538c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a34      	ldr	r2, [pc, #208]	; (8005470 <TIM_Base_SetConfig+0xe4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d008      	beq.n	80053b6 <TIM_Base_SetConfig+0x2a>
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	2380      	movs	r3, #128	; 0x80
 80053a8:	05db      	lsls	r3, r3, #23
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d003      	beq.n	80053b6 <TIM_Base_SetConfig+0x2a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a30      	ldr	r2, [pc, #192]	; (8005474 <TIM_Base_SetConfig+0xe8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d108      	bne.n	80053c8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2270      	movs	r2, #112	; 0x70
 80053ba:	4393      	bics	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a29      	ldr	r2, [pc, #164]	; (8005470 <TIM_Base_SetConfig+0xe4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d018      	beq.n	8005402 <TIM_Base_SetConfig+0x76>
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	2380      	movs	r3, #128	; 0x80
 80053d4:	05db      	lsls	r3, r3, #23
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d013      	beq.n	8005402 <TIM_Base_SetConfig+0x76>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a25      	ldr	r2, [pc, #148]	; (8005474 <TIM_Base_SetConfig+0xe8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00f      	beq.n	8005402 <TIM_Base_SetConfig+0x76>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a24      	ldr	r2, [pc, #144]	; (8005478 <TIM_Base_SetConfig+0xec>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_Base_SetConfig+0x76>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a23      	ldr	r2, [pc, #140]	; (800547c <TIM_Base_SetConfig+0xf0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <TIM_Base_SetConfig+0x76>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a22      	ldr	r2, [pc, #136]	; (8005480 <TIM_Base_SetConfig+0xf4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_Base_SetConfig+0x76>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a21      	ldr	r2, [pc, #132]	; (8005484 <TIM_Base_SetConfig+0xf8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d108      	bne.n	8005414 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4a20      	ldr	r2, [pc, #128]	; (8005488 <TIM_Base_SetConfig+0xfc>)
 8005406:	4013      	ands	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2280      	movs	r2, #128	; 0x80
 8005418:	4393      	bics	r3, r2
 800541a:	001a      	movs	r2, r3
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a0c      	ldr	r2, [pc, #48]	; (8005470 <TIM_Base_SetConfig+0xe4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00b      	beq.n	800545a <TIM_Base_SetConfig+0xce>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a0d      	ldr	r2, [pc, #52]	; (800547c <TIM_Base_SetConfig+0xf0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d007      	beq.n	800545a <TIM_Base_SetConfig+0xce>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a0c      	ldr	r2, [pc, #48]	; (8005480 <TIM_Base_SetConfig+0xf4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d003      	beq.n	800545a <TIM_Base_SetConfig+0xce>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a0b      	ldr	r2, [pc, #44]	; (8005484 <TIM_Base_SetConfig+0xf8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d103      	bne.n	8005462 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	615a      	str	r2, [r3, #20]
}
 8005468:	46c0      	nop			; (mov r8, r8)
 800546a:	46bd      	mov	sp, r7
 800546c:	b004      	add	sp, #16
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40012c00 	.word	0x40012c00
 8005474:	40000400 	.word	0x40000400
 8005478:	40002000 	.word	0x40002000
 800547c:	40014000 	.word	0x40014000
 8005480:	40014400 	.word	0x40014400
 8005484:	40014800 	.word	0x40014800
 8005488:	fffffcff 	.word	0xfffffcff

0800548c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	2201      	movs	r2, #1
 800549c:	4393      	bics	r3, r2
 800549e:	001a      	movs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4a32      	ldr	r2, [pc, #200]	; (8005584 <TIM_OC1_SetConfig+0xf8>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2203      	movs	r2, #3
 80054c2:	4393      	bics	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2202      	movs	r2, #2
 80054d4:	4393      	bics	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a28      	ldr	r2, [pc, #160]	; (8005588 <TIM_OC1_SetConfig+0xfc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00b      	beq.n	8005502 <TIM_OC1_SetConfig+0x76>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a27      	ldr	r2, [pc, #156]	; (800558c <TIM_OC1_SetConfig+0x100>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d007      	beq.n	8005502 <TIM_OC1_SetConfig+0x76>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a26      	ldr	r2, [pc, #152]	; (8005590 <TIM_OC1_SetConfig+0x104>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d003      	beq.n	8005502 <TIM_OC1_SetConfig+0x76>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a25      	ldr	r2, [pc, #148]	; (8005594 <TIM_OC1_SetConfig+0x108>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d10c      	bne.n	800551c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2208      	movs	r2, #8
 8005506:	4393      	bics	r3, r2
 8005508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2204      	movs	r2, #4
 8005518:	4393      	bics	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a1a      	ldr	r2, [pc, #104]	; (8005588 <TIM_OC1_SetConfig+0xfc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00b      	beq.n	800553c <TIM_OC1_SetConfig+0xb0>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a19      	ldr	r2, [pc, #100]	; (800558c <TIM_OC1_SetConfig+0x100>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d007      	beq.n	800553c <TIM_OC1_SetConfig+0xb0>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a18      	ldr	r2, [pc, #96]	; (8005590 <TIM_OC1_SetConfig+0x104>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d003      	beq.n	800553c <TIM_OC1_SetConfig+0xb0>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a17      	ldr	r2, [pc, #92]	; (8005594 <TIM_OC1_SetConfig+0x108>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d111      	bne.n	8005560 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4a16      	ldr	r2, [pc, #88]	; (8005598 <TIM_OC1_SetConfig+0x10c>)
 8005540:	4013      	ands	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	4a15      	ldr	r2, [pc, #84]	; (800559c <TIM_OC1_SetConfig+0x110>)
 8005548:	4013      	ands	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	46bd      	mov	sp, r7
 800557e:	b006      	add	sp, #24
 8005580:	bd80      	pop	{r7, pc}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	fffeff8f 	.word	0xfffeff8f
 8005588:	40012c00 	.word	0x40012c00
 800558c:	40014000 	.word	0x40014000
 8005590:	40014400 	.word	0x40014400
 8005594:	40014800 	.word	0x40014800
 8005598:	fffffeff 	.word	0xfffffeff
 800559c:	fffffdff 	.word	0xfffffdff

080055a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	2210      	movs	r2, #16
 80055b0:	4393      	bics	r3, r2
 80055b2:	001a      	movs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4a2e      	ldr	r2, [pc, #184]	; (8005688 <TIM_OC2_SetConfig+0xe8>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4a2d      	ldr	r2, [pc, #180]	; (800568c <TIM_OC2_SetConfig+0xec>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2220      	movs	r2, #32
 80055ea:	4393      	bics	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a24      	ldr	r2, [pc, #144]	; (8005690 <TIM_OC2_SetConfig+0xf0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d10d      	bne.n	800561e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2280      	movs	r2, #128	; 0x80
 8005606:	4393      	bics	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2240      	movs	r2, #64	; 0x40
 800561a:	4393      	bics	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <TIM_OC2_SetConfig+0xf0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00b      	beq.n	800563e <TIM_OC2_SetConfig+0x9e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a1a      	ldr	r2, [pc, #104]	; (8005694 <TIM_OC2_SetConfig+0xf4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d007      	beq.n	800563e <TIM_OC2_SetConfig+0x9e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a19      	ldr	r2, [pc, #100]	; (8005698 <TIM_OC2_SetConfig+0xf8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d003      	beq.n	800563e <TIM_OC2_SetConfig+0x9e>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a18      	ldr	r2, [pc, #96]	; (800569c <TIM_OC2_SetConfig+0xfc>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d113      	bne.n	8005666 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	4a17      	ldr	r2, [pc, #92]	; (80056a0 <TIM_OC2_SetConfig+0x100>)
 8005642:	4013      	ands	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	4a16      	ldr	r2, [pc, #88]	; (80056a4 <TIM_OC2_SetConfig+0x104>)
 800564a:	4013      	ands	r3, r2
 800564c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	621a      	str	r2, [r3, #32]
}
 8005680:	46c0      	nop			; (mov r8, r8)
 8005682:	46bd      	mov	sp, r7
 8005684:	b006      	add	sp, #24
 8005686:	bd80      	pop	{r7, pc}
 8005688:	feff8fff 	.word	0xfeff8fff
 800568c:	fffffcff 	.word	0xfffffcff
 8005690:	40012c00 	.word	0x40012c00
 8005694:	40014000 	.word	0x40014000
 8005698:	40014400 	.word	0x40014400
 800569c:	40014800 	.word	0x40014800
 80056a0:	fffffbff 	.word	0xfffffbff
 80056a4:	fffff7ff 	.word	0xfffff7ff

080056a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	4a35      	ldr	r2, [pc, #212]	; (800578c <TIM_OC3_SetConfig+0xe4>)
 80056b8:	401a      	ands	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4a2f      	ldr	r2, [pc, #188]	; (8005790 <TIM_OC3_SetConfig+0xe8>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2203      	movs	r2, #3
 80056dc:	4393      	bics	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	4a29      	ldr	r2, [pc, #164]	; (8005794 <TIM_OC3_SetConfig+0xec>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a25      	ldr	r2, [pc, #148]	; (8005798 <TIM_OC3_SetConfig+0xf0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d10d      	bne.n	8005722 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	4a24      	ldr	r2, [pc, #144]	; (800579c <TIM_OC3_SetConfig+0xf4>)
 800570a:	4013      	ands	r3, r2
 800570c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	4a20      	ldr	r2, [pc, #128]	; (80057a0 <TIM_OC3_SetConfig+0xf8>)
 800571e:	4013      	ands	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a1c      	ldr	r2, [pc, #112]	; (8005798 <TIM_OC3_SetConfig+0xf0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00b      	beq.n	8005742 <TIM_OC3_SetConfig+0x9a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <TIM_OC3_SetConfig+0xfc>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d007      	beq.n	8005742 <TIM_OC3_SetConfig+0x9a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <TIM_OC3_SetConfig+0x100>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <TIM_OC3_SetConfig+0x9a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <TIM_OC3_SetConfig+0x104>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d113      	bne.n	800576a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4a1a      	ldr	r2, [pc, #104]	; (80057b0 <TIM_OC3_SetConfig+0x108>)
 8005746:	4013      	ands	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	4a19      	ldr	r2, [pc, #100]	; (80057b4 <TIM_OC3_SetConfig+0x10c>)
 800574e:	4013      	ands	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	621a      	str	r2, [r3, #32]
}
 8005784:	46c0      	nop			; (mov r8, r8)
 8005786:	46bd      	mov	sp, r7
 8005788:	b006      	add	sp, #24
 800578a:	bd80      	pop	{r7, pc}
 800578c:	fffffeff 	.word	0xfffffeff
 8005790:	fffeff8f 	.word	0xfffeff8f
 8005794:	fffffdff 	.word	0xfffffdff
 8005798:	40012c00 	.word	0x40012c00
 800579c:	fffff7ff 	.word	0xfffff7ff
 80057a0:	fffffbff 	.word	0xfffffbff
 80057a4:	40014000 	.word	0x40014000
 80057a8:	40014400 	.word	0x40014400
 80057ac:	40014800 	.word	0x40014800
 80057b0:	ffffefff 	.word	0xffffefff
 80057b4:	ffffdfff 	.word	0xffffdfff

080057b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	4a28      	ldr	r2, [pc, #160]	; (8005868 <TIM_OC4_SetConfig+0xb0>)
 80057c8:	401a      	ands	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4a22      	ldr	r2, [pc, #136]	; (800586c <TIM_OC4_SetConfig+0xb4>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4a21      	ldr	r2, [pc, #132]	; (8005870 <TIM_OC4_SetConfig+0xb8>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <TIM_OC4_SetConfig+0xbc>)
 8005800:	4013      	ands	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	031b      	lsls	r3, r3, #12
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a19      	ldr	r2, [pc, #100]	; (8005878 <TIM_OC4_SetConfig+0xc0>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00b      	beq.n	8005830 <TIM_OC4_SetConfig+0x78>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a18      	ldr	r2, [pc, #96]	; (800587c <TIM_OC4_SetConfig+0xc4>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d007      	beq.n	8005830 <TIM_OC4_SetConfig+0x78>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a17      	ldr	r2, [pc, #92]	; (8005880 <TIM_OC4_SetConfig+0xc8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_OC4_SetConfig+0x78>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a16      	ldr	r2, [pc, #88]	; (8005884 <TIM_OC4_SetConfig+0xcc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d109      	bne.n	8005844 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	4a15      	ldr	r2, [pc, #84]	; (8005888 <TIM_OC4_SetConfig+0xd0>)
 8005834:	4013      	ands	r3, r2
 8005836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	019b      	lsls	r3, r3, #6
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	46bd      	mov	sp, r7
 8005862:	b006      	add	sp, #24
 8005864:	bd80      	pop	{r7, pc}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	ffffefff 	.word	0xffffefff
 800586c:	feff8fff 	.word	0xfeff8fff
 8005870:	fffffcff 	.word	0xfffffcff
 8005874:	ffffdfff 	.word	0xffffdfff
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800
 8005888:	ffffbfff 	.word	0xffffbfff

0800588c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	4a25      	ldr	r2, [pc, #148]	; (8005930 <TIM_OC5_SetConfig+0xa4>)
 800589c:	401a      	ands	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4a1f      	ldr	r2, [pc, #124]	; (8005934 <TIM_OC5_SetConfig+0xa8>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4a1b      	ldr	r2, [pc, #108]	; (8005938 <TIM_OC5_SetConfig+0xac>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	041b      	lsls	r3, r3, #16
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a17      	ldr	r2, [pc, #92]	; (800593c <TIM_OC5_SetConfig+0xb0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00b      	beq.n	80058fa <TIM_OC5_SetConfig+0x6e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a16      	ldr	r2, [pc, #88]	; (8005940 <TIM_OC5_SetConfig+0xb4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d007      	beq.n	80058fa <TIM_OC5_SetConfig+0x6e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a15      	ldr	r2, [pc, #84]	; (8005944 <TIM_OC5_SetConfig+0xb8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d003      	beq.n	80058fa <TIM_OC5_SetConfig+0x6e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a14      	ldr	r2, [pc, #80]	; (8005948 <TIM_OC5_SetConfig+0xbc>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d109      	bne.n	800590e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	4a0c      	ldr	r2, [pc, #48]	; (8005930 <TIM_OC5_SetConfig+0xa4>)
 80058fe:	4013      	ands	r3, r2
 8005900:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	621a      	str	r2, [r3, #32]
}
 8005928:	46c0      	nop			; (mov r8, r8)
 800592a:	46bd      	mov	sp, r7
 800592c:	b006      	add	sp, #24
 800592e:	bd80      	pop	{r7, pc}
 8005930:	fffeffff 	.word	0xfffeffff
 8005934:	fffeff8f 	.word	0xfffeff8f
 8005938:	fffdffff 	.word	0xfffdffff
 800593c:	40012c00 	.word	0x40012c00
 8005940:	40014000 	.word	0x40014000
 8005944:	40014400 	.word	0x40014400
 8005948:	40014800 	.word	0x40014800

0800594c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	4a26      	ldr	r2, [pc, #152]	; (80059f4 <TIM_OC6_SetConfig+0xa8>)
 800595c:	401a      	ands	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a20      	ldr	r2, [pc, #128]	; (80059f8 <TIM_OC6_SetConfig+0xac>)
 8005978:	4013      	ands	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	021b      	lsls	r3, r3, #8
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4313      	orrs	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4a1c      	ldr	r2, [pc, #112]	; (80059fc <TIM_OC6_SetConfig+0xb0>)
 800598c:	4013      	ands	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	051b      	lsls	r3, r3, #20
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a18      	ldr	r2, [pc, #96]	; (8005a00 <TIM_OC6_SetConfig+0xb4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00b      	beq.n	80059bc <TIM_OC6_SetConfig+0x70>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a17      	ldr	r2, [pc, #92]	; (8005a04 <TIM_OC6_SetConfig+0xb8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d007      	beq.n	80059bc <TIM_OC6_SetConfig+0x70>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a16      	ldr	r2, [pc, #88]	; (8005a08 <TIM_OC6_SetConfig+0xbc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC6_SetConfig+0x70>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a15      	ldr	r2, [pc, #84]	; (8005a0c <TIM_OC6_SetConfig+0xc0>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d109      	bne.n	80059d0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	4a14      	ldr	r2, [pc, #80]	; (8005a10 <TIM_OC6_SetConfig+0xc4>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	029b      	lsls	r3, r3, #10
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	46bd      	mov	sp, r7
 80059ee:	b006      	add	sp, #24
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	46c0      	nop			; (mov r8, r8)
 80059f4:	ffefffff 	.word	0xffefffff
 80059f8:	feff8fff 	.word	0xfeff8fff
 80059fc:	ffdfffff 	.word	0xffdfffff
 8005a00:	40012c00 	.word	0x40012c00
 8005a04:	40014000 	.word	0x40014000
 8005a08:	40014400 	.word	0x40014400
 8005a0c:	40014800 	.word	0x40014800
 8005a10:	fffbffff 	.word	0xfffbffff

08005a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	221f      	movs	r2, #31
 8005a24:	4013      	ands	r3, r2
 8005a26:	2201      	movs	r2, #1
 8005a28:	409a      	lsls	r2, r3
 8005a2a:	0013      	movs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	43d2      	mvns	r2, r2
 8005a36:	401a      	ands	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1a      	ldr	r2, [r3, #32]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	211f      	movs	r1, #31
 8005a44:	400b      	ands	r3, r1
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	4099      	lsls	r1, r3
 8005a4a:	000b      	movs	r3, r1
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b006      	add	sp, #24
 8005a58:	bd80      	pop	{r7, pc}
	...

08005a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	223c      	movs	r2, #60	; 0x3c
 8005a6a:	5c9b      	ldrb	r3, [r3, r2]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e055      	b.n	8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	223c      	movs	r2, #60	; 0x3c
 8005a78:	2101      	movs	r1, #1
 8005a7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	223d      	movs	r2, #61	; 0x3d
 8005a80:	2102      	movs	r1, #2
 8005a82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a23      	ldr	r2, [pc, #140]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d108      	bne.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a22      	ldr	r2, [pc, #136]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2270      	movs	r2, #112	; 0x70
 8005ab4:	4393      	bics	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a16      	ldr	r2, [pc, #88]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00f      	beq.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	2380      	movs	r3, #128	; 0x80
 8005ada:	05db      	lsls	r3, r3, #23
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d009      	beq.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a12      	ldr	r2, [pc, #72]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d004      	beq.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a11      	ldr	r2, [pc, #68]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d10c      	bne.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2280      	movs	r2, #128	; 0x80
 8005af8:	4393      	bics	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	223d      	movs	r2, #61	; 0x3d
 8005b12:	2101      	movs	r1, #1
 8005b14:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	223c      	movs	r2, #60	; 0x3c
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	0018      	movs	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b004      	add	sp, #16
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	ff0fffff 	.word	0xff0fffff
 8005b30:	40000400 	.word	0x40000400
 8005b34:	40014000 	.word	0x40014000

08005b38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	223c      	movs	r2, #60	; 0x3c
 8005b4a:	5c9b      	ldrb	r3, [r3, r2]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e079      	b.n	8005c48 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	223c      	movs	r2, #60	; 0x3c
 8005b58:	2101      	movs	r1, #1
 8005b5a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	22ff      	movs	r2, #255	; 0xff
 8005b60:	4393      	bics	r3, r2
 8005b62:	001a      	movs	r2, r3
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4a38      	ldr	r2, [pc, #224]	; (8005c50 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005b70:	401a      	ands	r2, r3
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4a35      	ldr	r2, [pc, #212]	; (8005c54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005b7e:	401a      	ands	r2, r3
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4a33      	ldr	r2, [pc, #204]	; (8005c58 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005b8c:	401a      	ands	r2, r3
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a30      	ldr	r2, [pc, #192]	; (8005c5c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005b9a:	401a      	ands	r2, r3
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4a2e      	ldr	r2, [pc, #184]	; (8005c60 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005ba8:	401a      	ands	r2, r3
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4a2b      	ldr	r2, [pc, #172]	; (8005c64 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005bb6:	401a      	ands	r2, r3
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a29      	ldr	r2, [pc, #164]	; (8005c68 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005bc4:	401a      	ands	r2, r3
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	041b      	lsls	r3, r3, #16
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d106      	bne.n	8005be8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4a24      	ldr	r2, [pc, #144]	; (8005c70 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005bde:	401a      	ands	r2, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a1f      	ldr	r2, [pc, #124]	; (8005c6c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d121      	bne.n	8005c36 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4a1f      	ldr	r2, [pc, #124]	; (8005c74 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005bf6:	401a      	ands	r2, r3
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfc:	051b      	lsls	r3, r3, #20
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8005c06:	401a      	ands	r2, r3
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4a1a      	ldr	r2, [pc, #104]	; (8005c7c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8005c14:	401a      	ands	r2, r3
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a12      	ldr	r2, [pc, #72]	; (8005c6c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d106      	bne.n	8005c36 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4a15      	ldr	r2, [pc, #84]	; (8005c80 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005c2c:	401a      	ands	r2, r3
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	223c      	movs	r2, #60	; 0x3c
 8005c42:	2100      	movs	r1, #0
 8005c44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	0018      	movs	r0, r3
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	b004      	add	sp, #16
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	fffffcff 	.word	0xfffffcff
 8005c54:	fffffbff 	.word	0xfffffbff
 8005c58:	fffff7ff 	.word	0xfffff7ff
 8005c5c:	ffffefff 	.word	0xffffefff
 8005c60:	ffffdfff 	.word	0xffffdfff
 8005c64:	ffffbfff 	.word	0xffffbfff
 8005c68:	fff0ffff 	.word	0xfff0ffff
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	efffffff 	.word	0xefffffff
 8005c74:	ff0fffff 	.word	0xff0fffff
 8005c78:	feffffff 	.word	0xfeffffff
 8005c7c:	fdffffff 	.word	0xfdffffff
 8005c80:	dfffffff 	.word	0xdfffffff

08005c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c8c:	46c0      	nop			; (mov r8, r8)
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	b002      	add	sp, #8
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c9c:	46c0      	nop			; (mov r8, r8)
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	b002      	add	sp, #8
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cac:	46c0      	nop			; (mov r8, r8)
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b002      	add	sp, #8
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e046      	b.n	8005d54 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2288      	movs	r2, #136	; 0x88
 8005cca:	589b      	ldr	r3, [r3, r2]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d107      	bne.n	8005ce0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2284      	movs	r2, #132	; 0x84
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f7fc f984 	bl	8001fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2288      	movs	r2, #136	; 0x88
 8005ce4:	2124      	movs	r1, #36	; 0x24
 8005ce6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	438a      	bics	r2, r1
 8005cf6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f000 f830 	bl	8005d60 <UART_SetConfig>
 8005d00:	0003      	movs	r3, r0
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e024      	b.n	8005d54 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	0018      	movs	r0, r3
 8005d16:	f000 fa9b 	bl	8006250 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	490d      	ldr	r1, [pc, #52]	; (8005d5c <HAL_UART_Init+0xa8>)
 8005d26:	400a      	ands	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	212a      	movs	r1, #42	; 0x2a
 8005d36:	438a      	bics	r2, r1
 8005d38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2101      	movs	r1, #1
 8005d46:	430a      	orrs	r2, r1
 8005d48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f000 fb33 	bl	80063b8 <UART_CheckIdleState>
 8005d52:	0003      	movs	r3, r0
}
 8005d54:	0018      	movs	r0, r3
 8005d56:	46bd      	mov	sp, r7
 8005d58:	b002      	add	sp, #8
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	ffffb7ff 	.word	0xffffb7ff

08005d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d60:	b5b0      	push	{r4, r5, r7, lr}
 8005d62:	b090      	sub	sp, #64	; 0x40
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d68:	231a      	movs	r3, #26
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	189b      	adds	r3, r3, r2
 8005d6e:	19db      	adds	r3, r3, r7
 8005d70:	2200      	movs	r2, #0
 8005d72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4ac4      	ldr	r2, [pc, #784]	; (80060a4 <UART_SetConfig+0x344>)
 8005d94:	4013      	ands	r3, r2
 8005d96:	0019      	movs	r1, r3
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	4abf      	ldr	r2, [pc, #764]	; (80060a8 <UART_SetConfig+0x348>)
 8005daa:	4013      	ands	r3, r2
 8005dac:	0018      	movs	r0, r3
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	68d9      	ldr	r1, [r3, #12]
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	0003      	movs	r3, r0
 8005db8:	430b      	orrs	r3, r1
 8005dba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4ab9      	ldr	r2, [pc, #740]	; (80060ac <UART_SetConfig+0x34c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	4ab4      	ldr	r2, [pc, #720]	; (80060b0 <UART_SetConfig+0x350>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	0019      	movs	r1, r3
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de8:	430b      	orrs	r3, r1
 8005dea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df2:	220f      	movs	r2, #15
 8005df4:	4393      	bics	r3, r2
 8005df6:	0018      	movs	r0, r3
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	0003      	movs	r3, r0
 8005e02:	430b      	orrs	r3, r1
 8005e04:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4aaa      	ldr	r2, [pc, #680]	; (80060b4 <UART_SetConfig+0x354>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d131      	bne.n	8005e74 <UART_SetConfig+0x114>
 8005e10:	4ba9      	ldr	r3, [pc, #676]	; (80060b8 <UART_SetConfig+0x358>)
 8005e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e14:	2203      	movs	r2, #3
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d01d      	beq.n	8005e58 <UART_SetConfig+0xf8>
 8005e1c:	d823      	bhi.n	8005e66 <UART_SetConfig+0x106>
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d00c      	beq.n	8005e3c <UART_SetConfig+0xdc>
 8005e22:	d820      	bhi.n	8005e66 <UART_SetConfig+0x106>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <UART_SetConfig+0xce>
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d00e      	beq.n	8005e4a <UART_SetConfig+0xea>
 8005e2c:	e01b      	b.n	8005e66 <UART_SetConfig+0x106>
 8005e2e:	231b      	movs	r3, #27
 8005e30:	2220      	movs	r2, #32
 8005e32:	189b      	adds	r3, r3, r2
 8005e34:	19db      	adds	r3, r3, r7
 8005e36:	2200      	movs	r2, #0
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	e071      	b.n	8005f20 <UART_SetConfig+0x1c0>
 8005e3c:	231b      	movs	r3, #27
 8005e3e:	2220      	movs	r2, #32
 8005e40:	189b      	adds	r3, r3, r2
 8005e42:	19db      	adds	r3, r3, r7
 8005e44:	2202      	movs	r2, #2
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	e06a      	b.n	8005f20 <UART_SetConfig+0x1c0>
 8005e4a:	231b      	movs	r3, #27
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	189b      	adds	r3, r3, r2
 8005e50:	19db      	adds	r3, r3, r7
 8005e52:	2204      	movs	r2, #4
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	e063      	b.n	8005f20 <UART_SetConfig+0x1c0>
 8005e58:	231b      	movs	r3, #27
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	189b      	adds	r3, r3, r2
 8005e5e:	19db      	adds	r3, r3, r7
 8005e60:	2208      	movs	r2, #8
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	e05c      	b.n	8005f20 <UART_SetConfig+0x1c0>
 8005e66:	231b      	movs	r3, #27
 8005e68:	2220      	movs	r2, #32
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	19db      	adds	r3, r3, r7
 8005e6e:	2210      	movs	r2, #16
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e055      	b.n	8005f20 <UART_SetConfig+0x1c0>
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a90      	ldr	r2, [pc, #576]	; (80060bc <UART_SetConfig+0x35c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d106      	bne.n	8005e8c <UART_SetConfig+0x12c>
 8005e7e:	231b      	movs	r3, #27
 8005e80:	2220      	movs	r2, #32
 8005e82:	189b      	adds	r3, r3, r2
 8005e84:	19db      	adds	r3, r3, r7
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	e049      	b.n	8005f20 <UART_SetConfig+0x1c0>
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a86      	ldr	r2, [pc, #536]	; (80060ac <UART_SetConfig+0x34c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d13e      	bne.n	8005f14 <UART_SetConfig+0x1b4>
 8005e96:	4b88      	ldr	r3, [pc, #544]	; (80060b8 <UART_SetConfig+0x358>)
 8005e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e9a:	23c0      	movs	r3, #192	; 0xc0
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	22c0      	movs	r2, #192	; 0xc0
 8005ea2:	0112      	lsls	r2, r2, #4
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d027      	beq.n	8005ef8 <UART_SetConfig+0x198>
 8005ea8:	22c0      	movs	r2, #192	; 0xc0
 8005eaa:	0112      	lsls	r2, r2, #4
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d82a      	bhi.n	8005f06 <UART_SetConfig+0x1a6>
 8005eb0:	2280      	movs	r2, #128	; 0x80
 8005eb2:	0112      	lsls	r2, r2, #4
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d011      	beq.n	8005edc <UART_SetConfig+0x17c>
 8005eb8:	2280      	movs	r2, #128	; 0x80
 8005eba:	0112      	lsls	r2, r2, #4
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d822      	bhi.n	8005f06 <UART_SetConfig+0x1a6>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d004      	beq.n	8005ece <UART_SetConfig+0x16e>
 8005ec4:	2280      	movs	r2, #128	; 0x80
 8005ec6:	00d2      	lsls	r2, r2, #3
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00e      	beq.n	8005eea <UART_SetConfig+0x18a>
 8005ecc:	e01b      	b.n	8005f06 <UART_SetConfig+0x1a6>
 8005ece:	231b      	movs	r3, #27
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	189b      	adds	r3, r3, r2
 8005ed4:	19db      	adds	r3, r3, r7
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	e021      	b.n	8005f20 <UART_SetConfig+0x1c0>
 8005edc:	231b      	movs	r3, #27
 8005ede:	2220      	movs	r2, #32
 8005ee0:	189b      	adds	r3, r3, r2
 8005ee2:	19db      	adds	r3, r3, r7
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	e01a      	b.n	8005f20 <UART_SetConfig+0x1c0>
 8005eea:	231b      	movs	r3, #27
 8005eec:	2220      	movs	r2, #32
 8005eee:	189b      	adds	r3, r3, r2
 8005ef0:	19db      	adds	r3, r3, r7
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	e013      	b.n	8005f20 <UART_SetConfig+0x1c0>
 8005ef8:	231b      	movs	r3, #27
 8005efa:	2220      	movs	r2, #32
 8005efc:	189b      	adds	r3, r3, r2
 8005efe:	19db      	adds	r3, r3, r7
 8005f00:	2208      	movs	r2, #8
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	e00c      	b.n	8005f20 <UART_SetConfig+0x1c0>
 8005f06:	231b      	movs	r3, #27
 8005f08:	2220      	movs	r2, #32
 8005f0a:	189b      	adds	r3, r3, r2
 8005f0c:	19db      	adds	r3, r3, r7
 8005f0e:	2210      	movs	r2, #16
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	e005      	b.n	8005f20 <UART_SetConfig+0x1c0>
 8005f14:	231b      	movs	r3, #27
 8005f16:	2220      	movs	r2, #32
 8005f18:	189b      	adds	r3, r3, r2
 8005f1a:	19db      	adds	r3, r3, r7
 8005f1c:	2210      	movs	r2, #16
 8005f1e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a61      	ldr	r2, [pc, #388]	; (80060ac <UART_SetConfig+0x34c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d000      	beq.n	8005f2c <UART_SetConfig+0x1cc>
 8005f2a:	e092      	b.n	8006052 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f2c:	231b      	movs	r3, #27
 8005f2e:	2220      	movs	r2, #32
 8005f30:	189b      	adds	r3, r3, r2
 8005f32:	19db      	adds	r3, r3, r7
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d015      	beq.n	8005f66 <UART_SetConfig+0x206>
 8005f3a:	dc18      	bgt.n	8005f6e <UART_SetConfig+0x20e>
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d00d      	beq.n	8005f5c <UART_SetConfig+0x1fc>
 8005f40:	dc15      	bgt.n	8005f6e <UART_SetConfig+0x20e>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <UART_SetConfig+0x1ec>
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d005      	beq.n	8005f56 <UART_SetConfig+0x1f6>
 8005f4a:	e010      	b.n	8005f6e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f4c:	f7fe fb50 	bl	80045f0 <HAL_RCC_GetPCLK1Freq>
 8005f50:	0003      	movs	r3, r0
 8005f52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f54:	e014      	b.n	8005f80 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f56:	4b5a      	ldr	r3, [pc, #360]	; (80060c0 <UART_SetConfig+0x360>)
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f5a:	e011      	b.n	8005f80 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5c:	f7fe fabe 	bl	80044dc <HAL_RCC_GetSysClockFreq>
 8005f60:	0003      	movs	r3, r0
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f64:	e00c      	b.n	8005f80 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f66:	2380      	movs	r3, #128	; 0x80
 8005f68:	021b      	lsls	r3, r3, #8
 8005f6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f6c:	e008      	b.n	8005f80 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005f72:	231a      	movs	r3, #26
 8005f74:	2220      	movs	r2, #32
 8005f76:	189b      	adds	r3, r3, r2
 8005f78:	19db      	adds	r3, r3, r7
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	701a      	strb	r2, [r3, #0]
        break;
 8005f7e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d100      	bne.n	8005f88 <UART_SetConfig+0x228>
 8005f86:	e147      	b.n	8006218 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f8c:	4b4d      	ldr	r3, [pc, #308]	; (80060c4 <UART_SetConfig+0x364>)
 8005f8e:	0052      	lsls	r2, r2, #1
 8005f90:	5ad3      	ldrh	r3, [r2, r3]
 8005f92:	0019      	movs	r1, r3
 8005f94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005f96:	f7fa f8b7 	bl	8000108 <__udivsi3>
 8005f9a:	0003      	movs	r3, r0
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	0013      	movs	r3, r2
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	189b      	adds	r3, r3, r2
 8005fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d305      	bcc.n	8005fba <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d906      	bls.n	8005fc8 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8005fba:	231a      	movs	r3, #26
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	189b      	adds	r3, r3, r2
 8005fc0:	19db      	adds	r3, r3, r7
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	e127      	b.n	8006218 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61fb      	str	r3, [r7, #28]
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fd4:	4b3b      	ldr	r3, [pc, #236]	; (80060c4 <UART_SetConfig+0x364>)
 8005fd6:	0052      	lsls	r2, r2, #1
 8005fd8:	5ad3      	ldrh	r3, [r2, r3]
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	69b8      	ldr	r0, [r7, #24]
 8005fe6:	69f9      	ldr	r1, [r7, #28]
 8005fe8:	f7fa fa04 	bl	80003f4 <__aeabi_uldivmod>
 8005fec:	0002      	movs	r2, r0
 8005fee:	000b      	movs	r3, r1
 8005ff0:	0e11      	lsrs	r1, r2, #24
 8005ff2:	021d      	lsls	r5, r3, #8
 8005ff4:	430d      	orrs	r5, r1
 8005ff6:	0214      	lsls	r4, r2, #8
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	085b      	lsrs	r3, r3, #1
 8005ffe:	60bb      	str	r3, [r7, #8]
 8006000:	2300      	movs	r3, #0
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	68b8      	ldr	r0, [r7, #8]
 8006006:	68f9      	ldr	r1, [r7, #12]
 8006008:	1900      	adds	r0, r0, r4
 800600a:	4169      	adcs	r1, r5
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	2300      	movs	r3, #0
 8006014:	607b      	str	r3, [r7, #4]
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f7fa f9eb 	bl	80003f4 <__aeabi_uldivmod>
 800601e:	0002      	movs	r2, r0
 8006020:	000b      	movs	r3, r1
 8006022:	0013      	movs	r3, r2
 8006024:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006028:	23c0      	movs	r3, #192	; 0xc0
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	429a      	cmp	r2, r3
 800602e:	d309      	bcc.n	8006044 <UART_SetConfig+0x2e4>
 8006030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	035b      	lsls	r3, r3, #13
 8006036:	429a      	cmp	r2, r3
 8006038:	d204      	bcs.n	8006044 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006040:	60da      	str	r2, [r3, #12]
 8006042:	e0e9      	b.n	8006218 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8006044:	231a      	movs	r3, #26
 8006046:	2220      	movs	r2, #32
 8006048:	189b      	adds	r3, r3, r2
 800604a:	19db      	adds	r3, r3, r7
 800604c:	2201      	movs	r2, #1
 800604e:	701a      	strb	r2, [r3, #0]
 8006050:	e0e2      	b.n	8006218 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	69da      	ldr	r2, [r3, #28]
 8006056:	2380      	movs	r3, #128	; 0x80
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	429a      	cmp	r2, r3
 800605c:	d000      	beq.n	8006060 <UART_SetConfig+0x300>
 800605e:	e083      	b.n	8006168 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006060:	231b      	movs	r3, #27
 8006062:	2220      	movs	r2, #32
 8006064:	189b      	adds	r3, r3, r2
 8006066:	19db      	adds	r3, r3, r7
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b08      	cmp	r3, #8
 800606c:	d015      	beq.n	800609a <UART_SetConfig+0x33a>
 800606e:	dc2b      	bgt.n	80060c8 <UART_SetConfig+0x368>
 8006070:	2b04      	cmp	r3, #4
 8006072:	d00d      	beq.n	8006090 <UART_SetConfig+0x330>
 8006074:	dc28      	bgt.n	80060c8 <UART_SetConfig+0x368>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <UART_SetConfig+0x320>
 800607a:	2b02      	cmp	r3, #2
 800607c:	d005      	beq.n	800608a <UART_SetConfig+0x32a>
 800607e:	e023      	b.n	80060c8 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006080:	f7fe fab6 	bl	80045f0 <HAL_RCC_GetPCLK1Freq>
 8006084:	0003      	movs	r3, r0
 8006086:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006088:	e027      	b.n	80060da <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800608a:	4b0d      	ldr	r3, [pc, #52]	; (80060c0 <UART_SetConfig+0x360>)
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800608e:	e024      	b.n	80060da <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006090:	f7fe fa24 	bl	80044dc <HAL_RCC_GetSysClockFreq>
 8006094:	0003      	movs	r3, r0
 8006096:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006098:	e01f      	b.n	80060da <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060a0:	e01b      	b.n	80060da <UART_SetConfig+0x37a>
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	cfff69f3 	.word	0xcfff69f3
 80060a8:	ffffcfff 	.word	0xffffcfff
 80060ac:	40008000 	.word	0x40008000
 80060b0:	11fff4ff 	.word	0x11fff4ff
 80060b4:	40013800 	.word	0x40013800
 80060b8:	40021000 	.word	0x40021000
 80060bc:	40004400 	.word	0x40004400
 80060c0:	00f42400 	.word	0x00f42400
 80060c4:	0800697c 	.word	0x0800697c
      default:
        pclk = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80060cc:	231a      	movs	r3, #26
 80060ce:	2220      	movs	r2, #32
 80060d0:	189b      	adds	r3, r3, r2
 80060d2:	19db      	adds	r3, r3, r7
 80060d4:	2201      	movs	r2, #1
 80060d6:	701a      	strb	r2, [r3, #0]
        break;
 80060d8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d100      	bne.n	80060e2 <UART_SetConfig+0x382>
 80060e0:	e09a      	b.n	8006218 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060e6:	4b58      	ldr	r3, [pc, #352]	; (8006248 <UART_SetConfig+0x4e8>)
 80060e8:	0052      	lsls	r2, r2, #1
 80060ea:	5ad3      	ldrh	r3, [r2, r3]
 80060ec:	0019      	movs	r1, r3
 80060ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80060f0:	f7fa f80a 	bl	8000108 <__udivsi3>
 80060f4:	0003      	movs	r3, r0
 80060f6:	005a      	lsls	r2, r3, #1
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	18d2      	adds	r2, r2, r3
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	0019      	movs	r1, r3
 8006106:	0010      	movs	r0, r2
 8006108:	f7f9 fffe 	bl	8000108 <__udivsi3>
 800610c:	0003      	movs	r3, r0
 800610e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	2b0f      	cmp	r3, #15
 8006114:	d921      	bls.n	800615a <UART_SetConfig+0x3fa>
 8006116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006118:	2380      	movs	r3, #128	; 0x80
 800611a:	025b      	lsls	r3, r3, #9
 800611c:	429a      	cmp	r2, r3
 800611e:	d21c      	bcs.n	800615a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	b29a      	uxth	r2, r3
 8006124:	200e      	movs	r0, #14
 8006126:	2420      	movs	r4, #32
 8006128:	1903      	adds	r3, r0, r4
 800612a:	19db      	adds	r3, r3, r7
 800612c:	210f      	movs	r1, #15
 800612e:	438a      	bics	r2, r1
 8006130:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	085b      	lsrs	r3, r3, #1
 8006136:	b29b      	uxth	r3, r3
 8006138:	2207      	movs	r2, #7
 800613a:	4013      	ands	r3, r2
 800613c:	b299      	uxth	r1, r3
 800613e:	1903      	adds	r3, r0, r4
 8006140:	19db      	adds	r3, r3, r7
 8006142:	1902      	adds	r2, r0, r4
 8006144:	19d2      	adds	r2, r2, r7
 8006146:	8812      	ldrh	r2, [r2, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	1902      	adds	r2, r0, r4
 8006152:	19d2      	adds	r2, r2, r7
 8006154:	8812      	ldrh	r2, [r2, #0]
 8006156:	60da      	str	r2, [r3, #12]
 8006158:	e05e      	b.n	8006218 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800615a:	231a      	movs	r3, #26
 800615c:	2220      	movs	r2, #32
 800615e:	189b      	adds	r3, r3, r2
 8006160:	19db      	adds	r3, r3, r7
 8006162:	2201      	movs	r2, #1
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	e057      	b.n	8006218 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006168:	231b      	movs	r3, #27
 800616a:	2220      	movs	r2, #32
 800616c:	189b      	adds	r3, r3, r2
 800616e:	19db      	adds	r3, r3, r7
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b08      	cmp	r3, #8
 8006174:	d015      	beq.n	80061a2 <UART_SetConfig+0x442>
 8006176:	dc18      	bgt.n	80061aa <UART_SetConfig+0x44a>
 8006178:	2b04      	cmp	r3, #4
 800617a:	d00d      	beq.n	8006198 <UART_SetConfig+0x438>
 800617c:	dc15      	bgt.n	80061aa <UART_SetConfig+0x44a>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <UART_SetConfig+0x428>
 8006182:	2b02      	cmp	r3, #2
 8006184:	d005      	beq.n	8006192 <UART_SetConfig+0x432>
 8006186:	e010      	b.n	80061aa <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006188:	f7fe fa32 	bl	80045f0 <HAL_RCC_GetPCLK1Freq>
 800618c:	0003      	movs	r3, r0
 800618e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006190:	e014      	b.n	80061bc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006192:	4b2e      	ldr	r3, [pc, #184]	; (800624c <UART_SetConfig+0x4ec>)
 8006194:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006196:	e011      	b.n	80061bc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006198:	f7fe f9a0 	bl	80044dc <HAL_RCC_GetSysClockFreq>
 800619c:	0003      	movs	r3, r0
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061a0:	e00c      	b.n	80061bc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061a2:	2380      	movs	r3, #128	; 0x80
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061a8:	e008      	b.n	80061bc <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80061ae:	231a      	movs	r3, #26
 80061b0:	2220      	movs	r2, #32
 80061b2:	189b      	adds	r3, r3, r2
 80061b4:	19db      	adds	r3, r3, r7
 80061b6:	2201      	movs	r2, #1
 80061b8:	701a      	strb	r2, [r3, #0]
        break;
 80061ba:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80061bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d02a      	beq.n	8006218 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061c6:	4b20      	ldr	r3, [pc, #128]	; (8006248 <UART_SetConfig+0x4e8>)
 80061c8:	0052      	lsls	r2, r2, #1
 80061ca:	5ad3      	ldrh	r3, [r2, r3]
 80061cc:	0019      	movs	r1, r3
 80061ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80061d0:	f7f9 ff9a 	bl	8000108 <__udivsi3>
 80061d4:	0003      	movs	r3, r0
 80061d6:	001a      	movs	r2, r3
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	18d2      	adds	r2, r2, r3
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	0019      	movs	r1, r3
 80061e6:	0010      	movs	r0, r2
 80061e8:	f7f9 ff8e 	bl	8000108 <__udivsi3>
 80061ec:	0003      	movs	r3, r0
 80061ee:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	2b0f      	cmp	r3, #15
 80061f4:	d90a      	bls.n	800620c <UART_SetConfig+0x4ac>
 80061f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f8:	2380      	movs	r3, #128	; 0x80
 80061fa:	025b      	lsls	r3, r3, #9
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d205      	bcs.n	800620c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	b29a      	uxth	r2, r3
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60da      	str	r2, [r3, #12]
 800620a:	e005      	b.n	8006218 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800620c:	231a      	movs	r3, #26
 800620e:	2220      	movs	r2, #32
 8006210:	189b      	adds	r3, r3, r2
 8006212:	19db      	adds	r3, r3, r7
 8006214:	2201      	movs	r2, #1
 8006216:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	226a      	movs	r2, #106	; 0x6a
 800621c:	2101      	movs	r1, #1
 800621e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	2268      	movs	r2, #104	; 0x68
 8006224:	2101      	movs	r1, #1
 8006226:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	2200      	movs	r2, #0
 800622c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	2200      	movs	r2, #0
 8006232:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006234:	231a      	movs	r3, #26
 8006236:	2220      	movs	r2, #32
 8006238:	189b      	adds	r3, r3, r2
 800623a:	19db      	adds	r3, r3, r7
 800623c:	781b      	ldrb	r3, [r3, #0]
}
 800623e:	0018      	movs	r0, r3
 8006240:	46bd      	mov	sp, r7
 8006242:	b010      	add	sp, #64	; 0x40
 8006244:	bdb0      	pop	{r4, r5, r7, pc}
 8006246:	46c0      	nop			; (mov r8, r8)
 8006248:	0800697c 	.word	0x0800697c
 800624c:	00f42400 	.word	0x00f42400

08006250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625c:	2201      	movs	r2, #1
 800625e:	4013      	ands	r3, r2
 8006260:	d00b      	beq.n	800627a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	4a4a      	ldr	r2, [pc, #296]	; (8006394 <UART_AdvFeatureConfig+0x144>)
 800626a:	4013      	ands	r3, r2
 800626c:	0019      	movs	r1, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627e:	2202      	movs	r2, #2
 8006280:	4013      	ands	r3, r2
 8006282:	d00b      	beq.n	800629c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	4a43      	ldr	r2, [pc, #268]	; (8006398 <UART_AdvFeatureConfig+0x148>)
 800628c:	4013      	ands	r3, r2
 800628e:	0019      	movs	r1, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	2204      	movs	r2, #4
 80062a2:	4013      	ands	r3, r2
 80062a4:	d00b      	beq.n	80062be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	4a3b      	ldr	r2, [pc, #236]	; (800639c <UART_AdvFeatureConfig+0x14c>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	0019      	movs	r1, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c2:	2208      	movs	r2, #8
 80062c4:	4013      	ands	r3, r2
 80062c6:	d00b      	beq.n	80062e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	4a34      	ldr	r2, [pc, #208]	; (80063a0 <UART_AdvFeatureConfig+0x150>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	0019      	movs	r1, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	2210      	movs	r2, #16
 80062e6:	4013      	ands	r3, r2
 80062e8:	d00b      	beq.n	8006302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	4a2c      	ldr	r2, [pc, #176]	; (80063a4 <UART_AdvFeatureConfig+0x154>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	0019      	movs	r1, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	2220      	movs	r2, #32
 8006308:	4013      	ands	r3, r2
 800630a:	d00b      	beq.n	8006324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	4a25      	ldr	r2, [pc, #148]	; (80063a8 <UART_AdvFeatureConfig+0x158>)
 8006314:	4013      	ands	r3, r2
 8006316:	0019      	movs	r1, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006328:	2240      	movs	r2, #64	; 0x40
 800632a:	4013      	ands	r3, r2
 800632c:	d01d      	beq.n	800636a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	4a1d      	ldr	r2, [pc, #116]	; (80063ac <UART_AdvFeatureConfig+0x15c>)
 8006336:	4013      	ands	r3, r2
 8006338:	0019      	movs	r1, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800634a:	2380      	movs	r3, #128	; 0x80
 800634c:	035b      	lsls	r3, r3, #13
 800634e:	429a      	cmp	r2, r3
 8006350:	d10b      	bne.n	800636a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4a15      	ldr	r2, [pc, #84]	; (80063b0 <UART_AdvFeatureConfig+0x160>)
 800635a:	4013      	ands	r3, r2
 800635c:	0019      	movs	r1, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636e:	2280      	movs	r2, #128	; 0x80
 8006370:	4013      	ands	r3, r2
 8006372:	d00b      	beq.n	800638c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	4a0e      	ldr	r2, [pc, #56]	; (80063b4 <UART_AdvFeatureConfig+0x164>)
 800637c:	4013      	ands	r3, r2
 800637e:	0019      	movs	r1, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	605a      	str	r2, [r3, #4]
  }
}
 800638c:	46c0      	nop			; (mov r8, r8)
 800638e:	46bd      	mov	sp, r7
 8006390:	b002      	add	sp, #8
 8006392:	bd80      	pop	{r7, pc}
 8006394:	fffdffff 	.word	0xfffdffff
 8006398:	fffeffff 	.word	0xfffeffff
 800639c:	fffbffff 	.word	0xfffbffff
 80063a0:	ffff7fff 	.word	0xffff7fff
 80063a4:	ffffefff 	.word	0xffffefff
 80063a8:	ffffdfff 	.word	0xffffdfff
 80063ac:	ffefffff 	.word	0xffefffff
 80063b0:	ff9fffff 	.word	0xff9fffff
 80063b4:	fff7ffff 	.word	0xfff7ffff

080063b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af02      	add	r7, sp, #8
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2290      	movs	r2, #144	; 0x90
 80063c4:	2100      	movs	r1, #0
 80063c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063c8:	f7fb ff90 	bl	80022ec <HAL_GetTick>
 80063cc:	0003      	movs	r3, r0
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2208      	movs	r2, #8
 80063d8:	4013      	ands	r3, r2
 80063da:	2b08      	cmp	r3, #8
 80063dc:	d10c      	bne.n	80063f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2280      	movs	r2, #128	; 0x80
 80063e2:	0391      	lsls	r1, r2, #14
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	4a1a      	ldr	r2, [pc, #104]	; (8006450 <UART_CheckIdleState+0x98>)
 80063e8:	9200      	str	r2, [sp, #0]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f000 f832 	bl	8006454 <UART_WaitOnFlagUntilTimeout>
 80063f0:	1e03      	subs	r3, r0, #0
 80063f2:	d001      	beq.n	80063f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e026      	b.n	8006446 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2204      	movs	r2, #4
 8006400:	4013      	ands	r3, r2
 8006402:	2b04      	cmp	r3, #4
 8006404:	d10c      	bne.n	8006420 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2280      	movs	r2, #128	; 0x80
 800640a:	03d1      	lsls	r1, r2, #15
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	4a10      	ldr	r2, [pc, #64]	; (8006450 <UART_CheckIdleState+0x98>)
 8006410:	9200      	str	r2, [sp, #0]
 8006412:	2200      	movs	r2, #0
 8006414:	f000 f81e 	bl	8006454 <UART_WaitOnFlagUntilTimeout>
 8006418:	1e03      	subs	r3, r0, #0
 800641a:	d001      	beq.n	8006420 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e012      	b.n	8006446 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2288      	movs	r2, #136	; 0x88
 8006424:	2120      	movs	r1, #32
 8006426:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	228c      	movs	r2, #140	; 0x8c
 800642c:	2120      	movs	r1, #32
 800642e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2284      	movs	r2, #132	; 0x84
 8006440:	2100      	movs	r1, #0
 8006442:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	0018      	movs	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	b004      	add	sp, #16
 800644c:	bd80      	pop	{r7, pc}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	01ffffff 	.word	0x01ffffff

08006454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b094      	sub	sp, #80	; 0x50
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	1dfb      	adds	r3, r7, #7
 8006462:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006464:	e0a7      	b.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006468:	3301      	adds	r3, #1
 800646a:	d100      	bne.n	800646e <UART_WaitOnFlagUntilTimeout+0x1a>
 800646c:	e0a3      	b.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646e:	f7fb ff3d 	bl	80022ec <HAL_GetTick>
 8006472:	0002      	movs	r2, r0
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800647a:	429a      	cmp	r2, r3
 800647c:	d302      	bcc.n	8006484 <UART_WaitOnFlagUntilTimeout+0x30>
 800647e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006480:	2b00      	cmp	r3, #0
 8006482:	d13f      	bne.n	8006504 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006484:	f3ef 8310 	mrs	r3, PRIMASK
 8006488:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800648c:	647b      	str	r3, [r7, #68]	; 0x44
 800648e:	2301      	movs	r3, #1
 8006490:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	f383 8810 	msr	PRIMASK, r3
}
 8006498:	46c0      	nop			; (mov r8, r8)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	494e      	ldr	r1, [pc, #312]	; (80065e0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80064a6:	400a      	ands	r2, r1
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ac:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	f383 8810 	msr	PRIMASK, r3
}
 80064b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b6:	f3ef 8310 	mrs	r3, PRIMASK
 80064ba:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80064bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064be:	643b      	str	r3, [r7, #64]	; 0x40
 80064c0:	2301      	movs	r3, #1
 80064c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c6:	f383 8810 	msr	PRIMASK, r3
}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2101      	movs	r1, #1
 80064d8:	438a      	bics	r2, r1
 80064da:	609a      	str	r2, [r3, #8]
 80064dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064de:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e2:	f383 8810 	msr	PRIMASK, r3
}
 80064e6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2288      	movs	r2, #136	; 0x88
 80064ec:	2120      	movs	r1, #32
 80064ee:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	228c      	movs	r2, #140	; 0x8c
 80064f4:	2120      	movs	r1, #32
 80064f6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2284      	movs	r2, #132	; 0x84
 80064fc:	2100      	movs	r1, #0
 80064fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e069      	b.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2204      	movs	r2, #4
 800650c:	4013      	ands	r3, r2
 800650e:	d052      	beq.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	69da      	ldr	r2, [r3, #28]
 8006516:	2380      	movs	r3, #128	; 0x80
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	401a      	ands	r2, r3
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	429a      	cmp	r2, r3
 8006522:	d148      	bne.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2280      	movs	r2, #128	; 0x80
 800652a:	0112      	lsls	r2, r2, #4
 800652c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800652e:	f3ef 8310 	mrs	r3, PRIMASK
 8006532:	613b      	str	r3, [r7, #16]
  return(result);
 8006534:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006538:	2301      	movs	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f383 8810 	msr	PRIMASK, r3
}
 8006542:	46c0      	nop			; (mov r8, r8)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4924      	ldr	r1, [pc, #144]	; (80065e0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006550:	400a      	ands	r2, r1
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006556:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f383 8810 	msr	PRIMASK, r3
}
 800655e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006560:	f3ef 8310 	mrs	r3, PRIMASK
 8006564:	61fb      	str	r3, [r7, #28]
  return(result);
 8006566:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006568:	64bb      	str	r3, [r7, #72]	; 0x48
 800656a:	2301      	movs	r3, #1
 800656c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	f383 8810 	msr	PRIMASK, r3
}
 8006574:	46c0      	nop			; (mov r8, r8)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2101      	movs	r1, #1
 8006582:	438a      	bics	r2, r1
 8006584:	609a      	str	r2, [r3, #8]
 8006586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	f383 8810 	msr	PRIMASK, r3
}
 8006590:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2288      	movs	r2, #136	; 0x88
 8006596:	2120      	movs	r1, #32
 8006598:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	228c      	movs	r2, #140	; 0x8c
 800659e:	2120      	movs	r1, #32
 80065a0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2290      	movs	r2, #144	; 0x90
 80065a6:	2120      	movs	r1, #32
 80065a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2284      	movs	r2, #132	; 0x84
 80065ae:	2100      	movs	r1, #0
 80065b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e010      	b.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	4013      	ands	r3, r2
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	425a      	negs	r2, r3
 80065c6:	4153      	adcs	r3, r2
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	001a      	movs	r2, r3
 80065cc:	1dfb      	adds	r3, r7, #7
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d100      	bne.n	80065d6 <UART_WaitOnFlagUntilTimeout+0x182>
 80065d4:	e747      	b.n	8006466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	0018      	movs	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	b014      	add	sp, #80	; 0x50
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	fffffe5f 	.word	0xfffffe5f

080065e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2284      	movs	r2, #132	; 0x84
 80065f0:	5c9b      	ldrb	r3, [r3, r2]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d101      	bne.n	80065fa <HAL_UARTEx_DisableFifoMode+0x16>
 80065f6:	2302      	movs	r3, #2
 80065f8:	e027      	b.n	800664a <HAL_UARTEx_DisableFifoMode+0x66>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2284      	movs	r2, #132	; 0x84
 80065fe:	2101      	movs	r1, #1
 8006600:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2288      	movs	r2, #136	; 0x88
 8006606:	2124      	movs	r1, #36	; 0x24
 8006608:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2101      	movs	r1, #1
 800661e:	438a      	bics	r2, r1
 8006620:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4a0b      	ldr	r2, [pc, #44]	; (8006654 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006626:	4013      	ands	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2288      	movs	r2, #136	; 0x88
 800663c:	2120      	movs	r1, #32
 800663e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2284      	movs	r2, #132	; 0x84
 8006644:	2100      	movs	r1, #0
 8006646:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	0018      	movs	r0, r3
 800664c:	46bd      	mov	sp, r7
 800664e:	b004      	add	sp, #16
 8006650:	bd80      	pop	{r7, pc}
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	dfffffff 	.word	0xdfffffff

08006658 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2284      	movs	r2, #132	; 0x84
 8006666:	5c9b      	ldrb	r3, [r3, r2]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d101      	bne.n	8006670 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800666c:	2302      	movs	r3, #2
 800666e:	e02e      	b.n	80066ce <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2284      	movs	r2, #132	; 0x84
 8006674:	2101      	movs	r1, #1
 8006676:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2288      	movs	r2, #136	; 0x88
 800667c:	2124      	movs	r1, #36	; 0x24
 800667e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2101      	movs	r1, #1
 8006694:	438a      	bics	r2, r1
 8006696:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	08d9      	lsrs	r1, r3, #3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	0018      	movs	r0, r3
 80066b0:	f000 f854 	bl	800675c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2288      	movs	r2, #136	; 0x88
 80066c0:	2120      	movs	r1, #32
 80066c2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2284      	movs	r2, #132	; 0x84
 80066c8:	2100      	movs	r1, #0
 80066ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	0018      	movs	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	b004      	add	sp, #16
 80066d4:	bd80      	pop	{r7, pc}
	...

080066d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2284      	movs	r2, #132	; 0x84
 80066e6:	5c9b      	ldrb	r3, [r3, r2]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e02f      	b.n	8006750 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2284      	movs	r2, #132	; 0x84
 80066f4:	2101      	movs	r1, #1
 80066f6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2288      	movs	r2, #136	; 0x88
 80066fc:	2124      	movs	r1, #36	; 0x24
 80066fe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2101      	movs	r1, #1
 8006714:	438a      	bics	r2, r1
 8006716:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	4a0e      	ldr	r2, [pc, #56]	; (8006758 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006720:	4013      	ands	r3, r2
 8006722:	0019      	movs	r1, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	0018      	movs	r0, r3
 8006732:	f000 f813 	bl	800675c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2288      	movs	r2, #136	; 0x88
 8006742:	2120      	movs	r1, #32
 8006744:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2284      	movs	r2, #132	; 0x84
 800674a:	2100      	movs	r1, #0
 800674c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	0018      	movs	r0, r3
 8006752:	46bd      	mov	sp, r7
 8006754:	b004      	add	sp, #16
 8006756:	bd80      	pop	{r7, pc}
 8006758:	f1ffffff 	.word	0xf1ffffff

0800675c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800675c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006768:	2b00      	cmp	r3, #0
 800676a:	d108      	bne.n	800677e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	226a      	movs	r2, #106	; 0x6a
 8006770:	2101      	movs	r1, #1
 8006772:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2268      	movs	r2, #104	; 0x68
 8006778:	2101      	movs	r1, #1
 800677a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800677c:	e043      	b.n	8006806 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800677e:	260f      	movs	r6, #15
 8006780:	19bb      	adds	r3, r7, r6
 8006782:	2208      	movs	r2, #8
 8006784:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006786:	200e      	movs	r0, #14
 8006788:	183b      	adds	r3, r7, r0
 800678a:	2208      	movs	r2, #8
 800678c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	0e5b      	lsrs	r3, r3, #25
 8006796:	b2da      	uxtb	r2, r3
 8006798:	240d      	movs	r4, #13
 800679a:	193b      	adds	r3, r7, r4
 800679c:	2107      	movs	r1, #7
 800679e:	400a      	ands	r2, r1
 80067a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	0f5b      	lsrs	r3, r3, #29
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	250c      	movs	r5, #12
 80067ae:	197b      	adds	r3, r7, r5
 80067b0:	2107      	movs	r1, #7
 80067b2:	400a      	ands	r2, r1
 80067b4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067b6:	183b      	adds	r3, r7, r0
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	197a      	adds	r2, r7, r5
 80067bc:	7812      	ldrb	r2, [r2, #0]
 80067be:	4914      	ldr	r1, [pc, #80]	; (8006810 <UARTEx_SetNbDataToProcess+0xb4>)
 80067c0:	5c8a      	ldrb	r2, [r1, r2]
 80067c2:	435a      	muls	r2, r3
 80067c4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80067c6:	197b      	adds	r3, r7, r5
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	4a12      	ldr	r2, [pc, #72]	; (8006814 <UARTEx_SetNbDataToProcess+0xb8>)
 80067cc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067ce:	0019      	movs	r1, r3
 80067d0:	f7f9 fd24 	bl	800021c <__divsi3>
 80067d4:	0003      	movs	r3, r0
 80067d6:	b299      	uxth	r1, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	226a      	movs	r2, #106	; 0x6a
 80067dc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067de:	19bb      	adds	r3, r7, r6
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	193a      	adds	r2, r7, r4
 80067e4:	7812      	ldrb	r2, [r2, #0]
 80067e6:	490a      	ldr	r1, [pc, #40]	; (8006810 <UARTEx_SetNbDataToProcess+0xb4>)
 80067e8:	5c8a      	ldrb	r2, [r1, r2]
 80067ea:	435a      	muls	r2, r3
 80067ec:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80067ee:	193b      	adds	r3, r7, r4
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	4a08      	ldr	r2, [pc, #32]	; (8006814 <UARTEx_SetNbDataToProcess+0xb8>)
 80067f4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067f6:	0019      	movs	r1, r3
 80067f8:	f7f9 fd10 	bl	800021c <__divsi3>
 80067fc:	0003      	movs	r3, r0
 80067fe:	b299      	uxth	r1, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2268      	movs	r2, #104	; 0x68
 8006804:	5299      	strh	r1, [r3, r2]
}
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	46bd      	mov	sp, r7
 800680a:	b005      	add	sp, #20
 800680c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	08006994 	.word	0x08006994
 8006814:	0800699c 	.word	0x0800699c

08006818 <__libc_init_array>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	2600      	movs	r6, #0
 800681c:	4d0c      	ldr	r5, [pc, #48]	; (8006850 <__libc_init_array+0x38>)
 800681e:	4c0d      	ldr	r4, [pc, #52]	; (8006854 <__libc_init_array+0x3c>)
 8006820:	1b64      	subs	r4, r4, r5
 8006822:	10a4      	asrs	r4, r4, #2
 8006824:	42a6      	cmp	r6, r4
 8006826:	d109      	bne.n	800683c <__libc_init_array+0x24>
 8006828:	2600      	movs	r6, #0
 800682a:	f000 f821 	bl	8006870 <_init>
 800682e:	4d0a      	ldr	r5, [pc, #40]	; (8006858 <__libc_init_array+0x40>)
 8006830:	4c0a      	ldr	r4, [pc, #40]	; (800685c <__libc_init_array+0x44>)
 8006832:	1b64      	subs	r4, r4, r5
 8006834:	10a4      	asrs	r4, r4, #2
 8006836:	42a6      	cmp	r6, r4
 8006838:	d105      	bne.n	8006846 <__libc_init_array+0x2e>
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	00b3      	lsls	r3, r6, #2
 800683e:	58eb      	ldr	r3, [r5, r3]
 8006840:	4798      	blx	r3
 8006842:	3601      	adds	r6, #1
 8006844:	e7ee      	b.n	8006824 <__libc_init_array+0xc>
 8006846:	00b3      	lsls	r3, r6, #2
 8006848:	58eb      	ldr	r3, [r5, r3]
 800684a:	4798      	blx	r3
 800684c:	3601      	adds	r6, #1
 800684e:	e7f2      	b.n	8006836 <__libc_init_array+0x1e>
 8006850:	080069ac 	.word	0x080069ac
 8006854:	080069ac 	.word	0x080069ac
 8006858:	080069ac 	.word	0x080069ac
 800685c:	080069b0 	.word	0x080069b0

08006860 <memset>:
 8006860:	0003      	movs	r3, r0
 8006862:	1882      	adds	r2, r0, r2
 8006864:	4293      	cmp	r3, r2
 8006866:	d100      	bne.n	800686a <memset+0xa>
 8006868:	4770      	bx	lr
 800686a:	7019      	strb	r1, [r3, #0]
 800686c:	3301      	adds	r3, #1
 800686e:	e7f9      	b.n	8006864 <memset+0x4>

08006870 <_init>:
 8006870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006876:	bc08      	pop	{r3}
 8006878:	469e      	mov	lr, r3
 800687a:	4770      	bx	lr

0800687c <_fini>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	46c0      	nop			; (mov r8, r8)
 8006880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006882:	bc08      	pop	{r3}
 8006884:	469e      	mov	lr, r3
 8006886:	4770      	bx	lr
