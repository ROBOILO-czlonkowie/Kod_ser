
SER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005050  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051ec  080051ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080051ec  080051ec  000151ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051f4  080051f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f4  080051f4  000151f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051f8  080051f8  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000000c  08005208  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08005208  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c03  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e0  00000000  00000000  00035c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00038618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  00039920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f0b  00000000  00000000  0003ab30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b2c  00000000  00000000  00053a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a418d  00000000  00000000  00069567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d6f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045fc  00000000  00000000  0010d744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080050f8 	.word	0x080050f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080050f8 	.word	0x080050f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fecc 	bl	80013c0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f85e 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 fb64 	bl	8000cf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000630:	f000 fb44 	bl	8000cbc <MX_DMA_Init>
  MX_ADC1_Init();
 8000634:	f000 f8b0 	bl	8000798 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000638:	f000 f95c 	bl	80008f4 <MX_SPI1_Init>
  MX_TIM1_Init();
 800063c:	f000 f998 	bl	8000970 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000640:	f000 fa4e 	bl	8000ae0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000644:	f000 fab8 	bl	8000bb8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000648:	f000 fb04 	bl	8000c54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 // HAL_ADC_Start_DMA(&hadc1, ADC_readout, 6);

  //to do battery_type
  HAL_GPIO_WritePin(KILLSWITCH_GPIO_Port, KILLSWITCH_Pin, GPIO_PIN_SET);
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	019b      	lsls	r3, r3, #6
 8000650:	481f      	ldr	r0, [pc, #124]	; (80006d0 <main+0xb0>)
 8000652:	2201      	movs	r2, #1
 8000654:	0019      	movs	r1, r3
 8000656:	f002 f917 	bl	8002888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_A_GPIO_Port, ENABLE_A_Pin, GPIO_PIN_SET);
 800065a:	2380      	movs	r3, #128	; 0x80
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	481c      	ldr	r0, [pc, #112]	; (80006d0 <main+0xb0>)
 8000660:	2201      	movs	r2, #1
 8000662:	0019      	movs	r1, r3
 8000664:	f002 f910 	bl	8002888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_B_GPIO_Port, ENABLE_B_Pin, GPIO_PIN_SET);
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	01db      	lsls	r3, r3, #7
 800066c:	4818      	ldr	r0, [pc, #96]	; (80006d0 <main+0xb0>)
 800066e:	2201      	movs	r2, #1
 8000670:	0019      	movs	r1, r3
 8000672:	f002 f909 	bl	8002888 <HAL_GPIO_WritePin>

  TIM1->CCR1 = 3100;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <main+0xb4>)
 8000678:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <main+0xb8>)
 800067a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 5;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <main+0xb4>)
 800067e:	2205      	movs	r2, #5
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  TIM3->CCR1 = 3100;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <main+0xbc>)
 8000684:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <main+0xb8>)
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 5;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <main+0xbc>)
 800068a:	2205      	movs	r2, #5
 800068c:	639a      	str	r2, [r3, #56]	; 0x38

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <main+0xc0>)
 8000690:	2100      	movs	r1, #0
 8000692:	0018      	movs	r0, r3
 8000694:	f003 f8ec 	bl	8003870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <main+0xc0>)
 800069a:	2104      	movs	r1, #4
 800069c:	0018      	movs	r0, r3
 800069e:	f003 f8e7 	bl	8003870 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <main+0xc4>)
 80006a4:	2100      	movs	r1, #0
 80006a6:	0018      	movs	r0, r3
 80006a8:	f003 f8e2 	bl	8003870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <main+0xc4>)
 80006ae:	2104      	movs	r1, #4
 80006b0:	0018      	movs	r0, r3
 80006b2:	f003 f8dd 	bl	8003870 <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 80006b6:	23fa      	movs	r3, #250	; 0xfa
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 ff06 	bl	80014cc <HAL_Delay>
  HAL_GPIO_WritePin(KILLSWITCH_GPIO_Port, KILLSWITCH_Pin, GPIO_PIN_RESET);
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	019b      	lsls	r3, r3, #6
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <main+0xb0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	0019      	movs	r1, r3
 80006ca:	f002 f8dd 	bl	8002888 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <main+0xae>
 80006d0:	50000400 	.word	0x50000400
 80006d4:	40012c00 	.word	0x40012c00
 80006d8:	00000c1c 	.word	0x00000c1c
 80006dc:	40000400 	.word	0x40000400
 80006e0:	2000014c 	.word	0x2000014c
 80006e4:	20000198 	.word	0x20000198

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b093      	sub	sp, #76	; 0x4c
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	2410      	movs	r4, #16
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	0018      	movs	r0, r3
 80006f4:	2338      	movs	r3, #56	; 0x38
 80006f6:	001a      	movs	r2, r3
 80006f8:	2100      	movs	r1, #0
 80006fa:	f004 fcf5 	bl	80050e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fe:	003b      	movs	r3, r7
 8000700:	0018      	movs	r0, r3
 8000702:	2310      	movs	r3, #16
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f004 fcee 	bl	80050e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	0018      	movs	r0, r3
 8000712:	f002 f8d7 	bl	80028c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2201      	movs	r2, #1
 800071a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	0252      	lsls	r2, r2, #9
 8000722:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	0021      	movs	r1, r4
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2202      	movs	r2, #2
 800072a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2203      	movs	r2, #3
 8000730:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2208      	movs	r2, #8
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	0292      	lsls	r2, r2, #10
 8000744:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0492      	lsls	r2, r2, #18
 800074c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0592      	lsls	r2, r2, #22
 8000754:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	187b      	adds	r3, r7, r1
 8000758:	0018      	movs	r0, r3
 800075a:	f002 f8ff 	bl	800295c <HAL_RCC_OscConfig>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000762:	f000 fb71 	bl	8000e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	003b      	movs	r3, r7
 8000768:	2207      	movs	r2, #7
 800076a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	003b      	movs	r3, r7
 800076e:	2202      	movs	r2, #2
 8000770:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	003b      	movs	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000778:	003b      	movs	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077e:	003b      	movs	r3, r7
 8000780:	2102      	movs	r1, #2
 8000782:	0018      	movs	r0, r3
 8000784:	f002 fc04 	bl	8002f90 <HAL_RCC_ClockConfig>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800078c:	f000 fb5c 	bl	8000e48 <Error_Handler>
  }
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b013      	add	sp, #76	; 0x4c
 8000796:	bd90      	pop	{r4, r7, pc}

08000798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	0018      	movs	r0, r3
 80007a2:	230c      	movs	r3, #12
 80007a4:	001a      	movs	r2, r3
 80007a6:	2100      	movs	r1, #0
 80007a8:	f004 fc9e 	bl	80050e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ac:	4b49      	ldr	r3, [pc, #292]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80007ae:	4a4a      	ldr	r2, [pc, #296]	; (80008d8 <MX_ADC1_Init+0x140>)
 80007b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007b2:	4b48      	ldr	r3, [pc, #288]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	05d2      	lsls	r2, r2, #23
 80007b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ba:	4b46      	ldr	r3, [pc, #280]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c0:	4b44      	ldr	r3, [pc, #272]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80007c6:	4b43      	ldr	r3, [pc, #268]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	0612      	lsls	r2, r2, #24
 80007cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ce:	4b41      	ldr	r3, [pc, #260]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007d4:	4b3f      	ldr	r3, [pc, #252]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007da:	4b3e      	ldr	r3, [pc, #248]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007e0:	4b3c      	ldr	r3, [pc, #240]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80007e6:	4b3b      	ldr	r3, [pc, #236]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ec:	4b39      	ldr	r3, [pc, #228]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f2:	4b38      	ldr	r3, [pc, #224]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007f8:	4b36      	ldr	r3, [pc, #216]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80007fa:	222c      	movs	r2, #44	; 0x2c
 80007fc:	2101      	movs	r1, #1
 80007fe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000800:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <MX_ADC1_Init+0x13c>)
 8000802:	2200      	movs	r2, #0
 8000804:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 8000806:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <MX_ADC1_Init+0x13c>)
 8000808:	2202      	movs	r2, #2
 800080a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800080c:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <MX_ADC1_Init+0x13c>)
 800080e:	223c      	movs	r2, #60	; 0x3c
 8000810:	2100      	movs	r1, #0
 8000812:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000814:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <MX_ADC1_Init+0x13c>)
 8000816:	2200      	movs	r2, #0
 8000818:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081a:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <MX_ADC1_Init+0x13c>)
 800081c:	0018      	movs	r0, r3
 800081e:	f000 ff95 	bl	800174c <HAL_ADC_Init>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000826:	f000 fb0f 	bl	8000e48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4a2b      	ldr	r2, [pc, #172]	; (80008dc <MX_ADC1_Init+0x144>)
 800082e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2201      	movs	r2, #1
 8000834:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000836:	1d3a      	adds	r2, r7, #4
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <MX_ADC1_Init+0x13c>)
 800083a:	0011      	movs	r1, r2
 800083c:	0018      	movs	r0, r3
 800083e:	f001 fa5d 	bl	8001cfc <HAL_ADC_ConfigChannel>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000846:	f000 faff 	bl	8000e48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4a24      	ldr	r2, [pc, #144]	; (80008e0 <MX_ADC1_Init+0x148>)
 800084e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000850:	1d3a      	adds	r2, r7, #4
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_ADC1_Init+0x13c>)
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f001 fa50 	bl	8001cfc <HAL_ADC_ConfigChannel>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000860:	f000 faf2 	bl	8000e48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4a1f      	ldr	r2, [pc, #124]	; (80008e4 <MX_ADC1_Init+0x14c>)
 8000868:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	1d3a      	adds	r2, r7, #4
 800086c:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_ADC1_Init+0x13c>)
 800086e:	0011      	movs	r1, r2
 8000870:	0018      	movs	r0, r3
 8000872:	f001 fa43 	bl	8001cfc <HAL_ADC_ConfigChannel>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800087a:	f000 fae5 	bl	8000e48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <MX_ADC1_Init+0x150>)
 8000882:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000884:	1d3a      	adds	r2, r7, #4
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_ADC1_Init+0x13c>)
 8000888:	0011      	movs	r1, r2
 800088a:	0018      	movs	r0, r3
 800088c:	f001 fa36 	bl	8001cfc <HAL_ADC_ConfigChannel>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000894:	f000 fad8 	bl	8000e48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4a14      	ldr	r2, [pc, #80]	; (80008ec <MX_ADC1_Init+0x154>)
 800089c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089e:	1d3a      	adds	r2, r7, #4
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f001 fa29 	bl	8001cfc <HAL_ADC_ConfigChannel>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80008ae:	f000 facb 	bl	8000e48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <MX_ADC1_Init+0x158>)
 80008b6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b8:	1d3a      	adds	r2, r7, #4
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_ADC1_Init+0x13c>)
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 fa1c 	bl	8001cfc <HAL_ADC_ConfigChannel>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80008c8:	f000 fabe 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b004      	add	sp, #16
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000028 	.word	0x20000028
 80008d8:	40012400 	.word	0x40012400
 80008dc:	04000002 	.word	0x04000002
 80008e0:	10000010 	.word	0x10000010
 80008e4:	14000020 	.word	0x14000020
 80008e8:	18000040 	.word	0x18000040
 80008ec:	20000100 	.word	0x20000100
 80008f0:	24000200 	.word	0x24000200

080008f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_SPI1_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <MX_SPI1_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_SPI1_Init+0x74>)
 8000900:	2282      	movs	r2, #130	; 0x82
 8000902:	0052      	lsls	r2, r2, #1
 8000904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_SPI1_Init+0x74>)
 800090e:	22e0      	movs	r2, #224	; 0xe0
 8000910:	00d2      	lsls	r2, r2, #3
 8000912:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_SPI1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_SPI1_Init+0x74>)
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	0092      	lsls	r2, r2, #2
 8000926:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_SPI1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_SPI1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_SPI1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_SPI1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_SPI1_Init+0x74>)
 8000942:	2207      	movs	r2, #7
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_SPI1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_SPI1_Init+0x74>)
 800094e:	2208      	movs	r2, #8
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <MX_SPI1_Init+0x74>)
 8000954:	0018      	movs	r0, r3
 8000956:	f002 fe7b 	bl	8003650 <HAL_SPI_Init>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800095e:	f000 fa73 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000e8 	.word	0x200000e8
 800096c:	40013000 	.word	0x40013000

08000970 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b098      	sub	sp, #96	; 0x60
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000976:	2354      	movs	r3, #84	; 0x54
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	0018      	movs	r0, r3
 800097c:	230c      	movs	r3, #12
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f004 fbb1 	bl	80050e8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000986:	2338      	movs	r3, #56	; 0x38
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	0018      	movs	r0, r3
 800098c:	231c      	movs	r3, #28
 800098e:	001a      	movs	r2, r3
 8000990:	2100      	movs	r1, #0
 8000992:	f004 fba9 	bl	80050e8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	0018      	movs	r0, r3
 800099a:	2334      	movs	r3, #52	; 0x34
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f004 fba2 	bl	80050e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009a4:	4b4b      	ldr	r3, [pc, #300]	; (8000ad4 <MX_TIM1_Init+0x164>)
 80009a6:	4a4c      	ldr	r2, [pc, #304]	; (8000ad8 <MX_TIM1_Init+0x168>)
 80009a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009aa:	4b4a      	ldr	r3, [pc, #296]	; (8000ad4 <MX_TIM1_Init+0x164>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b0:	4b48      	ldr	r3, [pc, #288]	; (8000ad4 <MX_TIM1_Init+0x164>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 80009b6:	4b47      	ldr	r3, [pc, #284]	; (8000ad4 <MX_TIM1_Init+0x164>)
 80009b8:	4a48      	ldr	r2, [pc, #288]	; (8000adc <MX_TIM1_Init+0x16c>)
 80009ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b45      	ldr	r3, [pc, #276]	; (8000ad4 <MX_TIM1_Init+0x164>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009c2:	4b44      	ldr	r3, [pc, #272]	; (8000ad4 <MX_TIM1_Init+0x164>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b42      	ldr	r3, [pc, #264]	; (8000ad4 <MX_TIM1_Init+0x164>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009ce:	4b41      	ldr	r3, [pc, #260]	; (8000ad4 <MX_TIM1_Init+0x164>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f002 fef5 	bl	80037c0 <HAL_TIM_PWM_Init>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009da:	f000 fa35 	bl	8000e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2154      	movs	r1, #84	; 0x54
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f2:	187a      	adds	r2, r7, r1
 80009f4:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <MX_TIM1_Init+0x164>)
 80009f6:	0011      	movs	r1, r2
 80009f8:	0018      	movs	r0, r3
 80009fa:	f003 fc8b 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a02:	f000 fa21 	bl	8000e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a06:	2138      	movs	r1, #56	; 0x38
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2260      	movs	r2, #96	; 0x60
 8000a0c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a32:	1879      	adds	r1, r7, r1
 8000a34:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <MX_TIM1_Init+0x164>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f003 f803 	bl	8003a44 <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000a42:	f000 fa01 	bl	8000e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a46:	2338      	movs	r3, #56	; 0x38
 8000a48:	18f9      	adds	r1, r7, r3
 8000a4a:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <MX_TIM1_Init+0x164>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 fff8 	bl	8003a44 <HAL_TIM_PWM_ConfigChannel>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000a58:	f000 f9f6 	bl	8000e48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	0192      	lsls	r2, r2, #6
 8000a80:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	0492      	lsls	r2, r2, #18
 8000a9a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aae:	1d3a      	adds	r2, r7, #4
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_TIM1_Init+0x164>)
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f003 fc9b 	bl	80043f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aba:	1e03      	subs	r3, r0, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000abe:	f000 f9c3 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <MX_TIM1_Init+0x164>)
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f000 fb17 	bl	80010f8 <HAL_TIM_MspPostInit>

}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b018      	add	sp, #96	; 0x60
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	2000014c 	.word	0x2000014c
 8000ad8:	40012c00 	.word	0x40012c00
 8000adc:	00000c7f 	.word	0x00000c7f

08000ae0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae6:	231c      	movs	r3, #28
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	0018      	movs	r0, r3
 8000aec:	230c      	movs	r3, #12
 8000aee:	001a      	movs	r2, r3
 8000af0:	2100      	movs	r1, #0
 8000af2:	f004 faf9 	bl	80050e8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af6:	003b      	movs	r3, r7
 8000af8:	0018      	movs	r0, r3
 8000afa:	231c      	movs	r3, #28
 8000afc:	001a      	movs	r2, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	f004 faf2 	bl	80050e8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <MX_TIM3_Init+0xcc>)
 8000b06:	4a2a      	ldr	r2, [pc, #168]	; (8000bb0 <MX_TIM3_Init+0xd0>)
 8000b08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	; (8000bac <MX_TIM3_Init+0xcc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <MX_TIM3_Init+0xcc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3199;
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <MX_TIM3_Init+0xcc>)
 8000b18:	4a26      	ldr	r2, [pc, #152]	; (8000bb4 <MX_TIM3_Init+0xd4>)
 8000b1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <MX_TIM3_Init+0xcc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b22      	ldr	r3, [pc, #136]	; (8000bac <MX_TIM3_Init+0xcc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <MX_TIM3_Init+0xcc>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f002 fe48 	bl	80037c0 <HAL_TIM_PWM_Init>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000b34:	f000 f988 	bl	8000e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b38:	211c      	movs	r1, #28
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b46:	187a      	adds	r2, r7, r1
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <MX_TIM3_Init+0xcc>)
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f003 fbe1 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8000b52:	1e03      	subs	r3, r0, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000b56:	f000 f977 	bl	8000e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	2260      	movs	r2, #96	; 0x60
 8000b5e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b60:	003b      	movs	r3, r7
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b72:	0039      	movs	r1, r7
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <MX_TIM3_Init+0xcc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f002 ff63 	bl	8003a44 <HAL_TIM_PWM_ConfigChannel>
 8000b7e:	1e03      	subs	r3, r0, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000b82:	f000 f961 	bl	8000e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b86:	0039      	movs	r1, r7
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_TIM3_Init+0xcc>)
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f002 ff59 	bl	8003a44 <HAL_TIM_PWM_ConfigChannel>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000b96:	f000 f957 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <MX_TIM3_Init+0xcc>)
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 faab 	bl	80010f8 <HAL_TIM_MspPostInit>

}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b00a      	add	sp, #40	; 0x28
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	20000198 	.word	0x20000198
 8000bb0:	40000400 	.word	0x40000400
 8000bb4:	00000c7f 	.word	0x00000c7f

08000bb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bbc:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000bbe:	4a24      	ldr	r2, [pc, #144]	; (8000c50 <MX_USART1_UART_Init+0x98>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bc2:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000bc4:	22e1      	movs	r2, #225	; 0xe1
 8000bc6:	0252      	lsls	r2, r2, #9
 8000bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f003 fc9a 	bl	800453c <HAL_UART_Init>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c0c:	f000 f91c 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000c12:	2100      	movs	r1, #0
 8000c14:	0018      	movs	r0, r3
 8000c16:	f004 f963 	bl	8004ee0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c1a:	1e03      	subs	r3, r0, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c1e:	f000 f913 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000c24:	2100      	movs	r1, #0
 8000c26:	0018      	movs	r0, r3
 8000c28:	f004 f99a 	bl	8004f60 <HAL_UARTEx_SetRxFifoThreshold>
 8000c2c:	1e03      	subs	r3, r0, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c30:	f000 f90a 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f004 f918 	bl	8004e6c <HAL_UARTEx_DisableFifoMode>
 8000c3c:	1e03      	subs	r3, r0, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c40:	f000 f902 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	200001e4 	.word	0x200001e4
 8000c50:	40013800 	.word	0x40013800

08000c54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_USART2_UART_Init+0x60>)
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <MX_USART2_UART_Init+0x64>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_USART2_UART_Init+0x60>)
 8000c60:	22e1      	movs	r2, #225	; 0xe1
 8000c62:	0252      	lsls	r2, r2, #9
 8000c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_USART2_UART_Init+0x60>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_USART2_UART_Init+0x60>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_USART2_UART_Init+0x60>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_USART2_UART_Init+0x60>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <MX_USART2_UART_Init+0x60>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USART2_UART_Init+0x60>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_USART2_UART_Init+0x60>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_USART2_UART_Init+0x60>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_USART2_UART_Init+0x60>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <MX_USART2_UART_Init+0x60>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f003 fc4c 	bl	800453c <HAL_UART_Init>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d001      	beq.n	8000cac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ca8:	f000 f8ce 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	20000278 	.word	0x20000278
 8000cb8:	40004400 	.word	0x40004400

08000cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_DMA_Init+0x38>)
 8000cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_DMA_Init+0x38>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	639a      	str	r2, [r3, #56]	; 0x38
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_DMA_Init+0x38>)
 8000cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2009      	movs	r0, #9
 8000ce0:	f001 fab0 	bl	8002244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ce4:	2009      	movs	r0, #9
 8000ce6:	f001 fac2 	bl	800226e <HAL_NVIC_EnableIRQ>

}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b08b      	sub	sp, #44	; 0x2c
 8000cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	2414      	movs	r4, #20
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	0018      	movs	r0, r3
 8000d04:	2314      	movs	r3, #20
 8000d06:	001a      	movs	r2, r3
 8000d08:	2100      	movs	r1, #0
 8000d0a:	f004 f9ed 	bl	80050e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b4a      	ldr	r3, [pc, #296]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d12:	4b49      	ldr	r3, [pc, #292]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d14:	2104      	movs	r1, #4
 8000d16:	430a      	orrs	r2, r1
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
 8000d1a:	4b47      	ldr	r3, [pc, #284]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1e:	2204      	movs	r2, #4
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d26:	4b44      	ldr	r3, [pc, #272]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d2a:	4b43      	ldr	r3, [pc, #268]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d2c:	2120      	movs	r1, #32
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34
 8000d32:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d36:	2220      	movs	r2, #32
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d42:	4b3d      	ldr	r3, [pc, #244]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	430a      	orrs	r2, r1
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
 8000d4a:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d5a:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	635a      	str	r2, [r3, #52]	; 0x34
 8000d62:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d66:	2202      	movs	r2, #2
 8000d68:	4013      	ands	r3, r2
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6e:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d72:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d74:	2108      	movs	r1, #8
 8000d76:	430a      	orrs	r2, r1
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
 8000d7a:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7e:	2208      	movs	r2, #8
 8000d80:	4013      	ands	r3, r2
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KILLSWITCH_Pin|ENABLE_B_Pin|ENABLE_A_Pin, GPIO_PIN_RESET);
 8000d86:	23e0      	movs	r3, #224	; 0xe0
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	482c      	ldr	r0, [pc, #176]	; (8000e3c <MX_GPIO_Init+0x144>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	0019      	movs	r1, r3
 8000d90:	f001 fd7a 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d94:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <MX_GPIO_Init+0x148>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	2101      	movs	r1, #1
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f001 fd74 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	22e0      	movs	r2, #224	; 0xe0
 8000da4:	0212      	lsls	r2, r2, #8
 8000da6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	4a23      	ldr	r2, [pc, #140]	; (8000e44 <MX_GPIO_Init+0x14c>)
 8000db8:	0019      	movs	r1, r3
 8000dba:	0010      	movs	r0, r2
 8000dbc:	f001 fc00 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KILLSWITCH_Pin ENABLE_B_Pin ENABLE_A_Pin */
  GPIO_InitStruct.Pin = KILLSWITCH_Pin|ENABLE_B_Pin|ENABLE_A_Pin;
 8000dc0:	0021      	movs	r1, r4
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	22e0      	movs	r2, #224	; 0xe0
 8000dc6:	0212      	lsls	r2, r2, #8
 8000dc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	000c      	movs	r4, r1
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2201      	movs	r2, #1
 8000dd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	193b      	adds	r3, r7, r4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <MX_GPIO_Init+0x144>)
 8000de2:	0019      	movs	r1, r3
 8000de4:	0010      	movs	r0, r2
 8000de6:	f001 fbeb 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	2201      	movs	r2, #1
 8000df4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <MX_GPIO_Init+0x148>)
 8000e06:	0019      	movs	r1, r3
 8000e08:	0010      	movs	r0, r2
 8000e0a:	f001 fbd9 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e0e:	0021      	movs	r1, r4
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2208      	movs	r2, #8
 8000e14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <MX_GPIO_Init+0x148>)
 8000e26:	0019      	movs	r1, r3
 8000e28:	0010      	movs	r0, r2
 8000e2a:	f001 fbc9 	bl	80025c0 <HAL_GPIO_Init>

}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b00b      	add	sp, #44	; 0x2c
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	50000400 	.word	0x50000400
 8000e40:	50000c00 	.word	0x50000c00
 8000e44:	50000800 	.word	0x50000800

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <Error_Handler+0x8>
	...

08000e54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_MspInit+0x44>)
 8000e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_MspInit+0x44>)
 8000e60:	2101      	movs	r1, #1
 8000e62:	430a      	orrs	r2, r1
 8000e64:	641a      	str	r2, [r3, #64]	; 0x40
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_MspInit+0x44>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_MspInit+0x44>)
 8000e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_MspInit+0x44>)
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	0549      	lsls	r1, r1, #21
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_MspInit+0x44>)
 8000e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	055b      	lsls	r3, r3, #21
 8000e88:	4013      	ands	r3, r2
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b002      	add	sp, #8
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	40021000 	.word	0x40021000

08000e9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b08b      	sub	sp, #44	; 0x2c
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	2414      	movs	r4, #20
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	2314      	movs	r3, #20
 8000eac:	001a      	movs	r2, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f004 f91a 	bl	80050e8 <memset>
  if(hadc->Instance==ADC1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a3f      	ldr	r2, [pc, #252]	; (8000fb8 <HAL_ADC_MspInit+0x11c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d177      	bne.n	8000fae <HAL_ADC_MspInit+0x112>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ebe:	4b3f      	ldr	r3, [pc, #252]	; (8000fbc <HAL_ADC_MspInit+0x120>)
 8000ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec2:	4b3e      	ldr	r3, [pc, #248]	; (8000fbc <HAL_ADC_MspInit+0x120>)
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	0349      	lsls	r1, r1, #13
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	641a      	str	r2, [r3, #64]	; 0x40
 8000ecc:	4b3b      	ldr	r3, [pc, #236]	; (8000fbc <HAL_ADC_MspInit+0x120>)
 8000ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	035b      	lsls	r3, r3, #13
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <HAL_ADC_MspInit+0x120>)
 8000edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ede:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <HAL_ADC_MspInit+0x120>)
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee6:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <HAL_ADC_MspInit+0x120>)
 8000ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eea:	2201      	movs	r2, #1
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <HAL_ADC_MspInit+0x120>)
 8000ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef6:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <HAL_ADC_MspInit+0x120>)
 8000ef8:	2102      	movs	r1, #2
 8000efa:	430a      	orrs	r2, r1
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34
 8000efe:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <HAL_ADC_MspInit+0x120>)
 8000f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f02:	2202      	movs	r2, #2
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	2272      	movs	r2, #114	; 0x72
 8000f0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	2203      	movs	r2, #3
 8000f14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	193a      	adds	r2, r7, r4
 8000f1e:	23a0      	movs	r3, #160	; 0xa0
 8000f20:	05db      	lsls	r3, r3, #23
 8000f22:	0011      	movs	r1, r2
 8000f24:	0018      	movs	r0, r3
 8000f26:	f001 fb4b 	bl	80025c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f30:	193b      	adds	r3, r7, r4
 8000f32:	2203      	movs	r2, #3
 8000f34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <HAL_ADC_MspInit+0x124>)
 8000f40:	0019      	movs	r1, r3
 8000f42:	0010      	movs	r0, r2
 8000f44:	f001 fb3c 	bl	80025c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_ADC_MspInit+0x128>)
 8000f4a:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <HAL_ADC_MspInit+0x12c>)
 8000f4c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <HAL_ADC_MspInit+0x128>)
 8000f50:	2205      	movs	r2, #5
 8000f52:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_ADC_MspInit+0x128>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_ADC_MspInit+0x128>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_ADC_MspInit+0x128>)
 8000f62:	2280      	movs	r2, #128	; 0x80
 8000f64:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_ADC_MspInit+0x128>)
 8000f68:	2280      	movs	r2, #128	; 0x80
 8000f6a:	0052      	lsls	r2, r2, #1
 8000f6c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_ADC_MspInit+0x128>)
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	00d2      	lsls	r2, r2, #3
 8000f74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_ADC_MspInit+0x128>)
 8000f78:	2220      	movs	r2, #32
 8000f7a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_ADC_MspInit+0x128>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_ADC_MspInit+0x128>)
 8000f84:	0018      	movs	r0, r3
 8000f86:	f001 f98f 	bl	80022a8 <HAL_DMA_Init>
 8000f8a:	1e03      	subs	r3, r0, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8000f8e:	f7ff ff5b 	bl	8000e48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_ADC_MspInit+0x128>)
 8000f96:	651a      	str	r2, [r3, #80]	; 0x50
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_ADC_MspInit+0x128>)
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200c      	movs	r0, #12
 8000fa4:	f001 f94e 	bl	8002244 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f001 f960 	bl	800226e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b00b      	add	sp, #44	; 0x2c
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	40012400 	.word	0x40012400
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	50000400 	.word	0x50000400
 8000fc4:	2000008c 	.word	0x2000008c
 8000fc8:	40020008 	.word	0x40020008

08000fcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b08b      	sub	sp, #44	; 0x2c
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	2414      	movs	r4, #20
 8000fd6:	193b      	adds	r3, r7, r4
 8000fd8:	0018      	movs	r0, r3
 8000fda:	2314      	movs	r3, #20
 8000fdc:	001a      	movs	r2, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f004 f882 	bl	80050e8 <memset>
  if(hspi->Instance==SPI1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <HAL_SPI_MspInit+0x8c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d12f      	bne.n	800104e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <HAL_SPI_MspInit+0x90>)
 8000ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_SPI_MspInit+0x90>)
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	0149      	lsls	r1, r1, #5
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	641a      	str	r2, [r3, #64]	; 0x40
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_SPI_MspInit+0x90>)
 8000ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	015b      	lsls	r3, r3, #5
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_SPI_MspInit+0x90>)
 800100c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_SPI_MspInit+0x90>)
 8001010:	2102      	movs	r1, #2
 8001012:	430a      	orrs	r2, r1
 8001014:	635a      	str	r2, [r3, #52]	; 0x34
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_SPI_MspInit+0x90>)
 8001018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800101a:	2202      	movs	r2, #2
 800101c:	4013      	ands	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001022:	0021      	movs	r1, r4
 8001024:	187b      	adds	r3, r7, r1
 8001026:	2238      	movs	r2, #56	; 0x38
 8001028:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2202      	movs	r2, #2
 800102e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	187b      	adds	r3, r7, r1
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	187b      	adds	r3, r7, r1
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	187b      	adds	r3, r7, r1
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <HAL_SPI_MspInit+0x94>)
 8001046:	0019      	movs	r1, r3
 8001048:	0010      	movs	r0, r2
 800104a:	f001 fab9 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b00b      	add	sp, #44	; 0x2c
 8001054:	bd90      	pop	{r4, r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	40013000 	.word	0x40013000
 800105c:	40021000 	.word	0x40021000
 8001060:	50000400 	.word	0x50000400

08001064 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b091      	sub	sp, #68	; 0x44
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800106c:	2410      	movs	r4, #16
 800106e:	193b      	adds	r3, r7, r4
 8001070:	0018      	movs	r0, r3
 8001072:	2330      	movs	r3, #48	; 0x30
 8001074:	001a      	movs	r2, r3
 8001076:	2100      	movs	r1, #0
 8001078:	f004 f836 	bl	80050e8 <memset>
  if(htim_pwm->Instance==TIM1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a1a      	ldr	r2, [pc, #104]	; (80010ec <HAL_TIM_PWM_MspInit+0x88>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d11d      	bne.n	80010c2 <HAL_TIM_PWM_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001086:	193b      	adds	r3, r7, r4
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	0392      	lsls	r2, r2, #14
 800108c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800108e:	193b      	adds	r3, r7, r4
 8001090:	2200      	movs	r2, #0
 8001092:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001094:	193b      	adds	r3, r7, r4
 8001096:	0018      	movs	r0, r3
 8001098:	f002 f922 	bl	80032e0 <HAL_RCCEx_PeriphCLKConfig>
 800109c:	1e03      	subs	r3, r0, #0
 800109e:	d001      	beq.n	80010a4 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 80010a0:	f7ff fed2 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 80010a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 80010aa:	2180      	movs	r1, #128	; 0x80
 80010ac:	0109      	lsls	r1, r1, #4
 80010ae:	430a      	orrs	r2, r1
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 80010b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	4013      	ands	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010c0:	e010      	b.n	80010e4 <HAL_TIM_PWM_MspInit+0x80>
  else if(htim_pwm->Instance==TIM3)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_TIM_PWM_MspInit+0x90>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d10b      	bne.n	80010e4 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 80010ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 80010d2:	2102      	movs	r1, #2
 80010d4:	430a      	orrs	r2, r1
 80010d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 80010da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010dc:	2202      	movs	r2, #2
 80010de:	4013      	ands	r3, r2
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b011      	add	sp, #68	; 0x44
 80010ea:	bd90      	pop	{r4, r7, pc}
 80010ec:	40012c00 	.word	0x40012c00
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40000400 	.word	0x40000400

080010f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b08b      	sub	sp, #44	; 0x2c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	2414      	movs	r4, #20
 8001102:	193b      	adds	r3, r7, r4
 8001104:	0018      	movs	r0, r3
 8001106:	2314      	movs	r3, #20
 8001108:	001a      	movs	r2, r3
 800110a:	2100      	movs	r1, #0
 800110c:	f003 ffec 	bl	80050e8 <memset>
  if(htim->Instance==TIM1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a29      	ldr	r2, [pc, #164]	; (80011bc <HAL_TIM_MspPostInit+0xc4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d124      	bne.n	8001164 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <HAL_TIM_MspPostInit+0xc8>)
 800111c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <HAL_TIM_MspPostInit+0xc8>)
 8001120:	2101      	movs	r1, #1
 8001122:	430a      	orrs	r2, r1
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <HAL_TIM_MspPostInit+0xc8>)
 8001128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112a:	2201      	movs	r2, #1
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001132:	193b      	adds	r3, r7, r4
 8001134:	22c0      	movs	r2, #192	; 0xc0
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	0021      	movs	r1, r4
 800113c:	187b      	adds	r3, r7, r1
 800113e:	2202      	movs	r2, #2
 8001140:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	187b      	adds	r3, r7, r1
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	187b      	adds	r3, r7, r1
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800114e:	187b      	adds	r3, r7, r1
 8001150:	2202      	movs	r2, #2
 8001152:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	187a      	adds	r2, r7, r1
 8001156:	23a0      	movs	r3, #160	; 0xa0
 8001158:	05db      	lsls	r3, r3, #23
 800115a:	0011      	movs	r1, r2
 800115c:	0018      	movs	r0, r3
 800115e:	f001 fa2f 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001162:	e026      	b.n	80011b2 <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM3)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <HAL_TIM_MspPostInit+0xcc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d121      	bne.n	80011b2 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_TIM_MspPostInit+0xc8>)
 8001170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_TIM_MspPostInit+0xc8>)
 8001174:	2104      	movs	r1, #4
 8001176:	430a      	orrs	r2, r1
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_TIM_MspPostInit+0xc8>)
 800117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117e:	2204      	movs	r2, #4
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001186:	2114      	movs	r1, #20
 8001188:	187b      	adds	r3, r7, r1
 800118a:	22c0      	movs	r2, #192	; 0xc0
 800118c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2202      	movs	r2, #2
 8001192:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2201      	movs	r2, #1
 80011a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_TIM_MspPostInit+0xd0>)
 80011aa:	0019      	movs	r1, r3
 80011ac:	0010      	movs	r0, r2
 80011ae:	f001 fa07 	bl	80025c0 <HAL_GPIO_Init>
}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b00b      	add	sp, #44	; 0x2c
 80011b8:	bd90      	pop	{r4, r7, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	40012c00 	.word	0x40012c00
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40000400 	.word	0x40000400
 80011c8:	50000800 	.word	0x50000800

080011cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b099      	sub	sp, #100	; 0x64
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	234c      	movs	r3, #76	; 0x4c
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	0018      	movs	r0, r3
 80011da:	2314      	movs	r3, #20
 80011dc:	001a      	movs	r2, r3
 80011de:	2100      	movs	r1, #0
 80011e0:	f003 ff82 	bl	80050e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e4:	241c      	movs	r4, #28
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	0018      	movs	r0, r3
 80011ea:	2330      	movs	r3, #48	; 0x30
 80011ec:	001a      	movs	r2, r3
 80011ee:	2100      	movs	r1, #0
 80011f0:	f003 ff7a 	bl	80050e8 <memset>
  if(huart->Instance==USART1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a3d      	ldr	r2, [pc, #244]	; (80012f0 <HAL_UART_MspInit+0x124>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d13e      	bne.n	800127c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001204:	193b      	adds	r3, r7, r4
 8001206:	2200      	movs	r2, #0
 8001208:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120a:	193b      	adds	r3, r7, r4
 800120c:	0018      	movs	r0, r3
 800120e:	f002 f867 	bl	80032e0 <HAL_RCCEx_PeriphCLKConfig>
 8001212:	1e03      	subs	r3, r0, #0
 8001214:	d001      	beq.n	800121a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001216:	f7ff fe17 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800121a:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <HAL_UART_MspInit+0x128>)
 800121c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800121e:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <HAL_UART_MspInit+0x128>)
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	01c9      	lsls	r1, r1, #7
 8001224:	430a      	orrs	r2, r1
 8001226:	641a      	str	r2, [r3, #64]	; 0x40
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <HAL_UART_MspInit+0x128>)
 800122a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	01db      	lsls	r3, r3, #7
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
 8001234:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <HAL_UART_MspInit+0x128>)
 8001238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800123a:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <HAL_UART_MspInit+0x128>)
 800123c:	2102      	movs	r1, #2
 800123e:	430a      	orrs	r2, r1
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <HAL_UART_MspInit+0x128>)
 8001244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001246:	2202      	movs	r2, #2
 8001248:	4013      	ands	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800124e:	214c      	movs	r1, #76	; 0x4c
 8001250:	187b      	adds	r3, r7, r1
 8001252:	22c0      	movs	r2, #192	; 0xc0
 8001254:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	187b      	adds	r3, r7, r1
 8001258:	2202      	movs	r2, #2
 800125a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	187b      	adds	r3, r7, r1
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	187b      	adds	r3, r7, r1
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001268:	187b      	adds	r3, r7, r1
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	187b      	adds	r3, r7, r1
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <HAL_UART_MspInit+0x12c>)
 8001272:	0019      	movs	r1, r3
 8001274:	0010      	movs	r0, r2
 8001276:	f001 f9a3 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800127a:	e035      	b.n	80012e8 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <HAL_UART_MspInit+0x130>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d130      	bne.n	80012e8 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_UART_MspInit+0x128>)
 8001288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <HAL_UART_MspInit+0x128>)
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	0289      	lsls	r1, r1, #10
 8001290:	430a      	orrs	r2, r1
 8001292:	63da      	str	r2, [r3, #60]	; 0x3c
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_UART_MspInit+0x128>)
 8001296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	029b      	lsls	r3, r3, #10
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_UART_MspInit+0x128>)
 80012a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_UART_MspInit+0x128>)
 80012a8:	2101      	movs	r1, #1
 80012aa:	430a      	orrs	r2, r1
 80012ac:	635a      	str	r2, [r3, #52]	; 0x34
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_UART_MspInit+0x128>)
 80012b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b2:	2201      	movs	r2, #1
 80012b4:	4013      	ands	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ba:	214c      	movs	r1, #76	; 0x4c
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	220c      	movs	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	2202      	movs	r2, #2
 80012c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2201      	movs	r2, #1
 80012d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	187a      	adds	r2, r7, r1
 80012dc:	23a0      	movs	r3, #160	; 0xa0
 80012de:	05db      	lsls	r3, r3, #23
 80012e0:	0011      	movs	r1, r2
 80012e2:	0018      	movs	r0, r3
 80012e4:	f001 f96c 	bl	80025c0 <HAL_GPIO_Init>
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b019      	add	sp, #100	; 0x64
 80012ee:	bd90      	pop	{r4, r7, pc}
 80012f0:	40013800 	.word	0x40013800
 80012f4:	40021000 	.word	0x40021000
 80012f8:	50000400 	.word	0x50000400
 80012fc:	40004400 	.word	0x40004400

08001300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <NMI_Handler+0x4>

08001306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <HardFault_Handler+0x4>

0800130c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001324:	f000 f8b6 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <DMA1_Channel1_IRQHandler+0x14>)
 8001336:	0018      	movs	r0, r3
 8001338:	f001 f840 	bl	80023bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	2000008c 	.word	0x2000008c

08001348 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <ADC1_COMP_IRQHandler+0x14>)
 800134e:	0018      	movs	r0, r3
 8001350:	f000 fba4 	bl	8001a9c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	20000028 	.word	0x20000028

08001360 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800136c:	480d      	ldr	r0, [pc, #52]	; (80013a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800136e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001370:	f7ff fff6 	bl	8001360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001376:	490d      	ldr	r1, [pc, #52]	; (80013ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <LoopForever+0xe>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800138c:	4c0a      	ldr	r4, [pc, #40]	; (80013b8 <LoopForever+0x16>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800139a:	f003 fe81 	bl	80050a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800139e:	f7ff f93f 	bl	8000620 <main>

080013a2 <LoopForever>:

LoopForever:
  b LoopForever
 80013a2:	e7fe      	b.n	80013a2 <LoopForever>
  ldr   r0, =_estack
 80013a4:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013b0:	080051fc 	.word	0x080051fc
  ldr r2, =_sbss
 80013b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013b8:	20000310 	.word	0x20000310

080013bc <AES_RNG_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <AES_RNG_IRQHandler>
	...

080013c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_Init+0x3c>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_Init+0x3c>)
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	0049      	lsls	r1, r1, #1
 80013d6:	430a      	orrs	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013da:	2003      	movs	r0, #3
 80013dc:	f000 f810 	bl	8001400 <HAL_InitTick>
 80013e0:	1e03      	subs	r3, r0, #0
 80013e2:	d003      	beq.n	80013ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
 80013ea:	e001      	b.n	80013f0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80013ec:	f7ff fd32 	bl	8000e54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	781b      	ldrb	r3, [r3, #0]
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40022000 	.word	0x40022000

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001408:	230f      	movs	r3, #15
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HAL_InitTick+0x88>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d02b      	beq.n	8001470 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <HAL_InitTick+0x8c>)
 800141a:	681c      	ldr	r4, [r3, #0]
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_InitTick+0x88>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	0019      	movs	r1, r3
 8001422:	23fa      	movs	r3, #250	; 0xfa
 8001424:	0098      	lsls	r0, r3, #2
 8001426:	f7fe fe6f 	bl	8000108 <__udivsi3>
 800142a:	0003      	movs	r3, r0
 800142c:	0019      	movs	r1, r3
 800142e:	0020      	movs	r0, r4
 8001430:	f7fe fe6a 	bl	8000108 <__udivsi3>
 8001434:	0003      	movs	r3, r0
 8001436:	0018      	movs	r0, r3
 8001438:	f000 ff29 	bl	800228e <HAL_SYSTICK_Config>
 800143c:	1e03      	subs	r3, r0, #0
 800143e:	d112      	bne.n	8001466 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b03      	cmp	r3, #3
 8001444:	d80a      	bhi.n	800145c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	2301      	movs	r3, #1
 800144a:	425b      	negs	r3, r3
 800144c:	2200      	movs	r2, #0
 800144e:	0018      	movs	r0, r3
 8001450:	f000 fef8 	bl	8002244 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_InitTick+0x90>)
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e00d      	b.n	8001478 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800145c:	230f      	movs	r3, #15
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
 8001464:	e008      	b.n	8001478 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001466:	230f      	movs	r3, #15
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e003      	b.n	8001478 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001470:	230f      	movs	r3, #15
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	2201      	movs	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001478:	230f      	movs	r3, #15
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	781b      	ldrb	r3, [r3, #0]
}
 800147e:	0018      	movs	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	b005      	add	sp, #20
 8001484:	bd90      	pop	{r4, r7, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	20000008 	.word	0x20000008
 800148c:	20000000 	.word	0x20000000
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_IncTick+0x1c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	001a      	movs	r2, r3
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_IncTick+0x20>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	18d2      	adds	r2, r2, r3
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_IncTick+0x20>)
 80014a6:	601a      	str	r2, [r3, #0]
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	20000008 	.word	0x20000008
 80014b4:	2000030c 	.word	0x2000030c

080014b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;
 80014bc:	4b02      	ldr	r3, [pc, #8]	; (80014c8 <HAL_GetTick+0x10>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	2000030c 	.word	0x2000030c

080014cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff fff0 	bl	80014b8 <HAL_GetTick>
 80014d8:	0003      	movs	r3, r0
 80014da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3301      	adds	r3, #1
 80014e4:	d005      	beq.n	80014f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_Delay+0x44>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	001a      	movs	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	189b      	adds	r3, r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	f7ff ffe0 	bl	80014b8 <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	429a      	cmp	r2, r3
 8001502:	d8f7      	bhi.n	80014f4 <HAL_Delay+0x28>
  {
  }
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b004      	add	sp, #16
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	20000008 	.word	0x20000008

08001514 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001524:	401a      	ands	r2, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	601a      	str	r2, [r3, #0]
}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	b002      	add	sp, #8
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	fe3fffff 	.word	0xfe3fffff

0800153c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	23e0      	movs	r3, #224	; 0xe0
 800154a:	045b      	lsls	r3, r3, #17
 800154c:	4013      	ands	r3, r2
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}

08001556 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	2104      	movs	r1, #4
 800156a:	400a      	ands	r2, r1
 800156c:	2107      	movs	r1, #7
 800156e:	4091      	lsls	r1, r2
 8001570:	000a      	movs	r2, r1
 8001572:	43d2      	mvns	r2, r2
 8001574:	401a      	ands	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2104      	movs	r1, #4
 800157a:	400b      	ands	r3, r1
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4099      	lsls	r1, r3
 8001580:	000b      	movs	r3, r1
 8001582:	431a      	orrs	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001588:	46c0      	nop			; (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b004      	add	sp, #16
 800158e:	bd80      	pop	{r7, pc}

08001590 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	2104      	movs	r1, #4
 80015a2:	400a      	ands	r2, r1
 80015a4:	2107      	movs	r1, #7
 80015a6:	4091      	lsls	r1, r2
 80015a8:	000a      	movs	r2, r1
 80015aa:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2104      	movs	r1, #4
 80015b0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80015b2:	40da      	lsrs	r2, r3
 80015b4:	0013      	movs	r3, r2
}
 80015b6:	0018      	movs	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b002      	add	sp, #8
 80015bc:	bd80      	pop	{r7, pc}

080015be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	23c0      	movs	r3, #192	; 0xc0
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	4013      	ands	r3, r2
 80015d0:	d101      	bne.n	80015d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}

080015e0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	211f      	movs	r1, #31
 80015f4:	400a      	ands	r2, r1
 80015f6:	210f      	movs	r1, #15
 80015f8:	4091      	lsls	r1, r2
 80015fa:	000a      	movs	r2, r1
 80015fc:	43d2      	mvns	r2, r2
 80015fe:	401a      	ands	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	0e9b      	lsrs	r3, r3, #26
 8001604:	210f      	movs	r1, #15
 8001606:	4019      	ands	r1, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	201f      	movs	r0, #31
 800160c:	4003      	ands	r3, r0
 800160e:	4099      	lsls	r1, r3
 8001610:	000b      	movs	r3, r1
 8001612:	431a      	orrs	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b004      	add	sp, #16
 800161e:	bd80      	pop	{r7, pc}

08001620 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	035b      	lsls	r3, r3, #13
 8001632:	0b5b      	lsrs	r3, r3, #13
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b002      	add	sp, #8
 8001640:	bd80      	pop	{r7, pc}

08001642 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	0352      	lsls	r2, r2, #13
 8001654:	0b52      	lsrs	r2, r2, #13
 8001656:	43d2      	mvns	r2, r2
 8001658:	401a      	ands	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b002      	add	sp, #8
 8001664:	bd80      	pop	{r7, pc}

08001666 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2203      	movs	r2, #3
 8001674:	4013      	ands	r3, r2
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b002      	add	sp, #8
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	0212      	lsls	r2, r2, #8
 8001694:	43d2      	mvns	r2, r2
 8001696:	401a      	ands	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	400b      	ands	r3, r1
 80016a0:	4904      	ldr	r1, [pc, #16]	; (80016b4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80016a2:	400b      	ands	r3, r1
 80016a4:	431a      	orrs	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b004      	add	sp, #16
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	07ffff00 	.word	0x07ffff00

080016b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	4a05      	ldr	r2, [pc, #20]	; (80016dc <LL_ADC_EnableInternalRegulator+0x24>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	0552      	lsls	r2, r2, #21
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	6fffffe8 	.word	0x6fffffe8

080016e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	055b      	lsls	r3, r3, #21
 80016f0:	401a      	ands	r2, r3
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	055b      	lsls	r3, r3, #21
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d101      	bne.n	80016fe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80016fe:	2300      	movs	r3, #0
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	b002      	add	sp, #8
 8001706:	bd80      	pop	{r7, pc}

08001708 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2201      	movs	r2, #1
 8001716:	4013      	ands	r3, r2
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <LL_ADC_IsEnabled+0x18>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <LL_ADC_IsEnabled+0x1a>
 8001720:	2300      	movs	r3, #0
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	b002      	add	sp, #8
 8001728:	bd80      	pop	{r7, pc}

0800172a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2204      	movs	r2, #4
 8001738:	4013      	ands	r3, r2
 800173a:	2b04      	cmp	r3, #4
 800173c:	d101      	bne.n	8001742 <LL_ADC_REG_IsConversionOngoing+0x18>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001742:	2300      	movs	r3, #0
}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	b002      	add	sp, #8
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001754:	231f      	movs	r3, #31
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e17f      	b.n	8001a72 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10a      	bne.n	8001790 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff fb8d 	bl	8000e9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2254      	movs	r2, #84	; 0x54
 800178c:	2100      	movs	r1, #0
 800178e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	0018      	movs	r0, r3
 8001796:	f7ff ffa3 	bl	80016e0 <LL_ADC_IsInternalRegulatorEnabled>
 800179a:	1e03      	subs	r3, r0, #0
 800179c:	d115      	bne.n	80017ca <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	0018      	movs	r0, r3
 80017a4:	f7ff ff88 	bl	80016b8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017a8:	4bb4      	ldr	r3, [pc, #720]	; (8001a7c <HAL_ADC_Init+0x330>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	49b4      	ldr	r1, [pc, #720]	; (8001a80 <HAL_ADC_Init+0x334>)
 80017ae:	0018      	movs	r0, r3
 80017b0:	f7fe fcaa 	bl	8000108 <__udivsi3>
 80017b4:	0003      	movs	r3, r0
 80017b6:	3301      	adds	r3, #1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017bc:	e002      	b.n	80017c4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f9      	bne.n	80017be <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7ff ff86 	bl	80016e0 <LL_ADC_IsInternalRegulatorEnabled>
 80017d4:	1e03      	subs	r3, r0, #0
 80017d6:	d10f      	bne.n	80017f8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	2210      	movs	r2, #16
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e8:	2201      	movs	r2, #1
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017f0:	231f      	movs	r3, #31
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	0018      	movs	r0, r3
 80017fe:	f7ff ff94 	bl	800172a <LL_ADC_REG_IsConversionOngoing>
 8001802:	0003      	movs	r3, r0
 8001804:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	2210      	movs	r2, #16
 800180c:	4013      	ands	r3, r2
 800180e:	d000      	beq.n	8001812 <HAL_ADC_Init+0xc6>
 8001810:	e122      	b.n	8001a58 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d000      	beq.n	800181a <HAL_ADC_Init+0xce>
 8001818:	e11e      	b.n	8001a58 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	4a99      	ldr	r2, [pc, #612]	; (8001a84 <HAL_ADC_Init+0x338>)
 8001820:	4013      	ands	r3, r2
 8001822:	2202      	movs	r2, #2
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	0018      	movs	r0, r3
 8001830:	f7ff ff6a 	bl	8001708 <LL_ADC_IsEnabled>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d000      	beq.n	800183a <HAL_ADC_Init+0xee>
 8001838:	e0ad      	b.n	8001996 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7e1b      	ldrb	r3, [r3, #24]
 8001842:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001844:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7e5b      	ldrb	r3, [r3, #25]
 800184a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800184c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7e9b      	ldrb	r3, [r3, #26]
 8001852:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001854:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <HAL_ADC_Init+0x118>
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	015b      	lsls	r3, r3, #5
 8001862:	e000      	b.n	8001866 <HAL_ADC_Init+0x11a>
 8001864:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001866:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800186c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b00      	cmp	r3, #0
 8001874:	da04      	bge.n	8001880 <HAL_ADC_Init+0x134>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	085b      	lsrs	r3, r3, #1
 800187e:	e001      	b.n	8001884 <HAL_ADC_Init+0x138>
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001884:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	212c      	movs	r1, #44	; 0x2c
 800188a:	5c5b      	ldrb	r3, [r3, r1]
 800188c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800188e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2220      	movs	r2, #32
 800189a:	5c9b      	ldrb	r3, [r3, r2]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d115      	bne.n	80018cc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7e9b      	ldrb	r3, [r3, #26]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d105      	bne.n	80018b4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	0252      	lsls	r2, r2, #9
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	e00b      	b.n	80018cc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	2220      	movs	r2, #32
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	2201      	movs	r2, #1
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00a      	beq.n	80018ea <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018d8:	23e0      	movs	r3, #224	; 0xe0
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80018e2:	4313      	orrs	r3, r2
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4a65      	ldr	r2, [pc, #404]	; (8001a88 <HAL_ADC_Init+0x33c>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	0f9b      	lsrs	r3, r3, #30
 8001906:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800190c:	4313      	orrs	r3, r2
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	4313      	orrs	r3, r2
 8001912:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	223c      	movs	r2, #60	; 0x3c
 8001918:	5c9b      	ldrb	r3, [r3, r2]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d111      	bne.n	8001942 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	0f9b      	lsrs	r3, r3, #30
 8001924:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800192a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001930:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001936:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	4313      	orrs	r3, r2
 800193c:	2201      	movs	r2, #1
 800193e:	4313      	orrs	r3, r2
 8001940:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	4a50      	ldr	r2, [pc, #320]	; (8001a8c <HAL_ADC_Init+0x340>)
 800194a:	4013      	ands	r3, r2
 800194c:	0019      	movs	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	430a      	orrs	r2, r1
 8001956:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	23c0      	movs	r3, #192	; 0xc0
 800195e:	061b      	lsls	r3, r3, #24
 8001960:	429a      	cmp	r2, r3
 8001962:	d018      	beq.n	8001996 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	05db      	lsls	r3, r3, #23
 800196c:	429a      	cmp	r2, r3
 800196e:	d012      	beq.n	8001996 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	061b      	lsls	r3, r3, #24
 8001978:	429a      	cmp	r2, r3
 800197a:	d00c      	beq.n	8001996 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800197c:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <HAL_ADC_Init+0x344>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a44      	ldr	r2, [pc, #272]	; (8001a94 <HAL_ADC_Init+0x348>)
 8001982:	4013      	ands	r3, r2
 8001984:	0019      	movs	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	23f0      	movs	r3, #240	; 0xf0
 800198c:	039b      	lsls	r3, r3, #14
 800198e:	401a      	ands	r2, r3
 8001990:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <HAL_ADC_Init+0x344>)
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199e:	001a      	movs	r2, r3
 80019a0:	2100      	movs	r1, #0
 80019a2:	f7ff fdd8 	bl	8001556 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ae:	493a      	ldr	r1, [pc, #232]	; (8001a98 <HAL_ADC_Init+0x34c>)
 80019b0:	001a      	movs	r2, r3
 80019b2:	f7ff fdd0 	bl	8001556 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2110      	movs	r1, #16
 80019ca:	4249      	negs	r1, r1
 80019cc:	430a      	orrs	r2, r1
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
 80019d0:	e018      	b.n	8001a04 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	039b      	lsls	r3, r3, #14
 80019da:	429a      	cmp	r2, r3
 80019dc:	d112      	bne.n	8001a04 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	221c      	movs	r2, #28
 80019ee:	4013      	ands	r3, r2
 80019f0:	2210      	movs	r2, #16
 80019f2:	4252      	negs	r2, r2
 80019f4:	409a      	lsls	r2, r3
 80019f6:	0011      	movs	r1, r2
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2100      	movs	r1, #0
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7ff fdc0 	bl	8001590 <LL_ADC_GetSamplingTimeCommonChannels>
 8001a10:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d10b      	bne.n	8001a32 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	2203      	movs	r2, #3
 8001a26:	4393      	bics	r3, r2
 8001a28:	2201      	movs	r2, #1
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a30:	e01c      	b.n	8001a6c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	2212      	movs	r2, #18
 8001a38:	4393      	bics	r3, r2
 8001a3a:	2210      	movs	r2, #16
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	2201      	movs	r2, #1
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001a4e:	231f      	movs	r3, #31
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a56:	e009      	b.n	8001a6c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	2210      	movs	r2, #16
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a64:	231f      	movs	r3, #31
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	2201      	movs	r2, #1
 8001a6a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001a6c:	231f      	movs	r3, #31
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	781b      	ldrb	r3, [r3, #0]
}
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b008      	add	sp, #32
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	00030d40 	.word	0x00030d40
 8001a84:	fffffefd 	.word	0xfffffefd
 8001a88:	fffe0201 	.word	0xfffe0201
 8001a8c:	1ffffc02 	.word	0x1ffffc02
 8001a90:	40012708 	.word	0x40012708
 8001a94:	ffc3ffff 	.word	0xffc3ffff
 8001a98:	07ffff04 	.word	0x07ffff04

08001a9c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2202      	movs	r2, #2
 8001abc:	4013      	ands	r3, r2
 8001abe:	d017      	beq.n	8001af0 <HAL_ADC_IRQHandler+0x54>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d013      	beq.n	8001af0 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	2210      	movs	r2, #16
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d106      	bne.n	8001ae0 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f000 faf2 	bl	80020cc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2202      	movs	r2, #2
 8001aee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2204      	movs	r2, #4
 8001af4:	4013      	ands	r3, r2
 8001af6:	d003      	beq.n	8001b00 <HAL_ADC_IRQHandler+0x64>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2204      	movs	r2, #4
 8001afc:	4013      	ands	r3, r2
 8001afe:	d107      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2208      	movs	r2, #8
 8001b04:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b06:	d04d      	beq.n	8001ba4 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d049      	beq.n	8001ba4 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	2210      	movs	r2, #16
 8001b16:	4013      	ands	r3, r2
 8001b18:	d106      	bne.n	8001b28 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff fd46 	bl	80015be <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b32:	1e03      	subs	r3, r0, #0
 8001b34:	d02e      	beq.n	8001b94 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7e9b      	ldrb	r3, [r3, #26]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d12a      	bne.n	8001b94 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2208      	movs	r2, #8
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d123      	bne.n	8001b94 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0018      	movs	r0, r3
 8001b52:	f7ff fdea 	bl	800172a <LL_ADC_REG_IsConversionOngoing>
 8001b56:	1e03      	subs	r3, r0, #0
 8001b58:	d110      	bne.n	8001b7c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	210c      	movs	r1, #12
 8001b66:	438a      	bics	r2, r1
 8001b68:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	4a56      	ldr	r2, [pc, #344]	; (8001cc8 <HAL_ADC_IRQHandler+0x22c>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	2201      	movs	r2, #1
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	659a      	str	r2, [r3, #88]	; 0x58
 8001b7a:	e00b      	b.n	8001b94 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	2220      	movs	r2, #32
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 f898 	bl	8001ccc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	220c      	movs	r2, #12
 8001ba2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d012      	beq.n	8001bd2 <HAL_ADC_IRQHandler+0x136>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d00e      	beq.n	8001bd2 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	0252      	lsls	r2, r2, #9
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f000 f889 	bl	8001cdc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d014      	beq.n	8001c06 <HAL_ADC_IRQHandler+0x16a>
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	d00f      	beq.n	8001c06 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	0292      	lsls	r2, r2, #10
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f000 fa58 	bl	80020ac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	0052      	lsls	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d014      	beq.n	8001c3a <HAL_ADC_IRQHandler+0x19e>
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4013      	ands	r3, r2
 8001c18:	d00f      	beq.n	8001c3a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	02d2      	lsls	r2, r2, #11
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f000 fa46 	bl	80020bc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2280      	movs	r2, #128	; 0x80
 8001c36:	0092      	lsls	r2, r2, #2
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d02b      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x1fe>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2210      	movs	r2, #16
 8001c46:	4013      	ands	r3, r2
 8001c48:	d027      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001c52:	2301      	movs	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	e008      	b.n	8001c6a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7ff fd02 	bl	8001666 <LL_ADC_REG_GetDMATransfer>
 8001c62:	1e03      	subs	r3, r0, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001c66:	2301      	movs	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d110      	bne.n	8001c92 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	2280      	movs	r2, #128	; 0x80
 8001c76:	00d2      	lsls	r2, r2, #3
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c82:	2202      	movs	r2, #2
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 f82d 	bl	8001cec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2210      	movs	r2, #16
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	019b      	lsls	r3, r3, #6
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d00d      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x224>
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	4013      	ands	r3, r2
 8001cac:	d008      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f000 fa13 	bl	80020dc <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	0192      	lsls	r2, r2, #6
 8001cbe:	601a      	str	r2, [r3, #0]
  }
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b006      	add	sp, #24
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	fffffefe 	.word	0xfffffefe

08001ccc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b002      	add	sp, #8
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d06:	2317      	movs	r3, #23
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2254      	movs	r2, #84	; 0x54
 8001d16:	5c9b      	ldrb	r3, [r3, r2]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x24>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e1c0      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x3a6>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2254      	movs	r2, #84	; 0x54
 8001d24:	2101      	movs	r1, #1
 8001d26:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7ff fcfc 	bl	800172a <LL_ADC_REG_IsConversionOngoing>
 8001d32:	1e03      	subs	r3, r0, #0
 8001d34:	d000      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x3c>
 8001d36:	e1a3      	b.n	8002080 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d100      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x46>
 8001d40:	e143      	b.n	8001fca <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	061b      	lsls	r3, r3, #24
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d004      	beq.n	8001d58 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d52:	4ac1      	ldr	r2, [pc, #772]	; (8002058 <HAL_ADC_ConfigChannel+0x35c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d108      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0019      	movs	r1, r3
 8001d62:	0010      	movs	r0, r2
 8001d64:	f7ff fc5c 	bl	8001620 <LL_ADC_REG_SetSequencerChAdd>
 8001d68:	e0c9      	b.n	8001efe <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	211f      	movs	r1, #31
 8001d74:	400b      	ands	r3, r1
 8001d76:	210f      	movs	r1, #15
 8001d78:	4099      	lsls	r1, r3
 8001d7a:	000b      	movs	r3, r1
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4013      	ands	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	035b      	lsls	r3, r3, #13
 8001d88:	0b5b      	lsrs	r3, r3, #13
 8001d8a:	d105      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x9c>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	0e9b      	lsrs	r3, r3, #26
 8001d92:	221f      	movs	r2, #31
 8001d94:	4013      	ands	r3, r2
 8001d96:	e098      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d000      	beq.n	8001da4 <HAL_ADC_ConfigChannel+0xa8>
 8001da2:	e091      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x1cc>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2202      	movs	r2, #2
 8001daa:	4013      	ands	r3, r2
 8001dac:	d000      	beq.n	8001db0 <HAL_ADC_ConfigChannel+0xb4>
 8001dae:	e089      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x1c8>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2204      	movs	r2, #4
 8001db6:	4013      	ands	r3, r2
 8001db8:	d000      	beq.n	8001dbc <HAL_ADC_ConfigChannel+0xc0>
 8001dba:	e081      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x1c4>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d000      	beq.n	8001dc8 <HAL_ADC_ConfigChannel+0xcc>
 8001dc6:	e079      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x1c0>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d000      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0xd8>
 8001dd2:	e071      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x1bc>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d000      	beq.n	8001de0 <HAL_ADC_ConfigChannel+0xe4>
 8001dde:	e069      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x1b8>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2240      	movs	r2, #64	; 0x40
 8001de6:	4013      	ands	r3, r2
 8001de8:	d000      	beq.n	8001dec <HAL_ADC_ConfigChannel+0xf0>
 8001dea:	e061      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x1b4>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	4013      	ands	r3, r2
 8001df4:	d000      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0xfc>
 8001df6:	e059      	b.n	8001eac <HAL_ADC_ConfigChannel+0x1b0>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4013      	ands	r3, r2
 8001e02:	d151      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x1ac>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d149      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1a8>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d141      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1a4>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	4013      	ands	r3, r2
 8001e26:	d139      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x1a0>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	015b      	lsls	r3, r3, #5
 8001e30:	4013      	ands	r3, r2
 8001e32:	d131      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x19c>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	019b      	lsls	r3, r3, #6
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d129      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x198>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	01db      	lsls	r3, r3, #7
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d121      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x194>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	4013      	ands	r3, r2
 8001e56:	d119      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x190>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	025b      	lsls	r3, r3, #9
 8001e60:	4013      	ands	r3, r2
 8001e62:	d111      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x18c>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	029b      	lsls	r3, r3, #10
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d109      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x188>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	02db      	lsls	r3, r3, #11
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d001      	beq.n	8001e80 <HAL_ADC_ConfigChannel+0x184>
 8001e7c:	2312      	movs	r3, #18
 8001e7e:	e024      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001e80:	2300      	movs	r3, #0
 8001e82:	e022      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001e84:	2311      	movs	r3, #17
 8001e86:	e020      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001e88:	2310      	movs	r3, #16
 8001e8a:	e01e      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	e01c      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001e90:	230e      	movs	r3, #14
 8001e92:	e01a      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001e94:	230d      	movs	r3, #13
 8001e96:	e018      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001e98:	230c      	movs	r3, #12
 8001e9a:	e016      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001e9c:	230b      	movs	r3, #11
 8001e9e:	e014      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001ea0:	230a      	movs	r3, #10
 8001ea2:	e012      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001ea4:	2309      	movs	r3, #9
 8001ea6:	e010      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	e00e      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001eac:	2307      	movs	r3, #7
 8001eae:	e00c      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001eb0:	2306      	movs	r3, #6
 8001eb2:	e00a      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001eb4:	2305      	movs	r3, #5
 8001eb6:	e008      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001eb8:	2304      	movs	r3, #4
 8001eba:	e006      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e004      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e002      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1ce>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	6852      	ldr	r2, [r2, #4]
 8001ece:	201f      	movs	r0, #31
 8001ed0:	4002      	ands	r2, r0
 8001ed2:	4093      	lsls	r3, r2
 8001ed4:	000a      	movs	r2, r1
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d808      	bhi.n	8001efe <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	001a      	movs	r2, r3
 8001efa:	f7ff fb71 	bl	80015e0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6819      	ldr	r1, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	f7ff fbb8 	bl	8001680 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db00      	blt.n	8001f1a <HAL_ADC_ConfigChannel+0x21e>
 8001f18:	e0bc      	b.n	8002094 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f1a:	4b50      	ldr	r3, [pc, #320]	; (800205c <HAL_ADC_ConfigChannel+0x360>)
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7ff fb0d 	bl	800153c <LL_ADC_GetCommonPathInternalCh>
 8001f22:	0003      	movs	r3, r0
 8001f24:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a4d      	ldr	r2, [pc, #308]	; (8002060 <HAL_ADC_ConfigChannel+0x364>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d122      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	041b      	lsls	r3, r3, #16
 8001f36:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f38:	d11d      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2280      	movs	r2, #128	; 0x80
 8001f3e:	0412      	lsls	r2, r2, #16
 8001f40:	4313      	orrs	r3, r2
 8001f42:	4a46      	ldr	r2, [pc, #280]	; (800205c <HAL_ADC_ConfigChannel+0x360>)
 8001f44:	0019      	movs	r1, r3
 8001f46:	0010      	movs	r0, r2
 8001f48:	f7ff fae4 	bl	8001514 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f4c:	4b45      	ldr	r3, [pc, #276]	; (8002064 <HAL_ADC_ConfigChannel+0x368>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4945      	ldr	r1, [pc, #276]	; (8002068 <HAL_ADC_ConfigChannel+0x36c>)
 8001f52:	0018      	movs	r0, r3
 8001f54:	f7fe f8d8 	bl	8000108 <__udivsi3>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	189b      	adds	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f66:	e002      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f9      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f74:	e08e      	b.n	8002094 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a3c      	ldr	r2, [pc, #240]	; (800206c <HAL_ADC_ConfigChannel+0x370>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d10e      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	045b      	lsls	r3, r3, #17
 8001f86:	4013      	ands	r3, r2
 8001f88:	d109      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	0452      	lsls	r2, r2, #17
 8001f90:	4313      	orrs	r3, r2
 8001f92:	4a32      	ldr	r2, [pc, #200]	; (800205c <HAL_ADC_ConfigChannel+0x360>)
 8001f94:	0019      	movs	r1, r3
 8001f96:	0010      	movs	r0, r2
 8001f98:	f7ff fabc 	bl	8001514 <LL_ADC_SetCommonPathInternalCh>
 8001f9c:	e07a      	b.n	8002094 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a33      	ldr	r2, [pc, #204]	; (8002070 <HAL_ADC_ConfigChannel+0x374>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d000      	beq.n	8001faa <HAL_ADC_ConfigChannel+0x2ae>
 8001fa8:	e074      	b.n	8002094 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	03db      	lsls	r3, r3, #15
 8001fb0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001fb2:	d000      	beq.n	8001fb6 <HAL_ADC_ConfigChannel+0x2ba>
 8001fb4:	e06e      	b.n	8002094 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2280      	movs	r2, #128	; 0x80
 8001fba:	03d2      	lsls	r2, r2, #15
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	4a27      	ldr	r2, [pc, #156]	; (800205c <HAL_ADC_ConfigChannel+0x360>)
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	0010      	movs	r0, r2
 8001fc4:	f7ff faa6 	bl	8001514 <LL_ADC_SetCommonPathInternalCh>
 8001fc8:	e064      	b.n	8002094 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d004      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fda:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <HAL_ADC_ConfigChannel+0x35c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d107      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0019      	movs	r1, r3
 8001fea:	0010      	movs	r0, r2
 8001fec:	f7ff fb29 	bl	8001642 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	da4d      	bge.n	8002094 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_ADC_ConfigChannel+0x360>)
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f7ff fa9e 	bl	800153c <LL_ADC_GetCommonPathInternalCh>
 8002000:	0003      	movs	r3, r0
 8002002:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a15      	ldr	r2, [pc, #84]	; (8002060 <HAL_ADC_ConfigChannel+0x364>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d108      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4a18      	ldr	r2, [pc, #96]	; (8002074 <HAL_ADC_ConfigChannel+0x378>)
 8002012:	4013      	ands	r3, r2
 8002014:	4a11      	ldr	r2, [pc, #68]	; (800205c <HAL_ADC_ConfigChannel+0x360>)
 8002016:	0019      	movs	r1, r3
 8002018:	0010      	movs	r0, r2
 800201a:	f7ff fa7b 	bl	8001514 <LL_ADC_SetCommonPathInternalCh>
 800201e:	e039      	b.n	8002094 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a11      	ldr	r2, [pc, #68]	; (800206c <HAL_ADC_ConfigChannel+0x370>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d108      	bne.n	800203c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4a12      	ldr	r2, [pc, #72]	; (8002078 <HAL_ADC_ConfigChannel+0x37c>)
 800202e:	4013      	ands	r3, r2
 8002030:	4a0a      	ldr	r2, [pc, #40]	; (800205c <HAL_ADC_ConfigChannel+0x360>)
 8002032:	0019      	movs	r1, r3
 8002034:	0010      	movs	r0, r2
 8002036:	f7ff fa6d 	bl	8001514 <LL_ADC_SetCommonPathInternalCh>
 800203a:	e02b      	b.n	8002094 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <HAL_ADC_ConfigChannel+0x374>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d126      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4a0c      	ldr	r2, [pc, #48]	; (800207c <HAL_ADC_ConfigChannel+0x380>)
 800204a:	4013      	ands	r3, r2
 800204c:	4a03      	ldr	r2, [pc, #12]	; (800205c <HAL_ADC_ConfigChannel+0x360>)
 800204e:	0019      	movs	r1, r3
 8002050:	0010      	movs	r0, r2
 8002052:	f7ff fa5f 	bl	8001514 <LL_ADC_SetCommonPathInternalCh>
 8002056:	e01d      	b.n	8002094 <HAL_ADC_ConfigChannel+0x398>
 8002058:	80000004 	.word	0x80000004
 800205c:	40012708 	.word	0x40012708
 8002060:	b0001000 	.word	0xb0001000
 8002064:	20000000 	.word	0x20000000
 8002068:	00030d40 	.word	0x00030d40
 800206c:	b8004000 	.word	0xb8004000
 8002070:	b4002000 	.word	0xb4002000
 8002074:	ff7fffff 	.word	0xff7fffff
 8002078:	feffffff 	.word	0xfeffffff
 800207c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	2220      	movs	r2, #32
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800208c:	2317      	movs	r3, #23
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2254      	movs	r2, #84	; 0x54
 8002098:	2100      	movs	r1, #0
 800209a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800209c:	2317      	movs	r3, #23
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	781b      	ldrb	r3, [r3, #0]
}
 80020a2:	0018      	movs	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b006      	add	sp, #24
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)

080020ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b002      	add	sp, #8
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b002      	add	sp, #8
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80020e4:	46c0      	nop			; (mov r8, r8)
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b002      	add	sp, #8
 80020ea:	bd80      	pop	{r7, pc}

080020ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	0002      	movs	r2, r0
 80020f4:	1dfb      	adds	r3, r7, #7
 80020f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020f8:	1dfb      	adds	r3, r7, #7
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b7f      	cmp	r3, #127	; 0x7f
 80020fe:	d809      	bhi.n	8002114 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002100:	1dfb      	adds	r3, r7, #7
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	001a      	movs	r2, r3
 8002106:	231f      	movs	r3, #31
 8002108:	401a      	ands	r2, r3
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <__NVIC_EnableIRQ+0x30>)
 800210c:	2101      	movs	r1, #1
 800210e:	4091      	lsls	r1, r2
 8002110:	000a      	movs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	b002      	add	sp, #8
 800211a:	bd80      	pop	{r7, pc}
 800211c:	e000e100 	.word	0xe000e100

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	0002      	movs	r2, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800212e:	1dfb      	adds	r3, r7, #7
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b7f      	cmp	r3, #127	; 0x7f
 8002134:	d828      	bhi.n	8002188 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002136:	4a2f      	ldr	r2, [pc, #188]	; (80021f4 <__NVIC_SetPriority+0xd4>)
 8002138:	1dfb      	adds	r3, r7, #7
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b25b      	sxtb	r3, r3
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	33c0      	adds	r3, #192	; 0xc0
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	589b      	ldr	r3, [r3, r2]
 8002146:	1dfa      	adds	r2, r7, #7
 8002148:	7812      	ldrb	r2, [r2, #0]
 800214a:	0011      	movs	r1, r2
 800214c:	2203      	movs	r2, #3
 800214e:	400a      	ands	r2, r1
 8002150:	00d2      	lsls	r2, r2, #3
 8002152:	21ff      	movs	r1, #255	; 0xff
 8002154:	4091      	lsls	r1, r2
 8002156:	000a      	movs	r2, r1
 8002158:	43d2      	mvns	r2, r2
 800215a:	401a      	ands	r2, r3
 800215c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	019b      	lsls	r3, r3, #6
 8002162:	22ff      	movs	r2, #255	; 0xff
 8002164:	401a      	ands	r2, r3
 8002166:	1dfb      	adds	r3, r7, #7
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	0018      	movs	r0, r3
 800216c:	2303      	movs	r3, #3
 800216e:	4003      	ands	r3, r0
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002174:	481f      	ldr	r0, [pc, #124]	; (80021f4 <__NVIC_SetPriority+0xd4>)
 8002176:	1dfb      	adds	r3, r7, #7
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b25b      	sxtb	r3, r3
 800217c:	089b      	lsrs	r3, r3, #2
 800217e:	430a      	orrs	r2, r1
 8002180:	33c0      	adds	r3, #192	; 0xc0
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002186:	e031      	b.n	80021ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002188:	4a1b      	ldr	r2, [pc, #108]	; (80021f8 <__NVIC_SetPriority+0xd8>)
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	0019      	movs	r1, r3
 8002190:	230f      	movs	r3, #15
 8002192:	400b      	ands	r3, r1
 8002194:	3b08      	subs	r3, #8
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	3306      	adds	r3, #6
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	18d3      	adds	r3, r2, r3
 800219e:	3304      	adds	r3, #4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	1dfa      	adds	r2, r7, #7
 80021a4:	7812      	ldrb	r2, [r2, #0]
 80021a6:	0011      	movs	r1, r2
 80021a8:	2203      	movs	r2, #3
 80021aa:	400a      	ands	r2, r1
 80021ac:	00d2      	lsls	r2, r2, #3
 80021ae:	21ff      	movs	r1, #255	; 0xff
 80021b0:	4091      	lsls	r1, r2
 80021b2:	000a      	movs	r2, r1
 80021b4:	43d2      	mvns	r2, r2
 80021b6:	401a      	ands	r2, r3
 80021b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	019b      	lsls	r3, r3, #6
 80021be:	22ff      	movs	r2, #255	; 0xff
 80021c0:	401a      	ands	r2, r3
 80021c2:	1dfb      	adds	r3, r7, #7
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	0018      	movs	r0, r3
 80021c8:	2303      	movs	r3, #3
 80021ca:	4003      	ands	r3, r0
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021d0:	4809      	ldr	r0, [pc, #36]	; (80021f8 <__NVIC_SetPriority+0xd8>)
 80021d2:	1dfb      	adds	r3, r7, #7
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	001c      	movs	r4, r3
 80021d8:	230f      	movs	r3, #15
 80021da:	4023      	ands	r3, r4
 80021dc:	3b08      	subs	r3, #8
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	430a      	orrs	r2, r1
 80021e2:	3306      	adds	r3, #6
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	18c3      	adds	r3, r0, r3
 80021e8:	3304      	adds	r3, #4
 80021ea:	601a      	str	r2, [r3, #0]
}
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b003      	add	sp, #12
 80021f2:	bd90      	pop	{r4, r7, pc}
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	1e5a      	subs	r2, r3, #1
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	045b      	lsls	r3, r3, #17
 800220c:	429a      	cmp	r2, r3
 800220e:	d301      	bcc.n	8002214 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002210:	2301      	movs	r3, #1
 8002212:	e010      	b.n	8002236 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <SysTick_Config+0x44>)
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	3a01      	subs	r2, #1
 800221a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221c:	2301      	movs	r3, #1
 800221e:	425b      	negs	r3, r3
 8002220:	2103      	movs	r1, #3
 8002222:	0018      	movs	r0, r3
 8002224:	f7ff ff7c 	bl	8002120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <SysTick_Config+0x44>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <SysTick_Config+0x44>)
 8002230:	2207      	movs	r2, #7
 8002232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002234:	2300      	movs	r3, #0
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b002      	add	sp, #8
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	e000e010 	.word	0xe000e010

08002244 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	210f      	movs	r1, #15
 8002250:	187b      	adds	r3, r7, r1
 8002252:	1c02      	adds	r2, r0, #0
 8002254:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	187b      	adds	r3, r7, r1
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b25b      	sxtb	r3, r3
 800225e:	0011      	movs	r1, r2
 8002260:	0018      	movs	r0, r3
 8002262:	f7ff ff5d 	bl	8002120 <__NVIC_SetPriority>
}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	46bd      	mov	sp, r7
 800226a:	b004      	add	sp, #16
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	0002      	movs	r2, r0
 8002276:	1dfb      	adds	r3, r7, #7
 8002278:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800227a:	1dfb      	adds	r3, r7, #7
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b25b      	sxtb	r3, r3
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff ff33 	bl	80020ec <__NVIC_EnableIRQ>
}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	46bd      	mov	sp, r7
 800228a:	b002      	add	sp, #8
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	0018      	movs	r0, r3
 800229a:	f7ff ffaf 	bl	80021fc <SysTick_Config>
 800229e:	0003      	movs	r3, r0
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b002      	add	sp, #8
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e077      	b.n	80023aa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a3d      	ldr	r2, [pc, #244]	; (80023b4 <HAL_DMA_Init+0x10c>)
 80022c0:	4694      	mov	ip, r2
 80022c2:	4463      	add	r3, ip
 80022c4:	2114      	movs	r1, #20
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7fd ff1e 	bl	8000108 <__udivsi3>
 80022cc:	0003      	movs	r3, r0
 80022ce:	009a      	lsls	r2, r3, #2
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2225      	movs	r2, #37	; 0x25
 80022d8:	2102      	movs	r1, #2
 80022da:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4934      	ldr	r1, [pc, #208]	; (80023b8 <HAL_DMA_Init+0x110>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6819      	ldr	r1, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	0018      	movs	r0, r3
 8002326:	f000 f8fb 	bl	8002520 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	01db      	lsls	r3, r3, #7
 8002332:	429a      	cmp	r2, r3
 8002334:	d102      	bne.n	800233c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	213f      	movs	r1, #63	; 0x3f
 8002346:	400a      	ands	r2, r1
 8002348:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002352:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d011      	beq.n	8002380 <HAL_DMA_Init+0xd8>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b04      	cmp	r3, #4
 8002362:	d80d      	bhi.n	8002380 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	0018      	movs	r0, r3
 8002368:	f000 f906 	bl	8002578 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	e008      	b.n	8002392 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2225      	movs	r2, #37	; 0x25
 800239c:	2101      	movs	r1, #1
 800239e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	2100      	movs	r1, #0
 80023a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b002      	add	sp, #8
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	bffdfff8 	.word	0xbffdfff8
 80023b8:	ffff800f 	.word	0xffff800f

080023bc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80023c4:	4b55      	ldr	r3, [pc, #340]	; (800251c <HAL_DMA_IRQHandler+0x160>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	221c      	movs	r2, #28
 80023d8:	4013      	ands	r3, r2
 80023da:	2204      	movs	r2, #4
 80023dc:	409a      	lsls	r2, r3
 80023de:	0013      	movs	r3, r2
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4013      	ands	r3, r2
 80023e4:	d027      	beq.n	8002436 <HAL_DMA_IRQHandler+0x7a>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2204      	movs	r2, #4
 80023ea:	4013      	ands	r3, r2
 80023ec:	d023      	beq.n	8002436 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2220      	movs	r2, #32
 80023f6:	4013      	ands	r3, r2
 80023f8:	d107      	bne.n	800240a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2104      	movs	r1, #4
 8002406:	438a      	bics	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800240a:	4b44      	ldr	r3, [pc, #272]	; (800251c <HAL_DMA_IRQHandler+0x160>)
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	221c      	movs	r2, #28
 8002414:	4013      	ands	r3, r2
 8002416:	2204      	movs	r2, #4
 8002418:	409a      	lsls	r2, r3
 800241a:	4b40      	ldr	r3, [pc, #256]	; (800251c <HAL_DMA_IRQHandler+0x160>)
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	2b00      	cmp	r3, #0
 8002426:	d100      	bne.n	800242a <HAL_DMA_IRQHandler+0x6e>
 8002428:	e073      	b.n	8002512 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	0010      	movs	r0, r2
 8002432:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002434:	e06d      	b.n	8002512 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	221c      	movs	r2, #28
 800243c:	4013      	ands	r3, r2
 800243e:	2202      	movs	r2, #2
 8002440:	409a      	lsls	r2, r3
 8002442:	0013      	movs	r3, r2
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	d02e      	beq.n	80024a8 <HAL_DMA_IRQHandler+0xec>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2202      	movs	r2, #2
 800244e:	4013      	ands	r3, r2
 8002450:	d02a      	beq.n	80024a8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2220      	movs	r2, #32
 800245a:	4013      	ands	r3, r2
 800245c:	d10b      	bne.n	8002476 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	210a      	movs	r1, #10
 800246a:	438a      	bics	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2225      	movs	r2, #37	; 0x25
 8002472:	2101      	movs	r1, #1
 8002474:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002476:	4b29      	ldr	r3, [pc, #164]	; (800251c <HAL_DMA_IRQHandler+0x160>)
 8002478:	6859      	ldr	r1, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	221c      	movs	r2, #28
 8002480:	4013      	ands	r3, r2
 8002482:	2202      	movs	r2, #2
 8002484:	409a      	lsls	r2, r3
 8002486:	4b25      	ldr	r3, [pc, #148]	; (800251c <HAL_DMA_IRQHandler+0x160>)
 8002488:	430a      	orrs	r2, r1
 800248a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2224      	movs	r2, #36	; 0x24
 8002490:	2100      	movs	r1, #0
 8002492:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	2b00      	cmp	r3, #0
 800249a:	d03a      	beq.n	8002512 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	0010      	movs	r0, r2
 80024a4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80024a6:	e034      	b.n	8002512 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	221c      	movs	r2, #28
 80024ae:	4013      	ands	r3, r2
 80024b0:	2208      	movs	r2, #8
 80024b2:	409a      	lsls	r2, r3
 80024b4:	0013      	movs	r3, r2
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4013      	ands	r3, r2
 80024ba:	d02b      	beq.n	8002514 <HAL_DMA_IRQHandler+0x158>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2208      	movs	r2, #8
 80024c0:	4013      	ands	r3, r2
 80024c2:	d027      	beq.n	8002514 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	210e      	movs	r1, #14
 80024d0:	438a      	bics	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_DMA_IRQHandler+0x160>)
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	221c      	movs	r2, #28
 80024de:	4013      	ands	r3, r2
 80024e0:	2201      	movs	r2, #1
 80024e2:	409a      	lsls	r2, r3
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_DMA_IRQHandler+0x160>)
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2225      	movs	r2, #37	; 0x25
 80024f4:	2101      	movs	r1, #1
 80024f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2224      	movs	r2, #36	; 0x24
 80024fc:	2100      	movs	r1, #0
 80024fe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	0010      	movs	r0, r2
 8002510:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46c0      	nop			; (mov r8, r8)
}
 8002516:	46bd      	mov	sp, r7
 8002518:	b004      	add	sp, #16
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40020000 	.word	0x40020000

08002520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	4a10      	ldr	r2, [pc, #64]	; (8002570 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002530:	4694      	mov	ip, r2
 8002532:	4463      	add	r3, ip
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	001a      	movs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	001a      	movs	r2, r3
 8002542:	23ff      	movs	r3, #255	; 0xff
 8002544:	4013      	ands	r3, r2
 8002546:	3b08      	subs	r3, #8
 8002548:	2114      	movs	r1, #20
 800254a:	0018      	movs	r0, r3
 800254c:	f7fd fddc 	bl	8000108 <__udivsi3>
 8002550:	0003      	movs	r3, r0
 8002552:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a07      	ldr	r2, [pc, #28]	; (8002574 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002558:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	221f      	movs	r2, #31
 800255e:	4013      	ands	r3, r2
 8002560:	2201      	movs	r2, #1
 8002562:	409a      	lsls	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b004      	add	sp, #16
 800256e:	bd80      	pop	{r7, pc}
 8002570:	10008200 	.word	0x10008200
 8002574:	40020880 	.word	0x40020880

08002578 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	223f      	movs	r2, #63	; 0x3f
 8002586:	4013      	ands	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800258e:	4694      	mov	ip, r2
 8002590:	4463      	add	r3, ip
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	001a      	movs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800259e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	4013      	ands	r3, r2
 80025a8:	2201      	movs	r2, #1
 80025aa:	409a      	lsls	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	659a      	str	r2, [r3, #88]	; 0x58
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b004      	add	sp, #16
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	1000823f 	.word	0x1000823f
 80025bc:	40020940 	.word	0x40020940

080025c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ce:	e147      	b.n	8002860 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4091      	lsls	r1, r2
 80025da:	000a      	movs	r2, r1
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d100      	bne.n	80025e8 <HAL_GPIO_Init+0x28>
 80025e6:	e138      	b.n	800285a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2203      	movs	r2, #3
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d005      	beq.n	8002600 <HAL_GPIO_Init+0x40>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2203      	movs	r2, #3
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d130      	bne.n	8002662 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	409a      	lsls	r2, r3
 800260e:	0013      	movs	r3, r2
 8002610:	43da      	mvns	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	409a      	lsls	r2, r3
 8002622:	0013      	movs	r3, r2
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002636:	2201      	movs	r2, #1
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	409a      	lsls	r2, r3
 800263c:	0013      	movs	r3, r2
 800263e:	43da      	mvns	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	2201      	movs	r2, #1
 800264e:	401a      	ands	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	409a      	lsls	r2, r3
 8002654:	0013      	movs	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2203      	movs	r2, #3
 8002668:	4013      	ands	r3, r2
 800266a:	2b03      	cmp	r3, #3
 800266c:	d017      	beq.n	800269e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	409a      	lsls	r2, r3
 800267c:	0013      	movs	r3, r2
 800267e:	43da      	mvns	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	409a      	lsls	r2, r3
 8002690:	0013      	movs	r3, r2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2203      	movs	r2, #3
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d123      	bne.n	80026f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	0092      	lsls	r2, r2, #2
 80026b4:	58d3      	ldr	r3, [r2, r3]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2207      	movs	r2, #7
 80026bc:	4013      	ands	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	409a      	lsls	r2, r3
 80026c4:	0013      	movs	r3, r2
 80026c6:	43da      	mvns	r2, r3
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2107      	movs	r1, #7
 80026d6:	400b      	ands	r3, r1
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	409a      	lsls	r2, r3
 80026dc:	0013      	movs	r3, r2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	08da      	lsrs	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3208      	adds	r2, #8
 80026ec:	0092      	lsls	r2, r2, #2
 80026ee:	6939      	ldr	r1, [r7, #16]
 80026f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	2203      	movs	r2, #3
 80026fe:	409a      	lsls	r2, r3
 8002700:	0013      	movs	r3, r2
 8002702:	43da      	mvns	r2, r3
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2203      	movs	r2, #3
 8002710:	401a      	ands	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	409a      	lsls	r2, r3
 8002718:	0013      	movs	r3, r2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	23c0      	movs	r3, #192	; 0xc0
 800272c:	029b      	lsls	r3, r3, #10
 800272e:	4013      	ands	r3, r2
 8002730:	d100      	bne.n	8002734 <HAL_GPIO_Init+0x174>
 8002732:	e092      	b.n	800285a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002734:	4a50      	ldr	r2, [pc, #320]	; (8002878 <HAL_GPIO_Init+0x2b8>)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3318      	adds	r3, #24
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	589b      	ldr	r3, [r3, r2]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2203      	movs	r2, #3
 8002746:	4013      	ands	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	220f      	movs	r2, #15
 800274c:	409a      	lsls	r2, r3
 800274e:	0013      	movs	r3, r2
 8002750:	43da      	mvns	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	23a0      	movs	r3, #160	; 0xa0
 800275c:	05db      	lsls	r3, r3, #23
 800275e:	429a      	cmp	r2, r3
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0x1ca>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a45      	ldr	r2, [pc, #276]	; (800287c <HAL_GPIO_Init+0x2bc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00d      	beq.n	8002786 <HAL_GPIO_Init+0x1c6>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a44      	ldr	r2, [pc, #272]	; (8002880 <HAL_GPIO_Init+0x2c0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <HAL_GPIO_Init+0x1c2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a43      	ldr	r2, [pc, #268]	; (8002884 <HAL_GPIO_Init+0x2c4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_GPIO_Init+0x1be>
 800277a:	2303      	movs	r3, #3
 800277c:	e006      	b.n	800278c <HAL_GPIO_Init+0x1cc>
 800277e:	2305      	movs	r3, #5
 8002780:	e004      	b.n	800278c <HAL_GPIO_Init+0x1cc>
 8002782:	2302      	movs	r3, #2
 8002784:	e002      	b.n	800278c <HAL_GPIO_Init+0x1cc>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x1cc>
 800278a:	2300      	movs	r3, #0
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	2103      	movs	r1, #3
 8002790:	400a      	ands	r2, r1
 8002792:	00d2      	lsls	r2, r2, #3
 8002794:	4093      	lsls	r3, r2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800279c:	4936      	ldr	r1, [pc, #216]	; (8002878 <HAL_GPIO_Init+0x2b8>)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3318      	adds	r3, #24
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027aa:	4b33      	ldr	r3, [pc, #204]	; (8002878 <HAL_GPIO_Init+0x2b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	43da      	mvns	r2, r3
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	035b      	lsls	r3, r3, #13
 80027c2:	4013      	ands	r3, r2
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027ce:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <HAL_GPIO_Init+0x2b8>)
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80027d4:	4b28      	ldr	r3, [pc, #160]	; (8002878 <HAL_GPIO_Init+0x2b8>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	43da      	mvns	r2, r3
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	039b      	lsls	r3, r3, #14
 80027ec:	4013      	ands	r3, r2
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027f8:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <HAL_GPIO_Init+0x2b8>)
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027fe:	4a1e      	ldr	r2, [pc, #120]	; (8002878 <HAL_GPIO_Init+0x2b8>)
 8002800:	2384      	movs	r3, #132	; 0x84
 8002802:	58d3      	ldr	r3, [r2, r3]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	43da      	mvns	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	029b      	lsls	r3, r3, #10
 8002818:	4013      	ands	r3, r2
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002824:	4914      	ldr	r1, [pc, #80]	; (8002878 <HAL_GPIO_Init+0x2b8>)
 8002826:	2284      	movs	r2, #132	; 0x84
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800282c:	4a12      	ldr	r2, [pc, #72]	; (8002878 <HAL_GPIO_Init+0x2b8>)
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	58d3      	ldr	r3, [r2, r3]
 8002832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	43da      	mvns	r2, r3
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	025b      	lsls	r3, r3, #9
 8002846:	4013      	ands	r3, r2
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002852:	4909      	ldr	r1, [pc, #36]	; (8002878 <HAL_GPIO_Init+0x2b8>)
 8002854:	2280      	movs	r2, #128	; 0x80
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	40da      	lsrs	r2, r3
 8002868:	1e13      	subs	r3, r2, #0
 800286a:	d000      	beq.n	800286e <HAL_GPIO_Init+0x2ae>
 800286c:	e6b0      	b.n	80025d0 <HAL_GPIO_Init+0x10>
  }
}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b006      	add	sp, #24
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021800 	.word	0x40021800
 800287c:	50000400 	.word	0x50000400
 8002880:	50000800 	.word	0x50000800
 8002884:	50000c00 	.word	0x50000c00

08002888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	0008      	movs	r0, r1
 8002892:	0011      	movs	r1, r2
 8002894:	1cbb      	adds	r3, r7, #2
 8002896:	1c02      	adds	r2, r0, #0
 8002898:	801a      	strh	r2, [r3, #0]
 800289a:	1c7b      	adds	r3, r7, #1
 800289c:	1c0a      	adds	r2, r1, #0
 800289e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028a0:	1c7b      	adds	r3, r7, #1
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028a8:	1cbb      	adds	r3, r7, #2
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028b0:	e003      	b.n	80028ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028b2:	1cbb      	adds	r3, r7, #2
 80028b4:	881a      	ldrh	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a19      	ldr	r2, [pc, #100]	; (8002938 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	4b17      	ldr	r3, [pc, #92]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	430a      	orrs	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d11f      	bne.n	8002928 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	0013      	movs	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	189b      	adds	r3, r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4912      	ldr	r1, [pc, #72]	; (8002940 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80028f6:	0018      	movs	r0, r3
 80028f8:	f7fd fc06 	bl	8000108 <__udivsi3>
 80028fc:	0003      	movs	r3, r0
 80028fe:	3301      	adds	r3, #1
 8002900:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002902:	e008      	b.n	8002916 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3b01      	subs	r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e001      	b.n	8002916 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e009      	b.n	800292a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	401a      	ands	r2, r3
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	429a      	cmp	r2, r3
 8002926:	d0ed      	beq.n	8002904 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b004      	add	sp, #16
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	40007000 	.word	0x40007000
 8002938:	fffff9ff 	.word	0xfffff9ff
 800293c:	20000000 	.word	0x20000000
 8002940:	000f4240 	.word	0x000f4240

08002944 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <LL_RCC_GetAPB1Prescaler+0x14>)
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	23e0      	movs	r3, #224	; 0xe0
 800294e:	01db      	lsls	r3, r3, #7
 8002950:	4013      	ands	r3, r2
}
 8002952:	0018      	movs	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000

0800295c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e2fe      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2201      	movs	r2, #1
 8002974:	4013      	ands	r3, r2
 8002976:	d100      	bne.n	800297a <HAL_RCC_OscConfig+0x1e>
 8002978:	e07c      	b.n	8002a74 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297a:	4bc3      	ldr	r3, [pc, #780]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2238      	movs	r2, #56	; 0x38
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002984:	4bc0      	ldr	r3, [pc, #768]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2203      	movs	r2, #3
 800298a:	4013      	ands	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b10      	cmp	r3, #16
 8002992:	d102      	bne.n	800299a <HAL_RCC_OscConfig+0x3e>
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d002      	beq.n	80029a0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2b08      	cmp	r3, #8
 800299e:	d10b      	bne.n	80029b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	4bb9      	ldr	r3, [pc, #740]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	4013      	ands	r3, r2
 80029aa:	d062      	beq.n	8002a72 <HAL_RCC_OscConfig+0x116>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d15e      	bne.n	8002a72 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e2d9      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	025b      	lsls	r3, r3, #9
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_OscConfig+0x78>
 80029c4:	4bb0      	ldr	r3, [pc, #704]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4baf      	ldr	r3, [pc, #700]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 80029ca:	2180      	movs	r1, #128	; 0x80
 80029cc:	0249      	lsls	r1, r1, #9
 80029ce:	430a      	orrs	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e020      	b.n	8002a16 <HAL_RCC_OscConfig+0xba>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	23a0      	movs	r3, #160	; 0xa0
 80029da:	02db      	lsls	r3, r3, #11
 80029dc:	429a      	cmp	r2, r3
 80029de:	d10e      	bne.n	80029fe <HAL_RCC_OscConfig+0xa2>
 80029e0:	4ba9      	ldr	r3, [pc, #676]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4ba8      	ldr	r3, [pc, #672]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 80029e6:	2180      	movs	r1, #128	; 0x80
 80029e8:	02c9      	lsls	r1, r1, #11
 80029ea:	430a      	orrs	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	4ba6      	ldr	r3, [pc, #664]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4ba5      	ldr	r3, [pc, #660]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	0249      	lsls	r1, r1, #9
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e00b      	b.n	8002a16 <HAL_RCC_OscConfig+0xba>
 80029fe:	4ba2      	ldr	r3, [pc, #648]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4ba1      	ldr	r3, [pc, #644]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002a04:	49a1      	ldr	r1, [pc, #644]	; (8002c8c <HAL_RCC_OscConfig+0x330>)
 8002a06:	400a      	ands	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	4b9f      	ldr	r3, [pc, #636]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4b9e      	ldr	r3, [pc, #632]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002a10:	499f      	ldr	r1, [pc, #636]	; (8002c90 <HAL_RCC_OscConfig+0x334>)
 8002a12:	400a      	ands	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d014      	beq.n	8002a48 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fd4b 	bl	80014b8 <HAL_GetTick>
 8002a22:	0003      	movs	r3, r0
 8002a24:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a28:	f7fe fd46 	bl	80014b8 <HAL_GetTick>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e298      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3a:	4b93      	ldr	r3, [pc, #588]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	029b      	lsls	r3, r3, #10
 8002a42:	4013      	ands	r3, r2
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0xcc>
 8002a46:	e015      	b.n	8002a74 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fd36 	bl	80014b8 <HAL_GetTick>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a52:	f7fe fd31 	bl	80014b8 <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b64      	cmp	r3, #100	; 0x64
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e283      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a64:	4b88      	ldr	r3, [pc, #544]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	029b      	lsls	r3, r3, #10
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0xf6>
 8002a70:	e000      	b.n	8002a74 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d100      	bne.n	8002a80 <HAL_RCC_OscConfig+0x124>
 8002a7e:	e099      	b.n	8002bb4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a80:	4b81      	ldr	r3, [pc, #516]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2238      	movs	r2, #56	; 0x38
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a8a:	4b7f      	ldr	r3, [pc, #508]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	4013      	ands	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d102      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x144>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d002      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d135      	bne.n	8002b12 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aa6:	4b78      	ldr	r3, [pc, #480]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d005      	beq.n	8002abe <HAL_RCC_OscConfig+0x162>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e256      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b72      	ldr	r3, [pc, #456]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4a74      	ldr	r2, [pc, #464]	; (8002c94 <HAL_RCC_OscConfig+0x338>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	021a      	lsls	r2, r3, #8
 8002ace:	4b6e      	ldr	r3, [pc, #440]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d112      	bne.n	8002b00 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ada:	4b6b      	ldr	r3, [pc, #428]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6e      	ldr	r2, [pc, #440]	; (8002c98 <HAL_RCC_OscConfig+0x33c>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	4b67      	ldr	r3, [pc, #412]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002aee:	4b66      	ldr	r3, [pc, #408]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	0adb      	lsrs	r3, r3, #11
 8002af4:	2207      	movs	r2, #7
 8002af6:	4013      	ands	r3, r2
 8002af8:	4a68      	ldr	r2, [pc, #416]	; (8002c9c <HAL_RCC_OscConfig+0x340>)
 8002afa:	40da      	lsrs	r2, r3
 8002afc:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <HAL_RCC_OscConfig+0x344>)
 8002afe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <HAL_RCC_OscConfig+0x348>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7fe fc7b 	bl	8001400 <HAL_InitTick>
 8002b0a:	1e03      	subs	r3, r0, #0
 8002b0c:	d051      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e22c      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d030      	beq.n	8002b7c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b1a:	4b5b      	ldr	r3, [pc, #364]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a5e      	ldr	r2, [pc, #376]	; (8002c98 <HAL_RCC_OscConfig+0x33c>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	4b57      	ldr	r3, [pc, #348]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002b2e:	4b56      	ldr	r3, [pc, #344]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4b55      	ldr	r3, [pc, #340]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002b34:	2180      	movs	r1, #128	; 0x80
 8002b36:	0049      	lsls	r1, r1, #1
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fcbc 	bl	80014b8 <HAL_GetTick>
 8002b40:	0003      	movs	r3, r0
 8002b42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b46:	f7fe fcb7 	bl	80014b8 <HAL_GetTick>
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e209      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b58:	4b4b      	ldr	r3, [pc, #300]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4013      	ands	r3, r2
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b48      	ldr	r3, [pc, #288]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4a4a      	ldr	r2, [pc, #296]	; (8002c94 <HAL_RCC_OscConfig+0x338>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	021a      	lsls	r2, r3, #8
 8002b74:	4b44      	ldr	r3, [pc, #272]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	e01b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002b7c:	4b42      	ldr	r3, [pc, #264]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002b82:	4949      	ldr	r1, [pc, #292]	; (8002ca8 <HAL_RCC_OscConfig+0x34c>)
 8002b84:	400a      	ands	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe fc96 	bl	80014b8 <HAL_GetTick>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b92:	f7fe fc91 	bl	80014b8 <HAL_GetTick>
 8002b96:	0002      	movs	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1e3      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba4:	4b38      	ldr	r3, [pc, #224]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4013      	ands	r3, r2
 8002bae:	d1f0      	bne.n	8002b92 <HAL_RCC_OscConfig+0x236>
 8002bb0:	e000      	b.n	8002bb4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2208      	movs	r2, #8
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d047      	beq.n	8002c4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bbe:	4b32      	ldr	r3, [pc, #200]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2238      	movs	r2, #56	; 0x38
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b18      	cmp	r3, #24
 8002bc8:	d10a      	bne.n	8002be0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002bca:	4b2f      	ldr	r3, [pc, #188]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bce:	2202      	movs	r2, #2
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d03c      	beq.n	8002c4e <HAL_RCC_OscConfig+0x2f2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d138      	bne.n	8002c4e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e1c5      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d019      	beq.n	8002c1c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002be8:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002bea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bec:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002bee:	2101      	movs	r1, #1
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fc60 	bl	80014b8 <HAL_GetTick>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7fe fc5b 	bl	80014b8 <HAL_GetTick>
 8002c02:	0002      	movs	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1ad      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c14:	2202      	movs	r2, #2
 8002c16:	4013      	ands	r3, r2
 8002c18:	d0f1      	beq.n	8002bfe <HAL_RCC_OscConfig+0x2a2>
 8002c1a:	e018      	b.n	8002c4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002c1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002c22:	2101      	movs	r1, #1
 8002c24:	438a      	bics	r2, r1
 8002c26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7fe fc46 	bl	80014b8 <HAL_GetTick>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c32:	f7fe fc41 	bl	80014b8 <HAL_GetTick>
 8002c36:	0002      	movs	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e193      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c48:	2202      	movs	r2, #2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d1f1      	bne.n	8002c32 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2204      	movs	r2, #4
 8002c54:	4013      	ands	r3, r2
 8002c56:	d100      	bne.n	8002c5a <HAL_RCC_OscConfig+0x2fe>
 8002c58:	e0c6      	b.n	8002de8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	231f      	movs	r3, #31
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2238      	movs	r2, #56	; 0x38
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d11e      	bne.n	8002cac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_RCC_OscConfig+0x32c>)
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	2202      	movs	r2, #2
 8002c74:	4013      	ands	r3, r2
 8002c76:	d100      	bne.n	8002c7a <HAL_RCC_OscConfig+0x31e>
 8002c78:	e0b6      	b.n	8002de8 <HAL_RCC_OscConfig+0x48c>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d000      	beq.n	8002c84 <HAL_RCC_OscConfig+0x328>
 8002c82:	e0b1      	b.n	8002de8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e171      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	fffeffff 	.word	0xfffeffff
 8002c90:	fffbffff 	.word	0xfffbffff
 8002c94:	ffff80ff 	.word	0xffff80ff
 8002c98:	ffffc7ff 	.word	0xffffc7ff
 8002c9c:	00f42400 	.word	0x00f42400
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	20000004 	.word	0x20000004
 8002ca8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cac:	4bb1      	ldr	r3, [pc, #708]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	055b      	lsls	r3, r3, #21
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_OscConfig+0x360>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <HAL_RCC_OscConfig+0x362>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d011      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	4bac      	ldr	r3, [pc, #688]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cc6:	4bab      	ldr	r3, [pc, #684]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	0549      	lsls	r1, r1, #21
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cd0:	4ba8      	ldr	r3, [pc, #672]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	055b      	lsls	r3, r3, #21
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002cde:	231f      	movs	r3, #31
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce6:	4ba4      	ldr	r3, [pc, #656]	; (8002f78 <HAL_RCC_OscConfig+0x61c>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d11a      	bne.n	8002d28 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cf2:	4ba1      	ldr	r3, [pc, #644]	; (8002f78 <HAL_RCC_OscConfig+0x61c>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4ba0      	ldr	r3, [pc, #640]	; (8002f78 <HAL_RCC_OscConfig+0x61c>)
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	0049      	lsls	r1, r1, #1
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002d00:	f7fe fbda 	bl	80014b8 <HAL_GetTick>
 8002d04:	0003      	movs	r3, r0
 8002d06:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0a:	f7fe fbd5 	bl	80014b8 <HAL_GetTick>
 8002d0e:	0002      	movs	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e127      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d1c:	4b96      	ldr	r3, [pc, #600]	; (8002f78 <HAL_RCC_OscConfig+0x61c>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4013      	ands	r3, r2
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3e2>
 8002d30:	4b90      	ldr	r3, [pc, #576]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002d32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d34:	4b8f      	ldr	r3, [pc, #572]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002d36:	2101      	movs	r1, #1
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d3c:	e01c      	b.n	8002d78 <HAL_RCC_OscConfig+0x41c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b05      	cmp	r3, #5
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x404>
 8002d46:	4b8b      	ldr	r3, [pc, #556]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002d48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d4a:	4b8a      	ldr	r3, [pc, #552]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d52:	4b88      	ldr	r3, [pc, #544]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002d54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d56:	4b87      	ldr	r3, [pc, #540]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002d58:	2101      	movs	r1, #1
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d5e:	e00b      	b.n	8002d78 <HAL_RCC_OscConfig+0x41c>
 8002d60:	4b84      	ldr	r3, [pc, #528]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002d62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d64:	4b83      	ldr	r3, [pc, #524]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002d66:	2101      	movs	r1, #1
 8002d68:	438a      	bics	r2, r1
 8002d6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d6c:	4b81      	ldr	r3, [pc, #516]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002d6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d70:	4b80      	ldr	r3, [pc, #512]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002d72:	2104      	movs	r1, #4
 8002d74:	438a      	bics	r2, r1
 8002d76:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d014      	beq.n	8002daa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe fb9a 	bl	80014b8 <HAL_GetTick>
 8002d84:	0003      	movs	r3, r0
 8002d86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d88:	e009      	b.n	8002d9e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fe fb95 	bl	80014b8 <HAL_GetTick>
 8002d8e:	0002      	movs	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	4a79      	ldr	r2, [pc, #484]	; (8002f7c <HAL_RCC_OscConfig+0x620>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e0e6      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9e:	4b75      	ldr	r3, [pc, #468]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da2:	2202      	movs	r2, #2
 8002da4:	4013      	ands	r3, r2
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x42e>
 8002da8:	e013      	b.n	8002dd2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe fb85 	bl	80014b8 <HAL_GetTick>
 8002dae:	0003      	movs	r3, r0
 8002db0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002db2:	e009      	b.n	8002dc8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db4:	f7fe fb80 	bl	80014b8 <HAL_GetTick>
 8002db8:	0002      	movs	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	4a6f      	ldr	r2, [pc, #444]	; (8002f7c <HAL_RCC_OscConfig+0x620>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e0d1      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dc8:	4b6a      	ldr	r3, [pc, #424]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	2202      	movs	r2, #2
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002dd2:	231f      	movs	r3, #31
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d105      	bne.n	8002de8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002ddc:	4b65      	ldr	r3, [pc, #404]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002de0:	4b64      	ldr	r3, [pc, #400]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002de2:	4967      	ldr	r1, [pc, #412]	; (8002f80 <HAL_RCC_OscConfig+0x624>)
 8002de4:	400a      	ands	r2, r1
 8002de6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d100      	bne.n	8002df2 <HAL_RCC_OscConfig+0x496>
 8002df0:	e0bb      	b.n	8002f6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df2:	4b60      	ldr	r3, [pc, #384]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2238      	movs	r2, #56	; 0x38
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b10      	cmp	r3, #16
 8002dfc:	d100      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4a4>
 8002dfe:	e07b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d156      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b5a      	ldr	r3, [pc, #360]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002e0e:	495d      	ldr	r1, [pc, #372]	; (8002f84 <HAL_RCC_OscConfig+0x628>)
 8002e10:	400a      	ands	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe fb50 	bl	80014b8 <HAL_GetTick>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fe fb4b 	bl	80014b8 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e09d      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e30:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	049b      	lsls	r3, r3, #18
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3c:	4b4d      	ldr	r3, [pc, #308]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a51      	ldr	r2, [pc, #324]	; (8002f88 <HAL_RCC_OscConfig+0x62c>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1a      	ldr	r2, [r3, #32]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	4b42      	ldr	r3, [pc, #264]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e70:	4b40      	ldr	r3, [pc, #256]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002e76:	2180      	movs	r1, #128	; 0x80
 8002e78:	0449      	lsls	r1, r1, #17
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002e7e:	4b3d      	ldr	r3, [pc, #244]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	4b3c      	ldr	r3, [pc, #240]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002e84:	2180      	movs	r1, #128	; 0x80
 8002e86:	0549      	lsls	r1, r1, #21
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fb14 	bl	80014b8 <HAL_GetTick>
 8002e90:	0003      	movs	r3, r0
 8002e92:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e96:	f7fe fb0f 	bl	80014b8 <HAL_GetTick>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e061      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ea8:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	049b      	lsls	r3, r3, #18
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x53a>
 8002eb4:	e059      	b.n	8002f6a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb6:	4b2f      	ldr	r3, [pc, #188]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4b2e      	ldr	r3, [pc, #184]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002ebc:	4931      	ldr	r1, [pc, #196]	; (8002f84 <HAL_RCC_OscConfig+0x628>)
 8002ebe:	400a      	ands	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec2:	f7fe faf9 	bl	80014b8 <HAL_GetTick>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe faf4 	bl	80014b8 <HAL_GetTick>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e046      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ede:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	049b      	lsls	r3, r3, #18
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002eea:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002ef0:	4926      	ldr	r1, [pc, #152]	; (8002f8c <HAL_RCC_OscConfig+0x630>)
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	e038      	b.n	8002f6a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e033      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002f04:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_RCC_OscConfig+0x618>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	401a      	ands	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d126      	bne.n	8002f66 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2270      	movs	r2, #112	; 0x70
 8002f1c:	401a      	ands	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d11f      	bne.n	8002f66 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	23fe      	movs	r3, #254	; 0xfe
 8002f2a:	01db      	lsls	r3, r3, #7
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d116      	bne.n	8002f66 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	23f8      	movs	r3, #248	; 0xf8
 8002f3c:	039b      	lsls	r3, r3, #14
 8002f3e:	401a      	ands	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d10e      	bne.n	8002f66 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	23e0      	movs	r3, #224	; 0xe0
 8002f4c:	051b      	lsls	r3, r3, #20
 8002f4e:	401a      	ands	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	0f5b      	lsrs	r3, r3, #29
 8002f5c:	075a      	lsls	r2, r3, #29
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b008      	add	sp, #32
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	00001388 	.word	0x00001388
 8002f80:	efffffff 	.word	0xefffffff
 8002f84:	feffffff 	.word	0xfeffffff
 8002f88:	11c1808c 	.word	0x11c1808c
 8002f8c:	eefefffc 	.word	0xeefefffc

08002f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0e9      	b.n	8003178 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b76      	ldr	r3, [pc, #472]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2207      	movs	r2, #7
 8002faa:	4013      	ands	r3, r2
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d91e      	bls.n	8002ff0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b73      	ldr	r3, [pc, #460]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2207      	movs	r2, #7
 8002fb8:	4393      	bics	r3, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	4b70      	ldr	r3, [pc, #448]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fc4:	f7fe fa78 	bl	80014b8 <HAL_GetTick>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fcc:	e009      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fce:	f7fe fa73 	bl	80014b8 <HAL_GetTick>
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	4a6a      	ldr	r2, [pc, #424]	; (8003184 <HAL_RCC_ClockConfig+0x1f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e0ca      	b.n	8003178 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fe2:	4b67      	ldr	r3, [pc, #412]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2207      	movs	r2, #7
 8002fe8:	4013      	ands	r3, r2
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d1ee      	bne.n	8002fce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d015      	beq.n	8003026 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2204      	movs	r2, #4
 8003000:	4013      	ands	r3, r2
 8003002:	d006      	beq.n	8003012 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003004:	4b60      	ldr	r3, [pc, #384]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	4b5f      	ldr	r3, [pc, #380]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 800300a:	21e0      	movs	r1, #224	; 0xe0
 800300c:	01c9      	lsls	r1, r1, #7
 800300e:	430a      	orrs	r2, r1
 8003010:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003012:	4b5d      	ldr	r3, [pc, #372]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	4a5d      	ldr	r2, [pc, #372]	; (800318c <HAL_RCC_ClockConfig+0x1fc>)
 8003018:	4013      	ands	r3, r2
 800301a:	0019      	movs	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	4b59      	ldr	r3, [pc, #356]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 8003022:	430a      	orrs	r2, r1
 8003024:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2201      	movs	r2, #1
 800302c:	4013      	ands	r3, r2
 800302e:	d057      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d107      	bne.n	8003048 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003038:	4b53      	ldr	r3, [pc, #332]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	029b      	lsls	r3, r3, #10
 8003040:	4013      	ands	r3, r2
 8003042:	d12b      	bne.n	800309c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e097      	b.n	8003178 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d107      	bne.n	8003060 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003050:	4b4d      	ldr	r3, [pc, #308]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	049b      	lsls	r3, r3, #18
 8003058:	4013      	ands	r3, r2
 800305a:	d11f      	bne.n	800309c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e08b      	b.n	8003178 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003068:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4013      	ands	r3, r2
 8003072:	d113      	bne.n	800309c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e07f      	b.n	8003178 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d106      	bne.n	800308e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003080:	4b41      	ldr	r3, [pc, #260]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 8003082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003084:	2202      	movs	r2, #2
 8003086:	4013      	ands	r3, r2
 8003088:	d108      	bne.n	800309c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e074      	b.n	8003178 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308e:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 8003090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003092:	2202      	movs	r2, #2
 8003094:	4013      	ands	r3, r2
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e06d      	b.n	8003178 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800309c:	4b3a      	ldr	r3, [pc, #232]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2207      	movs	r2, #7
 80030a2:	4393      	bics	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	4b37      	ldr	r3, [pc, #220]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 80030ac:	430a      	orrs	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b0:	f7fe fa02 	bl	80014b8 <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
 80030b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b8:	e009      	b.n	80030ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ba:	f7fe f9fd 	bl	80014b8 <HAL_GetTick>
 80030be:	0002      	movs	r2, r0
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	4a2f      	ldr	r2, [pc, #188]	; (8003184 <HAL_RCC_ClockConfig+0x1f4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e054      	b.n	8003178 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ce:	4b2e      	ldr	r3, [pc, #184]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2238      	movs	r2, #56	; 0x38
 80030d4:	401a      	ands	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	429a      	cmp	r2, r3
 80030de:	d1ec      	bne.n	80030ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2207      	movs	r2, #7
 80030e6:	4013      	ands	r3, r2
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d21e      	bcs.n	800312c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2207      	movs	r2, #7
 80030f4:	4393      	bics	r3, r2
 80030f6:	0019      	movs	r1, r3
 80030f8:	4b21      	ldr	r3, [pc, #132]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003100:	f7fe f9da 	bl	80014b8 <HAL_GetTick>
 8003104:	0003      	movs	r3, r0
 8003106:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003108:	e009      	b.n	800311e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310a:	f7fe f9d5 	bl	80014b8 <HAL_GetTick>
 800310e:	0002      	movs	r2, r0
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	4a1b      	ldr	r2, [pc, #108]	; (8003184 <HAL_RCC_ClockConfig+0x1f4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e02c      	b.n	8003178 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800311e:	4b18      	ldr	r3, [pc, #96]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2207      	movs	r2, #7
 8003124:	4013      	ands	r3, r2
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d1ee      	bne.n	800310a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2204      	movs	r2, #4
 8003132:	4013      	ands	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003136:	4b14      	ldr	r3, [pc, #80]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4a15      	ldr	r2, [pc, #84]	; (8003190 <HAL_RCC_ClockConfig+0x200>)
 800313c:	4013      	ands	r3, r2
 800313e:	0019      	movs	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	4b10      	ldr	r3, [pc, #64]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 8003146:	430a      	orrs	r2, r1
 8003148:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800314a:	f000 f829 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 800314e:	0001      	movs	r1, r0
 8003150:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	220f      	movs	r2, #15
 8003158:	401a      	ands	r2, r3
 800315a:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <HAL_RCC_ClockConfig+0x204>)
 800315c:	0092      	lsls	r2, r2, #2
 800315e:	58d3      	ldr	r3, [r2, r3]
 8003160:	221f      	movs	r2, #31
 8003162:	4013      	ands	r3, r2
 8003164:	000a      	movs	r2, r1
 8003166:	40da      	lsrs	r2, r3
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_ClockConfig+0x208>)
 800316a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <HAL_RCC_ClockConfig+0x20c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	0018      	movs	r0, r3
 8003172:	f7fe f945 	bl	8001400 <HAL_InitTick>
 8003176:	0003      	movs	r3, r0
}
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	b004      	add	sp, #16
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40022000 	.word	0x40022000
 8003184:	00001388 	.word	0x00001388
 8003188:	40021000 	.word	0x40021000
 800318c:	fffff0ff 	.word	0xfffff0ff
 8003190:	ffff8fff 	.word	0xffff8fff
 8003194:	08005110 	.word	0x08005110
 8003198:	20000000 	.word	0x20000000
 800319c:	20000004 	.word	0x20000004

080031a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031a6:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2238      	movs	r2, #56	; 0x38
 80031ac:	4013      	ands	r3, r2
 80031ae:	d10f      	bne.n	80031d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80031b0:	4b39      	ldr	r3, [pc, #228]	; (8003298 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	0adb      	lsrs	r3, r3, #11
 80031b6:	2207      	movs	r2, #7
 80031b8:	4013      	ands	r3, r2
 80031ba:	2201      	movs	r2, #1
 80031bc:	409a      	lsls	r2, r3
 80031be:	0013      	movs	r3, r2
 80031c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80031c2:	6839      	ldr	r1, [r7, #0]
 80031c4:	4835      	ldr	r0, [pc, #212]	; (800329c <HAL_RCC_GetSysClockFreq+0xfc>)
 80031c6:	f7fc ff9f 	bl	8000108 <__udivsi3>
 80031ca:	0003      	movs	r3, r0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	e05d      	b.n	800328c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031d0:	4b31      	ldr	r3, [pc, #196]	; (8003298 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2238      	movs	r2, #56	; 0x38
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d102      	bne.n	80031e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031dc:	4b2f      	ldr	r3, [pc, #188]	; (800329c <HAL_RCC_GetSysClockFreq+0xfc>)
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	e054      	b.n	800328c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e2:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2238      	movs	r2, #56	; 0x38
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d138      	bne.n	8003260 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80031ee:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2203      	movs	r2, #3
 80031f4:	4013      	ands	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031f8:	4b27      	ldr	r3, [pc, #156]	; (8003298 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	2207      	movs	r2, #7
 8003200:	4013      	ands	r3, r2
 8003202:	3301      	adds	r3, #1
 8003204:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d10d      	bne.n	8003228 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4823      	ldr	r0, [pc, #140]	; (800329c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003210:	f7fc ff7a 	bl	8000108 <__udivsi3>
 8003214:	0003      	movs	r3, r0
 8003216:	0019      	movs	r1, r3
 8003218:	4b1f      	ldr	r3, [pc, #124]	; (8003298 <HAL_RCC_GetSysClockFreq+0xf8>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	0a1b      	lsrs	r3, r3, #8
 800321e:	227f      	movs	r2, #127	; 0x7f
 8003220:	4013      	ands	r3, r2
 8003222:	434b      	muls	r3, r1
 8003224:	617b      	str	r3, [r7, #20]
        break;
 8003226:	e00d      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	481c      	ldr	r0, [pc, #112]	; (800329c <HAL_RCC_GetSysClockFreq+0xfc>)
 800322c:	f7fc ff6c 	bl	8000108 <__udivsi3>
 8003230:	0003      	movs	r3, r0
 8003232:	0019      	movs	r1, r3
 8003234:	4b18      	ldr	r3, [pc, #96]	; (8003298 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	227f      	movs	r2, #127	; 0x7f
 800323c:	4013      	ands	r3, r2
 800323e:	434b      	muls	r3, r1
 8003240:	617b      	str	r3, [r7, #20]
        break;
 8003242:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003244:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	0f5b      	lsrs	r3, r3, #29
 800324a:	2207      	movs	r2, #7
 800324c:	4013      	ands	r3, r2
 800324e:	3301      	adds	r3, #1
 8003250:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	6978      	ldr	r0, [r7, #20]
 8003256:	f7fc ff57 	bl	8000108 <__udivsi3>
 800325a:	0003      	movs	r3, r0
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	e015      	b.n	800328c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2238      	movs	r2, #56	; 0x38
 8003266:	4013      	ands	r3, r2
 8003268:	2b20      	cmp	r3, #32
 800326a:	d103      	bne.n	8003274 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	e00b      	b.n	800328c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2238      	movs	r2, #56	; 0x38
 800327a:	4013      	ands	r3, r2
 800327c:	2b18      	cmp	r3, #24
 800327e:	d103      	bne.n	8003288 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003280:	23fa      	movs	r3, #250	; 0xfa
 8003282:	01db      	lsls	r3, r3, #7
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	e001      	b.n	800328c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800328c:	693b      	ldr	r3, [r7, #16]
}
 800328e:	0018      	movs	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	b006      	add	sp, #24
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	40021000 	.word	0x40021000
 800329c:	00f42400 	.word	0x00f42400

080032a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a4:	4b02      	ldr	r3, [pc, #8]	; (80032b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80032a6:	681b      	ldr	r3, [r3, #0]
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	20000000 	.word	0x20000000

080032b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b4:	b5b0      	push	{r4, r5, r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80032b8:	f7ff fff2 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032bc:	0004      	movs	r4, r0
 80032be:	f7ff fb41 	bl	8002944 <LL_RCC_GetAPB1Prescaler>
 80032c2:	0003      	movs	r3, r0
 80032c4:	0b1a      	lsrs	r2, r3, #12
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80032c8:	0092      	lsls	r2, r2, #2
 80032ca:	58d3      	ldr	r3, [r2, r3]
 80032cc:	221f      	movs	r2, #31
 80032ce:	4013      	ands	r3, r2
 80032d0:	40dc      	lsrs	r4, r3
 80032d2:	0023      	movs	r3, r4
}
 80032d4:	0018      	movs	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bdb0      	pop	{r4, r5, r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	08005150 	.word	0x08005150

080032e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80032e8:	2313      	movs	r3, #19
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032f0:	2312      	movs	r3, #18
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	029b      	lsls	r3, r3, #10
 8003300:	4013      	ands	r3, r2
 8003302:	d100      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003304:	e0a3      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003306:	2011      	movs	r0, #17
 8003308:	183b      	adds	r3, r7, r0
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330e:	4bc2      	ldr	r3, [pc, #776]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	055b      	lsls	r3, r3, #21
 8003316:	4013      	ands	r3, r2
 8003318:	d110      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	4bbf      	ldr	r3, [pc, #764]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800331c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800331e:	4bbe      	ldr	r3, [pc, #760]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003320:	2180      	movs	r1, #128	; 0x80
 8003322:	0549      	lsls	r1, r1, #21
 8003324:	430a      	orrs	r2, r1
 8003326:	63da      	str	r2, [r3, #60]	; 0x3c
 8003328:	4bbb      	ldr	r3, [pc, #748]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800332a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	055b      	lsls	r3, r3, #21
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003336:	183b      	adds	r3, r7, r0
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800333c:	4bb7      	ldr	r3, [pc, #732]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4bb6      	ldr	r3, [pc, #728]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003342:	2180      	movs	r1, #128	; 0x80
 8003344:	0049      	lsls	r1, r1, #1
 8003346:	430a      	orrs	r2, r1
 8003348:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800334a:	f7fe f8b5 	bl	80014b8 <HAL_GetTick>
 800334e:	0003      	movs	r3, r0
 8003350:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003352:	e00b      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003354:	f7fe f8b0 	bl	80014b8 <HAL_GetTick>
 8003358:	0002      	movs	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d904      	bls.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003362:	2313      	movs	r3, #19
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	2203      	movs	r2, #3
 8003368:	701a      	strb	r2, [r3, #0]
        break;
 800336a:	e005      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800336c:	4bab      	ldr	r3, [pc, #684]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4013      	ands	r3, r2
 8003376:	d0ed      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003378:	2313      	movs	r3, #19
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d154      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003382:	4ba5      	ldr	r3, [pc, #660]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003384:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003386:	23c0      	movs	r3, #192	; 0xc0
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4013      	ands	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d019      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	429a      	cmp	r2, r3
 800339c:	d014      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800339e:	4b9e      	ldr	r3, [pc, #632]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	4a9f      	ldr	r2, [pc, #636]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a8:	4b9b      	ldr	r3, [pc, #620]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033ac:	4b9a      	ldr	r3, [pc, #616]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ae:	2180      	movs	r1, #128	; 0x80
 80033b0:	0249      	lsls	r1, r1, #9
 80033b2:	430a      	orrs	r2, r1
 80033b4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033b6:	4b98      	ldr	r3, [pc, #608]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033ba:	4b97      	ldr	r3, [pc, #604]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033bc:	4999      	ldr	r1, [pc, #612]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80033be:	400a      	ands	r2, r1
 80033c0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033c2:	4b95      	ldr	r3, [pc, #596]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2201      	movs	r2, #1
 80033cc:	4013      	ands	r3, r2
 80033ce:	d016      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe f872 	bl	80014b8 <HAL_GetTick>
 80033d4:	0003      	movs	r3, r0
 80033d6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d8:	e00c      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fe f86d 	bl	80014b8 <HAL_GetTick>
 80033de:	0002      	movs	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	4a90      	ldr	r2, [pc, #576]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d904      	bls.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80033ea:	2313      	movs	r3, #19
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	2203      	movs	r2, #3
 80033f0:	701a      	strb	r2, [r3, #0]
            break;
 80033f2:	e004      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f4:	4b88      	ldr	r3, [pc, #544]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	2202      	movs	r2, #2
 80033fa:	4013      	ands	r3, r2
 80033fc:	d0ed      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80033fe:	2313      	movs	r3, #19
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003408:	4b83      	ldr	r3, [pc, #524]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800340a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340c:	4a84      	ldr	r2, [pc, #528]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800340e:	4013      	ands	r3, r2
 8003410:	0019      	movs	r1, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003416:	4b80      	ldr	r3, [pc, #512]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003418:	430a      	orrs	r2, r1
 800341a:	65da      	str	r2, [r3, #92]	; 0x5c
 800341c:	e00c      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800341e:	2312      	movs	r3, #18
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	2213      	movs	r2, #19
 8003424:	18ba      	adds	r2, r7, r2
 8003426:	7812      	ldrb	r2, [r2, #0]
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e005      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342c:	2312      	movs	r3, #18
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	2213      	movs	r2, #19
 8003432:	18ba      	adds	r2, r7, r2
 8003434:	7812      	ldrb	r2, [r2, #0]
 8003436:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003438:	2311      	movs	r3, #17
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d105      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003442:	4b75      	ldr	r3, [pc, #468]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003446:	4b74      	ldr	r3, [pc, #464]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003448:	4978      	ldr	r1, [pc, #480]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800344a:	400a      	ands	r2, r1
 800344c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2201      	movs	r2, #1
 8003454:	4013      	ands	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003458:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	2203      	movs	r2, #3
 800345e:	4393      	bics	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	4b6c      	ldr	r3, [pc, #432]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003468:	430a      	orrs	r2, r1
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2210      	movs	r2, #16
 8003472:	4013      	ands	r3, r2
 8003474:	d009      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003476:	4b68      	ldr	r3, [pc, #416]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347a:	4a6d      	ldr	r2, [pc, #436]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800347c:	4013      	ands	r3, r2
 800347e:	0019      	movs	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	4b64      	ldr	r3, [pc, #400]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003486:	430a      	orrs	r2, r1
 8003488:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4013      	ands	r3, r2
 8003494:	d009      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003496:	4b60      	ldr	r3, [pc, #384]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	4a66      	ldr	r2, [pc, #408]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800349c:	4013      	ands	r3, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	4b5c      	ldr	r3, [pc, #368]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a6:	430a      	orrs	r2, r1
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4013      	ands	r3, r2
 80034b4:	d009      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034b6:	4b58      	ldr	r3, [pc, #352]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	4a5f      	ldr	r2, [pc, #380]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80034bc:	4013      	ands	r3, r2
 80034be:	0019      	movs	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	4b54      	ldr	r3, [pc, #336]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034c6:	430a      	orrs	r2, r1
 80034c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2220      	movs	r2, #32
 80034d0:	4013      	ands	r3, r2
 80034d2:	d009      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034d4:	4b50      	ldr	r3, [pc, #320]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	4a58      	ldr	r2, [pc, #352]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034da:	4013      	ands	r3, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	4b4d      	ldr	r3, [pc, #308]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e4:	430a      	orrs	r2, r1
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	02db      	lsls	r3, r3, #11
 80034f0:	4013      	ands	r3, r2
 80034f2:	d016      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034f4:	4b48      	ldr	r3, [pc, #288]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	4a51      	ldr	r2, [pc, #324]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	0019      	movs	r1, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	4b45      	ldr	r3, [pc, #276]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003504:	430a      	orrs	r2, r1
 8003506:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	23c0      	movs	r3, #192	; 0xc0
 800350e:	051b      	lsls	r3, r3, #20
 8003510:	429a      	cmp	r2, r3
 8003512:	d106      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003514:	4b40      	ldr	r3, [pc, #256]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800351a:	2180      	movs	r1, #128	; 0x80
 800351c:	0449      	lsls	r1, r1, #17
 800351e:	430a      	orrs	r2, r1
 8003520:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	01db      	lsls	r3, r3, #7
 800352a:	4013      	ands	r3, r2
 800352c:	d015      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800352e:	4b3a      	ldr	r3, [pc, #232]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	0899      	lsrs	r1, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1a      	ldr	r2, [r3, #32]
 800353a:	4b37      	ldr	r3, [pc, #220]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800353c:	430a      	orrs	r2, r1
 800353e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1a      	ldr	r2, [r3, #32]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	05db      	lsls	r3, r3, #23
 8003548:	429a      	cmp	r2, r3
 800354a:	d106      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800354c:	4b32      	ldr	r3, [pc, #200]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	4b31      	ldr	r3, [pc, #196]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003552:	2180      	movs	r1, #128	; 0x80
 8003554:	0249      	lsls	r1, r1, #9
 8003556:	430a      	orrs	r2, r1
 8003558:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	039b      	lsls	r3, r3, #14
 8003562:	4013      	ands	r3, r2
 8003564:	d016      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003566:	4b2c      	ldr	r3, [pc, #176]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	4a36      	ldr	r2, [pc, #216]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800356c:	4013      	ands	r3, r2
 800356e:	0019      	movs	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003574:	4b28      	ldr	r3, [pc, #160]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003576:	430a      	orrs	r2, r1
 8003578:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	03db      	lsls	r3, r3, #15
 8003582:	429a      	cmp	r2, r3
 8003584:	d106      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	4b23      	ldr	r3, [pc, #140]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800358c:	2180      	movs	r1, #128	; 0x80
 800358e:	0449      	lsls	r1, r1, #17
 8003590:	430a      	orrs	r2, r1
 8003592:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	2380      	movs	r3, #128	; 0x80
 800359a:	03db      	lsls	r3, r3, #15
 800359c:	4013      	ands	r3, r2
 800359e:	d016      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80035a0:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a4:	4a28      	ldr	r2, [pc, #160]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	0019      	movs	r1, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ae:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035b0:	430a      	orrs	r2, r1
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	045b      	lsls	r3, r3, #17
 80035bc:	429a      	cmp	r2, r3
 80035be:	d106      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80035c0:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	4b14      	ldr	r3, [pc, #80]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c6:	2180      	movs	r1, #128	; 0x80
 80035c8:	0449      	lsls	r1, r1, #17
 80035ca:	430a      	orrs	r2, r1
 80035cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	4013      	ands	r3, r2
 80035d8:	d016      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	4a1b      	ldr	r2, [pc, #108]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	0019      	movs	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ea:	430a      	orrs	r2, r1
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	01db      	lsls	r3, r3, #7
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d106      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	0249      	lsls	r1, r1, #9
 8003604:	430a      	orrs	r2, r1
 8003606:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003608:	2312      	movs	r3, #18
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	781b      	ldrb	r3, [r3, #0]
}
 800360e:	0018      	movs	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	b006      	add	sp, #24
 8003614:	bd80      	pop	{r7, pc}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	40021000 	.word	0x40021000
 800361c:	40007000 	.word	0x40007000
 8003620:	fffffcff 	.word	0xfffffcff
 8003624:	fffeffff 	.word	0xfffeffff
 8003628:	00001388 	.word	0x00001388
 800362c:	efffffff 	.word	0xefffffff
 8003630:	fffff3ff 	.word	0xfffff3ff
 8003634:	fff3ffff 	.word	0xfff3ffff
 8003638:	ffcfffff 	.word	0xffcfffff
 800363c:	ffffcfff 	.word	0xffffcfff
 8003640:	f3ffffff 	.word	0xf3ffffff
 8003644:	ffbfffff 	.word	0xffbfffff
 8003648:	feffffff 	.word	0xfeffffff
 800364c:	ffff3fff 	.word	0xffff3fff

08003650 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e0a8      	b.n	80037b4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	2382      	movs	r3, #130	; 0x82
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	429a      	cmp	r2, r3
 8003674:	d009      	beq.n	800368a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	61da      	str	r2, [r3, #28]
 800367c:	e005      	b.n	800368a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	225d      	movs	r2, #93	; 0x5d
 8003694:	5c9b      	ldrb	r3, [r3, r2]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d107      	bne.n	80036ac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	225c      	movs	r2, #92	; 0x5c
 80036a0:	2100      	movs	r1, #0
 80036a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	0018      	movs	r0, r3
 80036a8:	f7fd fc90 	bl	8000fcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	225d      	movs	r2, #93	; 0x5d
 80036b0:	2102      	movs	r1, #2
 80036b2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2140      	movs	r1, #64	; 0x40
 80036c0:	438a      	bics	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	23e0      	movs	r3, #224	; 0xe0
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d902      	bls.n	80036d6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	e002      	b.n	80036dc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	015b      	lsls	r3, r3, #5
 80036da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	23f0      	movs	r3, #240	; 0xf0
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d008      	beq.n	80036fa <HAL_SPI_Init+0xaa>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	23e0      	movs	r3, #224	; 0xe0
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d002      	beq.n	80036fa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	2382      	movs	r3, #130	; 0x82
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	401a      	ands	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6899      	ldr	r1, [r3, #8]
 8003708:	2384      	movs	r3, #132	; 0x84
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	400b      	ands	r3, r1
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	2102      	movs	r1, #2
 8003716:	400b      	ands	r3, r1
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	2101      	movs	r1, #1
 8003720:	400b      	ands	r3, r1
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6999      	ldr	r1, [r3, #24]
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	400b      	ands	r3, r1
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	2138      	movs	r1, #56	; 0x38
 8003736:	400b      	ands	r3, r1
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	2180      	movs	r1, #128	; 0x80
 8003740:	400b      	ands	r3, r1
 8003742:	431a      	orrs	r2, r3
 8003744:	0011      	movs	r1, r2
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	019b      	lsls	r3, r3, #6
 800374e:	401a      	ands	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	0c1b      	lsrs	r3, r3, #16
 800375e:	2204      	movs	r2, #4
 8003760:	401a      	ands	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	2110      	movs	r1, #16
 8003768:	400b      	ands	r3, r1
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003770:	2108      	movs	r1, #8
 8003772:	400b      	ands	r3, r1
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68d9      	ldr	r1, [r3, #12]
 800377a:	23f0      	movs	r3, #240	; 0xf0
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	400b      	ands	r3, r1
 8003780:	431a      	orrs	r2, r3
 8003782:	0011      	movs	r1, r2
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	015b      	lsls	r3, r3, #5
 800378a:	401a      	ands	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4907      	ldr	r1, [pc, #28]	; (80037bc <HAL_SPI_Init+0x16c>)
 80037a0:	400a      	ands	r2, r1
 80037a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	225d      	movs	r2, #93	; 0x5d
 80037ae:	2101      	movs	r1, #1
 80037b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b004      	add	sp, #16
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	fffff7ff 	.word	0xfffff7ff

080037c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e04a      	b.n	8003868 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	223d      	movs	r2, #61	; 0x3d
 80037d6:	5c9b      	ldrb	r3, [r3, r2]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d107      	bne.n	80037ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	223c      	movs	r2, #60	; 0x3c
 80037e2:	2100      	movs	r1, #0
 80037e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7fd fc3b 	bl	8001064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	223d      	movs	r2, #61	; 0x3d
 80037f2:	2102      	movs	r1, #2
 80037f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3304      	adds	r3, #4
 80037fe:	0019      	movs	r1, r3
 8003800:	0010      	movs	r0, r2
 8003802:	f000 fa1f 	bl	8003c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2248      	movs	r2, #72	; 0x48
 800380a:	2101      	movs	r1, #1
 800380c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	223e      	movs	r2, #62	; 0x3e
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	223f      	movs	r2, #63	; 0x3f
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2240      	movs	r2, #64	; 0x40
 8003822:	2101      	movs	r1, #1
 8003824:	5499      	strb	r1, [r3, r2]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2241      	movs	r2, #65	; 0x41
 800382a:	2101      	movs	r1, #1
 800382c:	5499      	strb	r1, [r3, r2]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2242      	movs	r2, #66	; 0x42
 8003832:	2101      	movs	r1, #1
 8003834:	5499      	strb	r1, [r3, r2]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2243      	movs	r2, #67	; 0x43
 800383a:	2101      	movs	r1, #1
 800383c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2244      	movs	r2, #68	; 0x44
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2245      	movs	r2, #69	; 0x45
 800384a:	2101      	movs	r1, #1
 800384c:	5499      	strb	r1, [r3, r2]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2246      	movs	r2, #70	; 0x46
 8003852:	2101      	movs	r1, #1
 8003854:	5499      	strb	r1, [r3, r2]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2247      	movs	r2, #71	; 0x47
 800385a:	2101      	movs	r1, #1
 800385c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	223d      	movs	r2, #61	; 0x3d
 8003862:	2101      	movs	r1, #1
 8003864:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	0018      	movs	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	b002      	add	sp, #8
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d108      	bne.n	8003892 <HAL_TIM_PWM_Start+0x22>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	223e      	movs	r2, #62	; 0x3e
 8003884:	5c9b      	ldrb	r3, [r3, r2]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	1e5a      	subs	r2, r3, #1
 800388c:	4193      	sbcs	r3, r2
 800388e:	b2db      	uxtb	r3, r3
 8003890:	e037      	b.n	8003902 <HAL_TIM_PWM_Start+0x92>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d108      	bne.n	80038aa <HAL_TIM_PWM_Start+0x3a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	223f      	movs	r2, #63	; 0x3f
 800389c:	5c9b      	ldrb	r3, [r3, r2]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	1e5a      	subs	r2, r3, #1
 80038a4:	4193      	sbcs	r3, r2
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	e02b      	b.n	8003902 <HAL_TIM_PWM_Start+0x92>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d108      	bne.n	80038c2 <HAL_TIM_PWM_Start+0x52>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2240      	movs	r2, #64	; 0x40
 80038b4:	5c9b      	ldrb	r3, [r3, r2]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	1e5a      	subs	r2, r3, #1
 80038bc:	4193      	sbcs	r3, r2
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	e01f      	b.n	8003902 <HAL_TIM_PWM_Start+0x92>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b0c      	cmp	r3, #12
 80038c6:	d108      	bne.n	80038da <HAL_TIM_PWM_Start+0x6a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2241      	movs	r2, #65	; 0x41
 80038cc:	5c9b      	ldrb	r3, [r3, r2]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	1e5a      	subs	r2, r3, #1
 80038d4:	4193      	sbcs	r3, r2
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	e013      	b.n	8003902 <HAL_TIM_PWM_Start+0x92>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d108      	bne.n	80038f2 <HAL_TIM_PWM_Start+0x82>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2242      	movs	r2, #66	; 0x42
 80038e4:	5c9b      	ldrb	r3, [r3, r2]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	1e5a      	subs	r2, r3, #1
 80038ec:	4193      	sbcs	r3, r2
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	e007      	b.n	8003902 <HAL_TIM_PWM_Start+0x92>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2243      	movs	r2, #67	; 0x43
 80038f6:	5c9b      	ldrb	r3, [r3, r2]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	1e5a      	subs	r2, r3, #1
 80038fe:	4193      	sbcs	r3, r2
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e08b      	b.n	8003a22 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d104      	bne.n	800391a <HAL_TIM_PWM_Start+0xaa>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	223e      	movs	r2, #62	; 0x3e
 8003914:	2102      	movs	r1, #2
 8003916:	5499      	strb	r1, [r3, r2]
 8003918:	e023      	b.n	8003962 <HAL_TIM_PWM_Start+0xf2>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b04      	cmp	r3, #4
 800391e:	d104      	bne.n	800392a <HAL_TIM_PWM_Start+0xba>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	223f      	movs	r2, #63	; 0x3f
 8003924:	2102      	movs	r1, #2
 8003926:	5499      	strb	r1, [r3, r2]
 8003928:	e01b      	b.n	8003962 <HAL_TIM_PWM_Start+0xf2>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d104      	bne.n	800393a <HAL_TIM_PWM_Start+0xca>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2240      	movs	r2, #64	; 0x40
 8003934:	2102      	movs	r1, #2
 8003936:	5499      	strb	r1, [r3, r2]
 8003938:	e013      	b.n	8003962 <HAL_TIM_PWM_Start+0xf2>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b0c      	cmp	r3, #12
 800393e:	d104      	bne.n	800394a <HAL_TIM_PWM_Start+0xda>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2241      	movs	r2, #65	; 0x41
 8003944:	2102      	movs	r1, #2
 8003946:	5499      	strb	r1, [r3, r2]
 8003948:	e00b      	b.n	8003962 <HAL_TIM_PWM_Start+0xf2>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b10      	cmp	r3, #16
 800394e:	d104      	bne.n	800395a <HAL_TIM_PWM_Start+0xea>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2242      	movs	r2, #66	; 0x42
 8003954:	2102      	movs	r1, #2
 8003956:	5499      	strb	r1, [r3, r2]
 8003958:	e003      	b.n	8003962 <HAL_TIM_PWM_Start+0xf2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2243      	movs	r2, #67	; 0x43
 800395e:	2102      	movs	r1, #2
 8003960:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6839      	ldr	r1, [r7, #0]
 8003968:	2201      	movs	r2, #1
 800396a:	0018      	movs	r0, r3
 800396c:	f000 fcae 	bl	80042cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a2d      	ldr	r2, [pc, #180]	; (8003a2c <HAL_TIM_PWM_Start+0x1bc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00e      	beq.n	8003998 <HAL_TIM_PWM_Start+0x128>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a2c      	ldr	r2, [pc, #176]	; (8003a30 <HAL_TIM_PWM_Start+0x1c0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d009      	beq.n	8003998 <HAL_TIM_PWM_Start+0x128>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a2a      	ldr	r2, [pc, #168]	; (8003a34 <HAL_TIM_PWM_Start+0x1c4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d004      	beq.n	8003998 <HAL_TIM_PWM_Start+0x128>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a29      	ldr	r2, [pc, #164]	; (8003a38 <HAL_TIM_PWM_Start+0x1c8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d101      	bne.n	800399c <HAL_TIM_PWM_Start+0x12c>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <HAL_TIM_PWM_Start+0x12e>
 800399c:	2300      	movs	r3, #0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2180      	movs	r1, #128	; 0x80
 80039ae:	0209      	lsls	r1, r1, #8
 80039b0:	430a      	orrs	r2, r1
 80039b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <HAL_TIM_PWM_Start+0x1bc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00f      	beq.n	80039de <HAL_TIM_PWM_Start+0x16e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	05db      	lsls	r3, r3, #23
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d009      	beq.n	80039de <HAL_TIM_PWM_Start+0x16e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <HAL_TIM_PWM_Start+0x1cc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_TIM_PWM_Start+0x16e>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <HAL_TIM_PWM_Start+0x1c0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d116      	bne.n	8003a0c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <HAL_TIM_PWM_Start+0x1d0>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	d016      	beq.n	8003a1e <HAL_TIM_PWM_Start+0x1ae>
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	025b      	lsls	r3, r3, #9
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d011      	beq.n	8003a1e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2101      	movs	r1, #1
 8003a06:	430a      	orrs	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	e008      	b.n	8003a1e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2101      	movs	r1, #1
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	e000      	b.n	8003a20 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	0018      	movs	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b004      	add	sp, #16
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40014000 	.word	0x40014000
 8003a34:	40014400 	.word	0x40014400
 8003a38:	40014800 	.word	0x40014800
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	00010007 	.word	0x00010007

08003a44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a50:	2317      	movs	r3, #23
 8003a52:	18fb      	adds	r3, r7, r3
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	223c      	movs	r2, #60	; 0x3c
 8003a5c:	5c9b      	ldrb	r3, [r3, r2]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e0e5      	b.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	223c      	movs	r2, #60	; 0x3c
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b14      	cmp	r3, #20
 8003a72:	d900      	bls.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003a74:	e0d1      	b.n	8003c1a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	009a      	lsls	r2, r3, #2
 8003a7a:	4b70      	ldr	r3, [pc, #448]	; (8003c3c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003a7c:	18d3      	adds	r3, r2, r3
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	0011      	movs	r1, r2
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f000 f95a 	bl	8003d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2108      	movs	r1, #8
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2104      	movs	r1, #4
 8003aac:	438a      	bics	r2, r1
 8003aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6999      	ldr	r1, [r3, #24]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	619a      	str	r2, [r3, #24]
      break;
 8003ac2:	e0af      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	0011      	movs	r1, r2
 8003acc:	0018      	movs	r0, r3
 8003ace:	f000 f9c3 	bl	8003e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2180      	movs	r1, #128	; 0x80
 8003ade:	0109      	lsls	r1, r1, #4
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4954      	ldr	r1, [pc, #336]	; (8003c40 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003af0:	400a      	ands	r2, r1
 8003af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6999      	ldr	r1, [r3, #24]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	021a      	lsls	r2, r3, #8
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	619a      	str	r2, [r3, #24]
      break;
 8003b08:	e08c      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	0011      	movs	r1, r2
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 fa24 	bl	8003f60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2108      	movs	r1, #8
 8003b24:	430a      	orrs	r2, r1
 8003b26:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2104      	movs	r1, #4
 8003b34:	438a      	bics	r2, r1
 8003b36:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69d9      	ldr	r1, [r3, #28]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	61da      	str	r2, [r3, #28]
      break;
 8003b4a:	e06b      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	0011      	movs	r1, r2
 8003b54:	0018      	movs	r0, r3
 8003b56:	f000 fa8b 	bl	8004070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	0109      	lsls	r1, r1, #4
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4932      	ldr	r1, [pc, #200]	; (8003c40 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b78:	400a      	ands	r2, r1
 8003b7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69d9      	ldr	r1, [r3, #28]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	021a      	lsls	r2, r3, #8
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	61da      	str	r2, [r3, #28]
      break;
 8003b90:	e048      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	0011      	movs	r1, r2
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f000 fad2 	bl	8004144 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2108      	movs	r1, #8
 8003bac:	430a      	orrs	r2, r1
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2104      	movs	r1, #4
 8003bbc:	438a      	bics	r2, r1
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bd2:	e027      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	0011      	movs	r1, r2
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f000 fb11 	bl	8004204 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2180      	movs	r1, #128	; 0x80
 8003bee:	0109      	lsls	r1, r1, #4
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4910      	ldr	r1, [pc, #64]	; (8003c40 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003c00:	400a      	ands	r2, r1
 8003c02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	021a      	lsls	r2, r3, #8
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c18:	e004      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003c1a:	2317      	movs	r3, #23
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
      break;
 8003c22:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	223c      	movs	r2, #60	; 0x3c
 8003c28:	2100      	movs	r1, #0
 8003c2a:	5499      	strb	r1, [r3, r2]

  return status;
 8003c2c:	2317      	movs	r3, #23
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	781b      	ldrb	r3, [r3, #0]
}
 8003c32:	0018      	movs	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b006      	add	sp, #24
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	08005170 	.word	0x08005170
 8003c40:	fffffbff 	.word	0xfffffbff

08003c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a34      	ldr	r2, [pc, #208]	; (8003d28 <TIM_Base_SetConfig+0xe4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d008      	beq.n	8003c6e <TIM_Base_SetConfig+0x2a>
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	05db      	lsls	r3, r3, #23
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d003      	beq.n	8003c6e <TIM_Base_SetConfig+0x2a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a30      	ldr	r2, [pc, #192]	; (8003d2c <TIM_Base_SetConfig+0xe8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d108      	bne.n	8003c80 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2270      	movs	r2, #112	; 0x70
 8003c72:	4393      	bics	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a29      	ldr	r2, [pc, #164]	; (8003d28 <TIM_Base_SetConfig+0xe4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d018      	beq.n	8003cba <TIM_Base_SetConfig+0x76>
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	05db      	lsls	r3, r3, #23
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d013      	beq.n	8003cba <TIM_Base_SetConfig+0x76>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <TIM_Base_SetConfig+0xe8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00f      	beq.n	8003cba <TIM_Base_SetConfig+0x76>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a24      	ldr	r2, [pc, #144]	; (8003d30 <TIM_Base_SetConfig+0xec>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00b      	beq.n	8003cba <TIM_Base_SetConfig+0x76>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <TIM_Base_SetConfig+0xf0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <TIM_Base_SetConfig+0x76>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <TIM_Base_SetConfig+0xf4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <TIM_Base_SetConfig+0x76>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a21      	ldr	r2, [pc, #132]	; (8003d3c <TIM_Base_SetConfig+0xf8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d108      	bne.n	8003ccc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4a20      	ldr	r2, [pc, #128]	; (8003d40 <TIM_Base_SetConfig+0xfc>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2280      	movs	r2, #128	; 0x80
 8003cd0:	4393      	bics	r3, r2
 8003cd2:	001a      	movs	r2, r3
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <TIM_Base_SetConfig+0xe4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00b      	beq.n	8003d12 <TIM_Base_SetConfig+0xce>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a0d      	ldr	r2, [pc, #52]	; (8003d34 <TIM_Base_SetConfig+0xf0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d007      	beq.n	8003d12 <TIM_Base_SetConfig+0xce>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a0c      	ldr	r2, [pc, #48]	; (8003d38 <TIM_Base_SetConfig+0xf4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d003      	beq.n	8003d12 <TIM_Base_SetConfig+0xce>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a0b      	ldr	r2, [pc, #44]	; (8003d3c <TIM_Base_SetConfig+0xf8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d103      	bne.n	8003d1a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	615a      	str	r2, [r3, #20]
}
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b004      	add	sp, #16
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	40000400 	.word	0x40000400
 8003d30:	40002000 	.word	0x40002000
 8003d34:	40014000 	.word	0x40014000
 8003d38:	40014400 	.word	0x40014400
 8003d3c:	40014800 	.word	0x40014800
 8003d40:	fffffcff 	.word	0xfffffcff

08003d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	2201      	movs	r2, #1
 8003d54:	4393      	bics	r3, r2
 8003d56:	001a      	movs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4a32      	ldr	r2, [pc, #200]	; (8003e3c <TIM_OC1_SetConfig+0xf8>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	4393      	bics	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	4393      	bics	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a28      	ldr	r2, [pc, #160]	; (8003e40 <TIM_OC1_SetConfig+0xfc>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_OC1_SetConfig+0x76>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a27      	ldr	r2, [pc, #156]	; (8003e44 <TIM_OC1_SetConfig+0x100>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <TIM_OC1_SetConfig+0x76>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a26      	ldr	r2, [pc, #152]	; (8003e48 <TIM_OC1_SetConfig+0x104>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_OC1_SetConfig+0x76>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a25      	ldr	r2, [pc, #148]	; (8003e4c <TIM_OC1_SetConfig+0x108>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10c      	bne.n	8003dd4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	4393      	bics	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2204      	movs	r2, #4
 8003dd0:	4393      	bics	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a1a      	ldr	r2, [pc, #104]	; (8003e40 <TIM_OC1_SetConfig+0xfc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00b      	beq.n	8003df4 <TIM_OC1_SetConfig+0xb0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <TIM_OC1_SetConfig+0x100>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d007      	beq.n	8003df4 <TIM_OC1_SetConfig+0xb0>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <TIM_OC1_SetConfig+0x104>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <TIM_OC1_SetConfig+0xb0>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a17      	ldr	r2, [pc, #92]	; (8003e4c <TIM_OC1_SetConfig+0x108>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d111      	bne.n	8003e18 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4a16      	ldr	r2, [pc, #88]	; (8003e50 <TIM_OC1_SetConfig+0x10c>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4a15      	ldr	r2, [pc, #84]	; (8003e54 <TIM_OC1_SetConfig+0x110>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	621a      	str	r2, [r3, #32]
}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b006      	add	sp, #24
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	fffeff8f 	.word	0xfffeff8f
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40014000 	.word	0x40014000
 8003e48:	40014400 	.word	0x40014400
 8003e4c:	40014800 	.word	0x40014800
 8003e50:	fffffeff 	.word	0xfffffeff
 8003e54:	fffffdff 	.word	0xfffffdff

08003e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	2210      	movs	r2, #16
 8003e68:	4393      	bics	r3, r2
 8003e6a:	001a      	movs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4a2e      	ldr	r2, [pc, #184]	; (8003f40 <TIM_OC2_SetConfig+0xe8>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4a2d      	ldr	r2, [pc, #180]	; (8003f44 <TIM_OC2_SetConfig+0xec>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	4393      	bics	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a24      	ldr	r2, [pc, #144]	; (8003f48 <TIM_OC2_SetConfig+0xf0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d10d      	bne.n	8003ed6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2280      	movs	r2, #128	; 0x80
 8003ebe:	4393      	bics	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2240      	movs	r2, #64	; 0x40
 8003ed2:	4393      	bics	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <TIM_OC2_SetConfig+0xf0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00b      	beq.n	8003ef6 <TIM_OC2_SetConfig+0x9e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <TIM_OC2_SetConfig+0xf4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <TIM_OC2_SetConfig+0x9e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <TIM_OC2_SetConfig+0xf8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_OC2_SetConfig+0x9e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a18      	ldr	r2, [pc, #96]	; (8003f54 <TIM_OC2_SetConfig+0xfc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d113      	bne.n	8003f1e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4a17      	ldr	r2, [pc, #92]	; (8003f58 <TIM_OC2_SetConfig+0x100>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <TIM_OC2_SetConfig+0x104>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	621a      	str	r2, [r3, #32]
}
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b006      	add	sp, #24
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	feff8fff 	.word	0xfeff8fff
 8003f44:	fffffcff 	.word	0xfffffcff
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800
 8003f58:	fffffbff 	.word	0xfffffbff
 8003f5c:	fffff7ff 	.word	0xfffff7ff

08003f60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	4a35      	ldr	r2, [pc, #212]	; (8004044 <TIM_OC3_SetConfig+0xe4>)
 8003f70:	401a      	ands	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a2f      	ldr	r2, [pc, #188]	; (8004048 <TIM_OC3_SetConfig+0xe8>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2203      	movs	r2, #3
 8003f94:	4393      	bics	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	4a29      	ldr	r2, [pc, #164]	; (800404c <TIM_OC3_SetConfig+0xec>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a25      	ldr	r2, [pc, #148]	; (8004050 <TIM_OC3_SetConfig+0xf0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d10d      	bne.n	8003fda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	4a24      	ldr	r2, [pc, #144]	; (8004054 <TIM_OC3_SetConfig+0xf4>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	4a20      	ldr	r2, [pc, #128]	; (8004058 <TIM_OC3_SetConfig+0xf8>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1c      	ldr	r2, [pc, #112]	; (8004050 <TIM_OC3_SetConfig+0xf0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00b      	beq.n	8003ffa <TIM_OC3_SetConfig+0x9a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1d      	ldr	r2, [pc, #116]	; (800405c <TIM_OC3_SetConfig+0xfc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d007      	beq.n	8003ffa <TIM_OC3_SetConfig+0x9a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1c      	ldr	r2, [pc, #112]	; (8004060 <TIM_OC3_SetConfig+0x100>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <TIM_OC3_SetConfig+0x9a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <TIM_OC3_SetConfig+0x104>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d113      	bne.n	8004022 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4a1a      	ldr	r2, [pc, #104]	; (8004068 <TIM_OC3_SetConfig+0x108>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4a19      	ldr	r2, [pc, #100]	; (800406c <TIM_OC3_SetConfig+0x10c>)
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	621a      	str	r2, [r3, #32]
}
 800403c:	46c0      	nop			; (mov r8, r8)
 800403e:	46bd      	mov	sp, r7
 8004040:	b006      	add	sp, #24
 8004042:	bd80      	pop	{r7, pc}
 8004044:	fffffeff 	.word	0xfffffeff
 8004048:	fffeff8f 	.word	0xfffeff8f
 800404c:	fffffdff 	.word	0xfffffdff
 8004050:	40012c00 	.word	0x40012c00
 8004054:	fffff7ff 	.word	0xfffff7ff
 8004058:	fffffbff 	.word	0xfffffbff
 800405c:	40014000 	.word	0x40014000
 8004060:	40014400 	.word	0x40014400
 8004064:	40014800 	.word	0x40014800
 8004068:	ffffefff 	.word	0xffffefff
 800406c:	ffffdfff 	.word	0xffffdfff

08004070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	4a28      	ldr	r2, [pc, #160]	; (8004120 <TIM_OC4_SetConfig+0xb0>)
 8004080:	401a      	ands	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4a22      	ldr	r2, [pc, #136]	; (8004124 <TIM_OC4_SetConfig+0xb4>)
 800409c:	4013      	ands	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a21      	ldr	r2, [pc, #132]	; (8004128 <TIM_OC4_SetConfig+0xb8>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4a1d      	ldr	r2, [pc, #116]	; (800412c <TIM_OC4_SetConfig+0xbc>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	031b      	lsls	r3, r3, #12
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a19      	ldr	r2, [pc, #100]	; (8004130 <TIM_OC4_SetConfig+0xc0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00b      	beq.n	80040e8 <TIM_OC4_SetConfig+0x78>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a18      	ldr	r2, [pc, #96]	; (8004134 <TIM_OC4_SetConfig+0xc4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d007      	beq.n	80040e8 <TIM_OC4_SetConfig+0x78>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a17      	ldr	r2, [pc, #92]	; (8004138 <TIM_OC4_SetConfig+0xc8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_OC4_SetConfig+0x78>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a16      	ldr	r2, [pc, #88]	; (800413c <TIM_OC4_SetConfig+0xcc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d109      	bne.n	80040fc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	4a15      	ldr	r2, [pc, #84]	; (8004140 <TIM_OC4_SetConfig+0xd0>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	019b      	lsls	r3, r3, #6
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	621a      	str	r2, [r3, #32]
}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	46bd      	mov	sp, r7
 800411a:	b006      	add	sp, #24
 800411c:	bd80      	pop	{r7, pc}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	ffffefff 	.word	0xffffefff
 8004124:	feff8fff 	.word	0xfeff8fff
 8004128:	fffffcff 	.word	0xfffffcff
 800412c:	ffffdfff 	.word	0xffffdfff
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40014000 	.word	0x40014000
 8004138:	40014400 	.word	0x40014400
 800413c:	40014800 	.word	0x40014800
 8004140:	ffffbfff 	.word	0xffffbfff

08004144 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	4a25      	ldr	r2, [pc, #148]	; (80041e8 <TIM_OC5_SetConfig+0xa4>)
 8004154:	401a      	ands	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <TIM_OC5_SetConfig+0xa8>)
 8004170:	4013      	ands	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <TIM_OC5_SetConfig+0xac>)
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	041b      	lsls	r3, r3, #16
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a17      	ldr	r2, [pc, #92]	; (80041f4 <TIM_OC5_SetConfig+0xb0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00b      	beq.n	80041b2 <TIM_OC5_SetConfig+0x6e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <TIM_OC5_SetConfig+0xb4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <TIM_OC5_SetConfig+0x6e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a15      	ldr	r2, [pc, #84]	; (80041fc <TIM_OC5_SetConfig+0xb8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d003      	beq.n	80041b2 <TIM_OC5_SetConfig+0x6e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a14      	ldr	r2, [pc, #80]	; (8004200 <TIM_OC5_SetConfig+0xbc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d109      	bne.n	80041c6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <TIM_OC5_SetConfig+0xa4>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	621a      	str	r2, [r3, #32]
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b006      	add	sp, #24
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	fffeffff 	.word	0xfffeffff
 80041ec:	fffeff8f 	.word	0xfffeff8f
 80041f0:	fffdffff 	.word	0xfffdffff
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40014000 	.word	0x40014000
 80041fc:	40014400 	.word	0x40014400
 8004200:	40014800 	.word	0x40014800

08004204 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4a26      	ldr	r2, [pc, #152]	; (80042ac <TIM_OC6_SetConfig+0xa8>)
 8004214:	401a      	ands	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4a20      	ldr	r2, [pc, #128]	; (80042b0 <TIM_OC6_SetConfig+0xac>)
 8004230:	4013      	ands	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4a1c      	ldr	r2, [pc, #112]	; (80042b4 <TIM_OC6_SetConfig+0xb0>)
 8004244:	4013      	ands	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	051b      	lsls	r3, r3, #20
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a18      	ldr	r2, [pc, #96]	; (80042b8 <TIM_OC6_SetConfig+0xb4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d00b      	beq.n	8004274 <TIM_OC6_SetConfig+0x70>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a17      	ldr	r2, [pc, #92]	; (80042bc <TIM_OC6_SetConfig+0xb8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d007      	beq.n	8004274 <TIM_OC6_SetConfig+0x70>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a16      	ldr	r2, [pc, #88]	; (80042c0 <TIM_OC6_SetConfig+0xbc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <TIM_OC6_SetConfig+0x70>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a15      	ldr	r2, [pc, #84]	; (80042c4 <TIM_OC6_SetConfig+0xc0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d109      	bne.n	8004288 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	4a14      	ldr	r2, [pc, #80]	; (80042c8 <TIM_OC6_SetConfig+0xc4>)
 8004278:	4013      	ands	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	029b      	lsls	r3, r3, #10
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	621a      	str	r2, [r3, #32]
}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b006      	add	sp, #24
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	ffefffff 	.word	0xffefffff
 80042b0:	feff8fff 	.word	0xfeff8fff
 80042b4:	ffdfffff 	.word	0xffdfffff
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40014000 	.word	0x40014000
 80042c0:	40014400 	.word	0x40014400
 80042c4:	40014800 	.word	0x40014800
 80042c8:	fffbffff 	.word	0xfffbffff

080042cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	221f      	movs	r2, #31
 80042dc:	4013      	ands	r3, r2
 80042de:	2201      	movs	r2, #1
 80042e0:	409a      	lsls	r2, r3
 80042e2:	0013      	movs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	43d2      	mvns	r2, r2
 80042ee:	401a      	ands	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a1a      	ldr	r2, [r3, #32]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	211f      	movs	r1, #31
 80042fc:	400b      	ands	r3, r1
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4099      	lsls	r1, r3
 8004302:	000b      	movs	r3, r1
 8004304:	431a      	orrs	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b006      	add	sp, #24
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	223c      	movs	r2, #60	; 0x3c
 8004322:	5c9b      	ldrb	r3, [r3, r2]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004328:	2302      	movs	r3, #2
 800432a:	e055      	b.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	223c      	movs	r2, #60	; 0x3c
 8004330:	2101      	movs	r1, #1
 8004332:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	223d      	movs	r2, #61	; 0x3d
 8004338:	2102      	movs	r1, #2
 800433a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a23      	ldr	r2, [pc, #140]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d108      	bne.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a22      	ldr	r2, [pc, #136]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800435a:	4013      	ands	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2270      	movs	r2, #112	; 0x70
 800436c:	4393      	bics	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a16      	ldr	r2, [pc, #88]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00f      	beq.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	05db      	lsls	r3, r3, #23
 8004394:	429a      	cmp	r2, r3
 8004396:	d009      	beq.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a12      	ldr	r2, [pc, #72]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a11      	ldr	r2, [pc, #68]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d10c      	bne.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2280      	movs	r2, #128	; 0x80
 80043b0:	4393      	bics	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	223d      	movs	r2, #61	; 0x3d
 80043ca:	2101      	movs	r1, #1
 80043cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	223c      	movs	r2, #60	; 0x3c
 80043d2:	2100      	movs	r1, #0
 80043d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	0018      	movs	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	b004      	add	sp, #16
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	ff0fffff 	.word	0xff0fffff
 80043e8:	40000400 	.word	0x40000400
 80043ec:	40014000 	.word	0x40014000

080043f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	223c      	movs	r2, #60	; 0x3c
 8004402:	5c9b      	ldrb	r3, [r3, r2]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004408:	2302      	movs	r3, #2
 800440a:	e079      	b.n	8004500 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	223c      	movs	r2, #60	; 0x3c
 8004410:	2101      	movs	r1, #1
 8004412:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	22ff      	movs	r2, #255	; 0xff
 8004418:	4393      	bics	r3, r2
 800441a:	001a      	movs	r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4a38      	ldr	r2, [pc, #224]	; (8004508 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004428:	401a      	ands	r2, r3
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4a35      	ldr	r2, [pc, #212]	; (800450c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004436:	401a      	ands	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4a33      	ldr	r2, [pc, #204]	; (8004510 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004444:	401a      	ands	r2, r3
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4a30      	ldr	r2, [pc, #192]	; (8004514 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004452:	401a      	ands	r2, r3
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4a2e      	ldr	r2, [pc, #184]	; (8004518 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004460:	401a      	ands	r2, r3
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a2b      	ldr	r2, [pc, #172]	; (800451c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800446e:	401a      	ands	r2, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4a29      	ldr	r2, [pc, #164]	; (8004520 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800447c:	401a      	ands	r2, r3
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	041b      	lsls	r3, r3, #16
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a25      	ldr	r2, [pc, #148]	; (8004524 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d106      	bne.n	80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4a24      	ldr	r2, [pc, #144]	; (8004528 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004496:	401a      	ands	r2, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d121      	bne.n	80044ee <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4a1f      	ldr	r2, [pc, #124]	; (800452c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80044ae:	401a      	ands	r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	051b      	lsls	r3, r3, #20
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4a1c      	ldr	r2, [pc, #112]	; (8004530 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80044be:	401a      	ands	r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a1a      	ldr	r2, [pc, #104]	; (8004534 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80044cc:	401a      	ands	r2, r3
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a12      	ldr	r2, [pc, #72]	; (8004524 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d106      	bne.n	80044ee <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a15      	ldr	r2, [pc, #84]	; (8004538 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80044e4:	401a      	ands	r2, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	223c      	movs	r2, #60	; 0x3c
 80044fa:	2100      	movs	r1, #0
 80044fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	b004      	add	sp, #16
 8004506:	bd80      	pop	{r7, pc}
 8004508:	fffffcff 	.word	0xfffffcff
 800450c:	fffffbff 	.word	0xfffffbff
 8004510:	fffff7ff 	.word	0xfffff7ff
 8004514:	ffffefff 	.word	0xffffefff
 8004518:	ffffdfff 	.word	0xffffdfff
 800451c:	ffffbfff 	.word	0xffffbfff
 8004520:	fff0ffff 	.word	0xfff0ffff
 8004524:	40012c00 	.word	0x40012c00
 8004528:	efffffff 	.word	0xefffffff
 800452c:	ff0fffff 	.word	0xff0fffff
 8004530:	feffffff 	.word	0xfeffffff
 8004534:	fdffffff 	.word	0xfdffffff
 8004538:	dfffffff 	.word	0xdfffffff

0800453c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e046      	b.n	80045dc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2288      	movs	r2, #136	; 0x88
 8004552:	589b      	ldr	r3, [r3, r2]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d107      	bne.n	8004568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2284      	movs	r2, #132	; 0x84
 800455c:	2100      	movs	r1, #0
 800455e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	0018      	movs	r0, r3
 8004564:	f7fc fe32 	bl	80011cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2288      	movs	r2, #136	; 0x88
 800456c:	2124      	movs	r1, #36	; 0x24
 800456e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2101      	movs	r1, #1
 800457c:	438a      	bics	r2, r1
 800457e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	0018      	movs	r0, r3
 8004584:	f000 f830 	bl	80045e8 <UART_SetConfig>
 8004588:	0003      	movs	r3, r0
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e024      	b.n	80045dc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	0018      	movs	r0, r3
 800459e:	f000 fa9b 	bl	8004ad8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	490d      	ldr	r1, [pc, #52]	; (80045e4 <HAL_UART_Init+0xa8>)
 80045ae:	400a      	ands	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	212a      	movs	r1, #42	; 0x2a
 80045be:	438a      	bics	r2, r1
 80045c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2101      	movs	r1, #1
 80045ce:	430a      	orrs	r2, r1
 80045d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f000 fb33 	bl	8004c40 <UART_CheckIdleState>
 80045da:	0003      	movs	r3, r0
}
 80045dc:	0018      	movs	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	b002      	add	sp, #8
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	ffffb7ff 	.word	0xffffb7ff

080045e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e8:	b5b0      	push	{r4, r5, r7, lr}
 80045ea:	b090      	sub	sp, #64	; 0x40
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045f0:	231a      	movs	r3, #26
 80045f2:	2220      	movs	r2, #32
 80045f4:	189b      	adds	r3, r3, r2
 80045f6:	19db      	adds	r3, r3, r7
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	431a      	orrs	r2, r3
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	431a      	orrs	r2, r3
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	4313      	orrs	r3, r2
 8004612:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4ac4      	ldr	r2, [pc, #784]	; (800492c <UART_SetConfig+0x344>)
 800461c:	4013      	ands	r3, r2
 800461e:	0019      	movs	r1, r3
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004626:	430b      	orrs	r3, r1
 8004628:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4abf      	ldr	r2, [pc, #764]	; (8004930 <UART_SetConfig+0x348>)
 8004632:	4013      	ands	r3, r2
 8004634:	0018      	movs	r0, r3
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	68d9      	ldr	r1, [r3, #12]
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	0003      	movs	r3, r0
 8004640:	430b      	orrs	r3, r1
 8004642:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4ab9      	ldr	r2, [pc, #740]	; (8004934 <UART_SetConfig+0x34c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d004      	beq.n	800465e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800465a:	4313      	orrs	r3, r2
 800465c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4ab4      	ldr	r2, [pc, #720]	; (8004938 <UART_SetConfig+0x350>)
 8004666:	4013      	ands	r3, r2
 8004668:	0019      	movs	r1, r3
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004670:	430b      	orrs	r3, r1
 8004672:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	220f      	movs	r2, #15
 800467c:	4393      	bics	r3, r2
 800467e:	0018      	movs	r0, r3
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	0003      	movs	r3, r0
 800468a:	430b      	orrs	r3, r1
 800468c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4aaa      	ldr	r2, [pc, #680]	; (800493c <UART_SetConfig+0x354>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d131      	bne.n	80046fc <UART_SetConfig+0x114>
 8004698:	4ba9      	ldr	r3, [pc, #676]	; (8004940 <UART_SetConfig+0x358>)
 800469a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469c:	2203      	movs	r2, #3
 800469e:	4013      	ands	r3, r2
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d01d      	beq.n	80046e0 <UART_SetConfig+0xf8>
 80046a4:	d823      	bhi.n	80046ee <UART_SetConfig+0x106>
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d00c      	beq.n	80046c4 <UART_SetConfig+0xdc>
 80046aa:	d820      	bhi.n	80046ee <UART_SetConfig+0x106>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <UART_SetConfig+0xce>
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d00e      	beq.n	80046d2 <UART_SetConfig+0xea>
 80046b4:	e01b      	b.n	80046ee <UART_SetConfig+0x106>
 80046b6:	231b      	movs	r3, #27
 80046b8:	2220      	movs	r2, #32
 80046ba:	189b      	adds	r3, r3, r2
 80046bc:	19db      	adds	r3, r3, r7
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	e071      	b.n	80047a8 <UART_SetConfig+0x1c0>
 80046c4:	231b      	movs	r3, #27
 80046c6:	2220      	movs	r2, #32
 80046c8:	189b      	adds	r3, r3, r2
 80046ca:	19db      	adds	r3, r3, r7
 80046cc:	2202      	movs	r2, #2
 80046ce:	701a      	strb	r2, [r3, #0]
 80046d0:	e06a      	b.n	80047a8 <UART_SetConfig+0x1c0>
 80046d2:	231b      	movs	r3, #27
 80046d4:	2220      	movs	r2, #32
 80046d6:	189b      	adds	r3, r3, r2
 80046d8:	19db      	adds	r3, r3, r7
 80046da:	2204      	movs	r2, #4
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	e063      	b.n	80047a8 <UART_SetConfig+0x1c0>
 80046e0:	231b      	movs	r3, #27
 80046e2:	2220      	movs	r2, #32
 80046e4:	189b      	adds	r3, r3, r2
 80046e6:	19db      	adds	r3, r3, r7
 80046e8:	2208      	movs	r2, #8
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	e05c      	b.n	80047a8 <UART_SetConfig+0x1c0>
 80046ee:	231b      	movs	r3, #27
 80046f0:	2220      	movs	r2, #32
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	19db      	adds	r3, r3, r7
 80046f6:	2210      	movs	r2, #16
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e055      	b.n	80047a8 <UART_SetConfig+0x1c0>
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a90      	ldr	r2, [pc, #576]	; (8004944 <UART_SetConfig+0x35c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d106      	bne.n	8004714 <UART_SetConfig+0x12c>
 8004706:	231b      	movs	r3, #27
 8004708:	2220      	movs	r2, #32
 800470a:	189b      	adds	r3, r3, r2
 800470c:	19db      	adds	r3, r3, r7
 800470e:	2200      	movs	r2, #0
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	e049      	b.n	80047a8 <UART_SetConfig+0x1c0>
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a86      	ldr	r2, [pc, #536]	; (8004934 <UART_SetConfig+0x34c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d13e      	bne.n	800479c <UART_SetConfig+0x1b4>
 800471e:	4b88      	ldr	r3, [pc, #544]	; (8004940 <UART_SetConfig+0x358>)
 8004720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004722:	23c0      	movs	r3, #192	; 0xc0
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	4013      	ands	r3, r2
 8004728:	22c0      	movs	r2, #192	; 0xc0
 800472a:	0112      	lsls	r2, r2, #4
 800472c:	4293      	cmp	r3, r2
 800472e:	d027      	beq.n	8004780 <UART_SetConfig+0x198>
 8004730:	22c0      	movs	r2, #192	; 0xc0
 8004732:	0112      	lsls	r2, r2, #4
 8004734:	4293      	cmp	r3, r2
 8004736:	d82a      	bhi.n	800478e <UART_SetConfig+0x1a6>
 8004738:	2280      	movs	r2, #128	; 0x80
 800473a:	0112      	lsls	r2, r2, #4
 800473c:	4293      	cmp	r3, r2
 800473e:	d011      	beq.n	8004764 <UART_SetConfig+0x17c>
 8004740:	2280      	movs	r2, #128	; 0x80
 8004742:	0112      	lsls	r2, r2, #4
 8004744:	4293      	cmp	r3, r2
 8004746:	d822      	bhi.n	800478e <UART_SetConfig+0x1a6>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <UART_SetConfig+0x16e>
 800474c:	2280      	movs	r2, #128	; 0x80
 800474e:	00d2      	lsls	r2, r2, #3
 8004750:	4293      	cmp	r3, r2
 8004752:	d00e      	beq.n	8004772 <UART_SetConfig+0x18a>
 8004754:	e01b      	b.n	800478e <UART_SetConfig+0x1a6>
 8004756:	231b      	movs	r3, #27
 8004758:	2220      	movs	r2, #32
 800475a:	189b      	adds	r3, r3, r2
 800475c:	19db      	adds	r3, r3, r7
 800475e:	2200      	movs	r2, #0
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e021      	b.n	80047a8 <UART_SetConfig+0x1c0>
 8004764:	231b      	movs	r3, #27
 8004766:	2220      	movs	r2, #32
 8004768:	189b      	adds	r3, r3, r2
 800476a:	19db      	adds	r3, r3, r7
 800476c:	2202      	movs	r2, #2
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e01a      	b.n	80047a8 <UART_SetConfig+0x1c0>
 8004772:	231b      	movs	r3, #27
 8004774:	2220      	movs	r2, #32
 8004776:	189b      	adds	r3, r3, r2
 8004778:	19db      	adds	r3, r3, r7
 800477a:	2204      	movs	r2, #4
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	e013      	b.n	80047a8 <UART_SetConfig+0x1c0>
 8004780:	231b      	movs	r3, #27
 8004782:	2220      	movs	r2, #32
 8004784:	189b      	adds	r3, r3, r2
 8004786:	19db      	adds	r3, r3, r7
 8004788:	2208      	movs	r2, #8
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e00c      	b.n	80047a8 <UART_SetConfig+0x1c0>
 800478e:	231b      	movs	r3, #27
 8004790:	2220      	movs	r2, #32
 8004792:	189b      	adds	r3, r3, r2
 8004794:	19db      	adds	r3, r3, r7
 8004796:	2210      	movs	r2, #16
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	e005      	b.n	80047a8 <UART_SetConfig+0x1c0>
 800479c:	231b      	movs	r3, #27
 800479e:	2220      	movs	r2, #32
 80047a0:	189b      	adds	r3, r3, r2
 80047a2:	19db      	adds	r3, r3, r7
 80047a4:	2210      	movs	r2, #16
 80047a6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a61      	ldr	r2, [pc, #388]	; (8004934 <UART_SetConfig+0x34c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d000      	beq.n	80047b4 <UART_SetConfig+0x1cc>
 80047b2:	e092      	b.n	80048da <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047b4:	231b      	movs	r3, #27
 80047b6:	2220      	movs	r2, #32
 80047b8:	189b      	adds	r3, r3, r2
 80047ba:	19db      	adds	r3, r3, r7
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d015      	beq.n	80047ee <UART_SetConfig+0x206>
 80047c2:	dc18      	bgt.n	80047f6 <UART_SetConfig+0x20e>
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d00d      	beq.n	80047e4 <UART_SetConfig+0x1fc>
 80047c8:	dc15      	bgt.n	80047f6 <UART_SetConfig+0x20e>
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <UART_SetConfig+0x1ec>
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d005      	beq.n	80047de <UART_SetConfig+0x1f6>
 80047d2:	e010      	b.n	80047f6 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7fe fd6e 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 80047d8:	0003      	movs	r3, r0
 80047da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047dc:	e014      	b.n	8004808 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047de:	4b5a      	ldr	r3, [pc, #360]	; (8004948 <UART_SetConfig+0x360>)
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047e2:	e011      	b.n	8004808 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e4:	f7fe fcdc 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 80047e8:	0003      	movs	r3, r0
 80047ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047ec:	e00c      	b.n	8004808 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047f4:	e008      	b.n	8004808 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80047fa:	231a      	movs	r3, #26
 80047fc:	2220      	movs	r2, #32
 80047fe:	189b      	adds	r3, r3, r2
 8004800:	19db      	adds	r3, r3, r7
 8004802:	2201      	movs	r2, #1
 8004804:	701a      	strb	r2, [r3, #0]
        break;
 8004806:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480a:	2b00      	cmp	r3, #0
 800480c:	d100      	bne.n	8004810 <UART_SetConfig+0x228>
 800480e:	e147      	b.n	8004aa0 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004814:	4b4d      	ldr	r3, [pc, #308]	; (800494c <UART_SetConfig+0x364>)
 8004816:	0052      	lsls	r2, r2, #1
 8004818:	5ad3      	ldrh	r3, [r2, r3]
 800481a:	0019      	movs	r1, r3
 800481c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800481e:	f7fb fc73 	bl	8000108 <__udivsi3>
 8004822:	0003      	movs	r3, r0
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	0013      	movs	r3, r2
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	189b      	adds	r3, r3, r2
 8004830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004832:	429a      	cmp	r2, r3
 8004834:	d305      	bcc.n	8004842 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800483c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800483e:	429a      	cmp	r2, r3
 8004840:	d906      	bls.n	8004850 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004842:	231a      	movs	r3, #26
 8004844:	2220      	movs	r2, #32
 8004846:	189b      	adds	r3, r3, r2
 8004848:	19db      	adds	r3, r3, r7
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	e127      	b.n	8004aa0 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800485c:	4b3b      	ldr	r3, [pc, #236]	; (800494c <UART_SetConfig+0x364>)
 800485e:	0052      	lsls	r2, r2, #1
 8004860:	5ad3      	ldrh	r3, [r2, r3]
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	69b8      	ldr	r0, [r7, #24]
 800486e:	69f9      	ldr	r1, [r7, #28]
 8004870:	f7fb fdc0 	bl	80003f4 <__aeabi_uldivmod>
 8004874:	0002      	movs	r2, r0
 8004876:	000b      	movs	r3, r1
 8004878:	0e11      	lsrs	r1, r2, #24
 800487a:	021d      	lsls	r5, r3, #8
 800487c:	430d      	orrs	r5, r1
 800487e:	0214      	lsls	r4, r2, #8
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68b8      	ldr	r0, [r7, #8]
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	1900      	adds	r0, r0, r4
 8004892:	4169      	adcs	r1, r5
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f7fb fda7 	bl	80003f4 <__aeabi_uldivmod>
 80048a6:	0002      	movs	r2, r0
 80048a8:	000b      	movs	r3, r1
 80048aa:	0013      	movs	r3, r2
 80048ac:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b0:	23c0      	movs	r3, #192	; 0xc0
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d309      	bcc.n	80048cc <UART_SetConfig+0x2e4>
 80048b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ba:	2380      	movs	r3, #128	; 0x80
 80048bc:	035b      	lsls	r3, r3, #13
 80048be:	429a      	cmp	r2, r3
 80048c0:	d204      	bcs.n	80048cc <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	e0e9      	b.n	8004aa0 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80048cc:	231a      	movs	r3, #26
 80048ce:	2220      	movs	r2, #32
 80048d0:	189b      	adds	r3, r3, r2
 80048d2:	19db      	adds	r3, r3, r7
 80048d4:	2201      	movs	r2, #1
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	e0e2      	b.n	8004aa0 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d000      	beq.n	80048e8 <UART_SetConfig+0x300>
 80048e6:	e083      	b.n	80049f0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80048e8:	231b      	movs	r3, #27
 80048ea:	2220      	movs	r2, #32
 80048ec:	189b      	adds	r3, r3, r2
 80048ee:	19db      	adds	r3, r3, r7
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d015      	beq.n	8004922 <UART_SetConfig+0x33a>
 80048f6:	dc2b      	bgt.n	8004950 <UART_SetConfig+0x368>
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d00d      	beq.n	8004918 <UART_SetConfig+0x330>
 80048fc:	dc28      	bgt.n	8004950 <UART_SetConfig+0x368>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <UART_SetConfig+0x320>
 8004902:	2b02      	cmp	r3, #2
 8004904:	d005      	beq.n	8004912 <UART_SetConfig+0x32a>
 8004906:	e023      	b.n	8004950 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004908:	f7fe fcd4 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 800490c:	0003      	movs	r3, r0
 800490e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004910:	e027      	b.n	8004962 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004912:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <UART_SetConfig+0x360>)
 8004914:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004916:	e024      	b.n	8004962 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004918:	f7fe fc42 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 800491c:	0003      	movs	r3, r0
 800491e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004920:	e01f      	b.n	8004962 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004922:	2380      	movs	r3, #128	; 0x80
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004928:	e01b      	b.n	8004962 <UART_SetConfig+0x37a>
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	cfff69f3 	.word	0xcfff69f3
 8004930:	ffffcfff 	.word	0xffffcfff
 8004934:	40008000 	.word	0x40008000
 8004938:	11fff4ff 	.word	0x11fff4ff
 800493c:	40013800 	.word	0x40013800
 8004940:	40021000 	.word	0x40021000
 8004944:	40004400 	.word	0x40004400
 8004948:	00f42400 	.word	0x00f42400
 800494c:	080051c4 	.word	0x080051c4
      default:
        pclk = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004954:	231a      	movs	r3, #26
 8004956:	2220      	movs	r2, #32
 8004958:	189b      	adds	r3, r3, r2
 800495a:	19db      	adds	r3, r3, r7
 800495c:	2201      	movs	r2, #1
 800495e:	701a      	strb	r2, [r3, #0]
        break;
 8004960:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004964:	2b00      	cmp	r3, #0
 8004966:	d100      	bne.n	800496a <UART_SetConfig+0x382>
 8004968:	e09a      	b.n	8004aa0 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800496e:	4b58      	ldr	r3, [pc, #352]	; (8004ad0 <UART_SetConfig+0x4e8>)
 8004970:	0052      	lsls	r2, r2, #1
 8004972:	5ad3      	ldrh	r3, [r2, r3]
 8004974:	0019      	movs	r1, r3
 8004976:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004978:	f7fb fbc6 	bl	8000108 <__udivsi3>
 800497c:	0003      	movs	r3, r0
 800497e:	005a      	lsls	r2, r3, #1
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	18d2      	adds	r2, r2, r3
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	0019      	movs	r1, r3
 800498e:	0010      	movs	r0, r2
 8004990:	f7fb fbba 	bl	8000108 <__udivsi3>
 8004994:	0003      	movs	r3, r0
 8004996:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	2b0f      	cmp	r3, #15
 800499c:	d921      	bls.n	80049e2 <UART_SetConfig+0x3fa>
 800499e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	025b      	lsls	r3, r3, #9
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d21c      	bcs.n	80049e2 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	200e      	movs	r0, #14
 80049ae:	2420      	movs	r4, #32
 80049b0:	1903      	adds	r3, r0, r4
 80049b2:	19db      	adds	r3, r3, r7
 80049b4:	210f      	movs	r1, #15
 80049b6:	438a      	bics	r2, r1
 80049b8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	085b      	lsrs	r3, r3, #1
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2207      	movs	r2, #7
 80049c2:	4013      	ands	r3, r2
 80049c4:	b299      	uxth	r1, r3
 80049c6:	1903      	adds	r3, r0, r4
 80049c8:	19db      	adds	r3, r3, r7
 80049ca:	1902      	adds	r2, r0, r4
 80049cc:	19d2      	adds	r2, r2, r7
 80049ce:	8812      	ldrh	r2, [r2, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	1902      	adds	r2, r0, r4
 80049da:	19d2      	adds	r2, r2, r7
 80049dc:	8812      	ldrh	r2, [r2, #0]
 80049de:	60da      	str	r2, [r3, #12]
 80049e0:	e05e      	b.n	8004aa0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80049e2:	231a      	movs	r3, #26
 80049e4:	2220      	movs	r2, #32
 80049e6:	189b      	adds	r3, r3, r2
 80049e8:	19db      	adds	r3, r3, r7
 80049ea:	2201      	movs	r2, #1
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	e057      	b.n	8004aa0 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049f0:	231b      	movs	r3, #27
 80049f2:	2220      	movs	r2, #32
 80049f4:	189b      	adds	r3, r3, r2
 80049f6:	19db      	adds	r3, r3, r7
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d015      	beq.n	8004a2a <UART_SetConfig+0x442>
 80049fe:	dc18      	bgt.n	8004a32 <UART_SetConfig+0x44a>
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d00d      	beq.n	8004a20 <UART_SetConfig+0x438>
 8004a04:	dc15      	bgt.n	8004a32 <UART_SetConfig+0x44a>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <UART_SetConfig+0x428>
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d005      	beq.n	8004a1a <UART_SetConfig+0x432>
 8004a0e:	e010      	b.n	8004a32 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a10:	f7fe fc50 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8004a14:	0003      	movs	r3, r0
 8004a16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a18:	e014      	b.n	8004a44 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a1a:	4b2e      	ldr	r3, [pc, #184]	; (8004ad4 <UART_SetConfig+0x4ec>)
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a1e:	e011      	b.n	8004a44 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a20:	f7fe fbbe 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 8004a24:	0003      	movs	r3, r0
 8004a26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a28:	e00c      	b.n	8004a44 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a30:	e008      	b.n	8004a44 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004a36:	231a      	movs	r3, #26
 8004a38:	2220      	movs	r2, #32
 8004a3a:	189b      	adds	r3, r3, r2
 8004a3c:	19db      	adds	r3, r3, r7
 8004a3e:	2201      	movs	r2, #1
 8004a40:	701a      	strb	r2, [r3, #0]
        break;
 8004a42:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d02a      	beq.n	8004aa0 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a4e:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <UART_SetConfig+0x4e8>)
 8004a50:	0052      	lsls	r2, r2, #1
 8004a52:	5ad3      	ldrh	r3, [r2, r3]
 8004a54:	0019      	movs	r1, r3
 8004a56:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a58:	f7fb fb56 	bl	8000108 <__udivsi3>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	001a      	movs	r2, r3
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	085b      	lsrs	r3, r3, #1
 8004a66:	18d2      	adds	r2, r2, r3
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	0010      	movs	r0, r2
 8004a70:	f7fb fb4a 	bl	8000108 <__udivsi3>
 8004a74:	0003      	movs	r3, r0
 8004a76:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	2b0f      	cmp	r3, #15
 8004a7c:	d90a      	bls.n	8004a94 <UART_SetConfig+0x4ac>
 8004a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	025b      	lsls	r3, r3, #9
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d205      	bcs.n	8004a94 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60da      	str	r2, [r3, #12]
 8004a92:	e005      	b.n	8004aa0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a94:	231a      	movs	r3, #26
 8004a96:	2220      	movs	r2, #32
 8004a98:	189b      	adds	r3, r3, r2
 8004a9a:	19db      	adds	r3, r3, r7
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	226a      	movs	r2, #106	; 0x6a
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	2268      	movs	r2, #104	; 0x68
 8004aac:	2101      	movs	r1, #1
 8004aae:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	2200      	movs	r2, #0
 8004aba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004abc:	231a      	movs	r3, #26
 8004abe:	2220      	movs	r2, #32
 8004ac0:	189b      	adds	r3, r3, r2
 8004ac2:	19db      	adds	r3, r3, r7
 8004ac4:	781b      	ldrb	r3, [r3, #0]
}
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b010      	add	sp, #64	; 0x40
 8004acc:	bdb0      	pop	{r4, r5, r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	080051c4 	.word	0x080051c4
 8004ad4:	00f42400 	.word	0x00f42400

08004ad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d00b      	beq.n	8004b02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a4a      	ldr	r2, [pc, #296]	; (8004c1c <UART_AdvFeatureConfig+0x144>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	0019      	movs	r1, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	2202      	movs	r2, #2
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d00b      	beq.n	8004b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4a43      	ldr	r2, [pc, #268]	; (8004c20 <UART_AdvFeatureConfig+0x148>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	0019      	movs	r1, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	2204      	movs	r2, #4
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d00b      	beq.n	8004b46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4a3b      	ldr	r2, [pc, #236]	; (8004c24 <UART_AdvFeatureConfig+0x14c>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	0019      	movs	r1, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	2208      	movs	r2, #8
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d00b      	beq.n	8004b68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	4a34      	ldr	r2, [pc, #208]	; (8004c28 <UART_AdvFeatureConfig+0x150>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	2210      	movs	r2, #16
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d00b      	beq.n	8004b8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4a2c      	ldr	r2, [pc, #176]	; (8004c2c <UART_AdvFeatureConfig+0x154>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	2220      	movs	r2, #32
 8004b90:	4013      	ands	r3, r2
 8004b92:	d00b      	beq.n	8004bac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	4a25      	ldr	r2, [pc, #148]	; (8004c30 <UART_AdvFeatureConfig+0x158>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	2240      	movs	r2, #64	; 0x40
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d01d      	beq.n	8004bf2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	4a1d      	ldr	r2, [pc, #116]	; (8004c34 <UART_AdvFeatureConfig+0x15c>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	0019      	movs	r1, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd2:	2380      	movs	r3, #128	; 0x80
 8004bd4:	035b      	lsls	r3, r3, #13
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d10b      	bne.n	8004bf2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	4a15      	ldr	r2, [pc, #84]	; (8004c38 <UART_AdvFeatureConfig+0x160>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	0019      	movs	r1, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	2280      	movs	r2, #128	; 0x80
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d00b      	beq.n	8004c14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	4a0e      	ldr	r2, [pc, #56]	; (8004c3c <UART_AdvFeatureConfig+0x164>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	0019      	movs	r1, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	605a      	str	r2, [r3, #4]
  }
}
 8004c14:	46c0      	nop			; (mov r8, r8)
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b002      	add	sp, #8
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	fffdffff 	.word	0xfffdffff
 8004c20:	fffeffff 	.word	0xfffeffff
 8004c24:	fffbffff 	.word	0xfffbffff
 8004c28:	ffff7fff 	.word	0xffff7fff
 8004c2c:	ffffefff 	.word	0xffffefff
 8004c30:	ffffdfff 	.word	0xffffdfff
 8004c34:	ffefffff 	.word	0xffefffff
 8004c38:	ff9fffff 	.word	0xff9fffff
 8004c3c:	fff7ffff 	.word	0xfff7ffff

08004c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2290      	movs	r2, #144	; 0x90
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c50:	f7fc fc32 	bl	80014b8 <HAL_GetTick>
 8004c54:	0003      	movs	r3, r0
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2208      	movs	r2, #8
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d10c      	bne.n	8004c80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2280      	movs	r2, #128	; 0x80
 8004c6a:	0391      	lsls	r1, r2, #14
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	4a1a      	ldr	r2, [pc, #104]	; (8004cd8 <UART_CheckIdleState+0x98>)
 8004c70:	9200      	str	r2, [sp, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f000 f832 	bl	8004cdc <UART_WaitOnFlagUntilTimeout>
 8004c78:	1e03      	subs	r3, r0, #0
 8004c7a:	d001      	beq.n	8004c80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e026      	b.n	8004cce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2204      	movs	r2, #4
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d10c      	bne.n	8004ca8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2280      	movs	r2, #128	; 0x80
 8004c92:	03d1      	lsls	r1, r2, #15
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <UART_CheckIdleState+0x98>)
 8004c98:	9200      	str	r2, [sp, #0]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f000 f81e 	bl	8004cdc <UART_WaitOnFlagUntilTimeout>
 8004ca0:	1e03      	subs	r3, r0, #0
 8004ca2:	d001      	beq.n	8004ca8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e012      	b.n	8004cce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2288      	movs	r2, #136	; 0x88
 8004cac:	2120      	movs	r1, #32
 8004cae:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	228c      	movs	r2, #140	; 0x8c
 8004cb4:	2120      	movs	r1, #32
 8004cb6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2284      	movs	r2, #132	; 0x84
 8004cc8:	2100      	movs	r1, #0
 8004cca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	0018      	movs	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	b004      	add	sp, #16
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	01ffffff 	.word	0x01ffffff

08004cdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b094      	sub	sp, #80	; 0x50
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	1dfb      	adds	r3, r7, #7
 8004cea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cec:	e0a7      	b.n	8004e3e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	d100      	bne.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004cf4:	e0a3      	b.n	8004e3e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf6:	f7fc fbdf 	bl	80014b8 <HAL_GetTick>
 8004cfa:	0002      	movs	r2, r0
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d302      	bcc.n	8004d0c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d13f      	bne.n	8004d8c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d14:	647b      	str	r3, [r7, #68]	; 0x44
 8004d16:	2301      	movs	r3, #1
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	f383 8810 	msr	PRIMASK, r3
}
 8004d20:	46c0      	nop			; (mov r8, r8)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	494e      	ldr	r1, [pc, #312]	; (8004e68 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004d2e:	400a      	ands	r2, r1
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d34:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	f383 8810 	msr	PRIMASK, r3
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d42:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d46:	643b      	str	r3, [r7, #64]	; 0x40
 8004d48:	2301      	movs	r3, #1
 8004d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	f383 8810 	msr	PRIMASK, r3
}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2101      	movs	r1, #1
 8004d60:	438a      	bics	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
 8004d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6a:	f383 8810 	msr	PRIMASK, r3
}
 8004d6e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2288      	movs	r2, #136	; 0x88
 8004d74:	2120      	movs	r1, #32
 8004d76:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	228c      	movs	r2, #140	; 0x8c
 8004d7c:	2120      	movs	r1, #32
 8004d7e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2284      	movs	r2, #132	; 0x84
 8004d84:	2100      	movs	r1, #0
 8004d86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e069      	b.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2204      	movs	r2, #4
 8004d94:	4013      	ands	r3, r2
 8004d96:	d052      	beq.n	8004e3e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69da      	ldr	r2, [r3, #28]
 8004d9e:	2380      	movs	r3, #128	; 0x80
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	401a      	ands	r2, r3
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d148      	bne.n	8004e3e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2280      	movs	r2, #128	; 0x80
 8004db2:	0112      	lsls	r2, r2, #4
 8004db4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db6:	f3ef 8310 	mrs	r3, PRIMASK
 8004dba:	613b      	str	r3, [r7, #16]
  return(result);
 8004dbc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f383 8810 	msr	PRIMASK, r3
}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4924      	ldr	r1, [pc, #144]	; (8004e68 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004dd8:	400a      	ands	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	f383 8810 	msr	PRIMASK, r3
}
 8004de6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dec:	61fb      	str	r3, [r7, #28]
  return(result);
 8004dee:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004df2:	2301      	movs	r3, #1
 8004df4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	f383 8810 	msr	PRIMASK, r3
}
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2101      	movs	r1, #1
 8004e0a:	438a      	bics	r2, r1
 8004e0c:	609a      	str	r2, [r3, #8]
 8004e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	f383 8810 	msr	PRIMASK, r3
}
 8004e18:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2288      	movs	r2, #136	; 0x88
 8004e1e:	2120      	movs	r1, #32
 8004e20:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	228c      	movs	r2, #140	; 0x8c
 8004e26:	2120      	movs	r1, #32
 8004e28:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2290      	movs	r2, #144	; 0x90
 8004e2e:	2120      	movs	r1, #32
 8004e30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2284      	movs	r2, #132	; 0x84
 8004e36:	2100      	movs	r1, #0
 8004e38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e010      	b.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	4013      	ands	r3, r2
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	425a      	negs	r2, r3
 8004e4e:	4153      	adcs	r3, r2
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	001a      	movs	r2, r3
 8004e54:	1dfb      	adds	r3, r7, #7
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d100      	bne.n	8004e5e <UART_WaitOnFlagUntilTimeout+0x182>
 8004e5c:	e747      	b.n	8004cee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	0018      	movs	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b014      	add	sp, #80	; 0x50
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	fffffe5f 	.word	0xfffffe5f

08004e6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2284      	movs	r2, #132	; 0x84
 8004e78:	5c9b      	ldrb	r3, [r3, r2]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_UARTEx_DisableFifoMode+0x16>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e027      	b.n	8004ed2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2284      	movs	r2, #132	; 0x84
 8004e86:	2101      	movs	r1, #1
 8004e88:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2288      	movs	r2, #136	; 0x88
 8004e8e:	2124      	movs	r1, #36	; 0x24
 8004e90:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	438a      	bics	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a0b      	ldr	r2, [pc, #44]	; (8004edc <HAL_UARTEx_DisableFifoMode+0x70>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2288      	movs	r2, #136	; 0x88
 8004ec4:	2120      	movs	r1, #32
 8004ec6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2284      	movs	r2, #132	; 0x84
 8004ecc:	2100      	movs	r1, #0
 8004ece:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b004      	add	sp, #16
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	dfffffff 	.word	0xdfffffff

08004ee0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2284      	movs	r2, #132	; 0x84
 8004eee:	5c9b      	ldrb	r3, [r3, r2]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e02e      	b.n	8004f56 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2284      	movs	r2, #132	; 0x84
 8004efc:	2101      	movs	r1, #1
 8004efe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2288      	movs	r2, #136	; 0x88
 8004f04:	2124      	movs	r1, #36	; 0x24
 8004f06:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	438a      	bics	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	08d9      	lsrs	r1, r3, #3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	0018      	movs	r0, r3
 8004f38:	f000 f854 	bl	8004fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2288      	movs	r2, #136	; 0x88
 8004f48:	2120      	movs	r1, #32
 8004f4a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2284      	movs	r2, #132	; 0x84
 8004f50:	2100      	movs	r1, #0
 8004f52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	0018      	movs	r0, r3
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b004      	add	sp, #16
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2284      	movs	r2, #132	; 0x84
 8004f6e:	5c9b      	ldrb	r3, [r3, r2]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e02f      	b.n	8004fd8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2284      	movs	r2, #132	; 0x84
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2288      	movs	r2, #136	; 0x88
 8004f84:	2124      	movs	r1, #36	; 0x24
 8004f86:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	438a      	bics	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	4a0e      	ldr	r2, [pc, #56]	; (8004fe0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	0019      	movs	r1, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f000 f813 	bl	8004fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2288      	movs	r2, #136	; 0x88
 8004fca:	2120      	movs	r1, #32
 8004fcc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2284      	movs	r2, #132	; 0x84
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	0018      	movs	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b004      	add	sp, #16
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	f1ffffff 	.word	0xf1ffffff

08004fe4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d108      	bne.n	8005006 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	226a      	movs	r2, #106	; 0x6a
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2268      	movs	r2, #104	; 0x68
 8005000:	2101      	movs	r1, #1
 8005002:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005004:	e043      	b.n	800508e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005006:	260f      	movs	r6, #15
 8005008:	19bb      	adds	r3, r7, r6
 800500a:	2208      	movs	r2, #8
 800500c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800500e:	200e      	movs	r0, #14
 8005010:	183b      	adds	r3, r7, r0
 8005012:	2208      	movs	r2, #8
 8005014:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	0e5b      	lsrs	r3, r3, #25
 800501e:	b2da      	uxtb	r2, r3
 8005020:	240d      	movs	r4, #13
 8005022:	193b      	adds	r3, r7, r4
 8005024:	2107      	movs	r1, #7
 8005026:	400a      	ands	r2, r1
 8005028:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	0f5b      	lsrs	r3, r3, #29
 8005032:	b2da      	uxtb	r2, r3
 8005034:	250c      	movs	r5, #12
 8005036:	197b      	adds	r3, r7, r5
 8005038:	2107      	movs	r1, #7
 800503a:	400a      	ands	r2, r1
 800503c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800503e:	183b      	adds	r3, r7, r0
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	197a      	adds	r2, r7, r5
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	4914      	ldr	r1, [pc, #80]	; (8005098 <UARTEx_SetNbDataToProcess+0xb4>)
 8005048:	5c8a      	ldrb	r2, [r1, r2]
 800504a:	435a      	muls	r2, r3
 800504c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800504e:	197b      	adds	r3, r7, r5
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	4a12      	ldr	r2, [pc, #72]	; (800509c <UARTEx_SetNbDataToProcess+0xb8>)
 8005054:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005056:	0019      	movs	r1, r3
 8005058:	f7fb f8e0 	bl	800021c <__divsi3>
 800505c:	0003      	movs	r3, r0
 800505e:	b299      	uxth	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	226a      	movs	r2, #106	; 0x6a
 8005064:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005066:	19bb      	adds	r3, r7, r6
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	193a      	adds	r2, r7, r4
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	490a      	ldr	r1, [pc, #40]	; (8005098 <UARTEx_SetNbDataToProcess+0xb4>)
 8005070:	5c8a      	ldrb	r2, [r1, r2]
 8005072:	435a      	muls	r2, r3
 8005074:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005076:	193b      	adds	r3, r7, r4
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	4a08      	ldr	r2, [pc, #32]	; (800509c <UARTEx_SetNbDataToProcess+0xb8>)
 800507c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800507e:	0019      	movs	r1, r3
 8005080:	f7fb f8cc 	bl	800021c <__divsi3>
 8005084:	0003      	movs	r3, r0
 8005086:	b299      	uxth	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2268      	movs	r2, #104	; 0x68
 800508c:	5299      	strh	r1, [r3, r2]
}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	46bd      	mov	sp, r7
 8005092:	b005      	add	sp, #20
 8005094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	080051dc 	.word	0x080051dc
 800509c:	080051e4 	.word	0x080051e4

080050a0 <__libc_init_array>:
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	2600      	movs	r6, #0
 80050a4:	4d0c      	ldr	r5, [pc, #48]	; (80050d8 <__libc_init_array+0x38>)
 80050a6:	4c0d      	ldr	r4, [pc, #52]	; (80050dc <__libc_init_array+0x3c>)
 80050a8:	1b64      	subs	r4, r4, r5
 80050aa:	10a4      	asrs	r4, r4, #2
 80050ac:	42a6      	cmp	r6, r4
 80050ae:	d109      	bne.n	80050c4 <__libc_init_array+0x24>
 80050b0:	2600      	movs	r6, #0
 80050b2:	f000 f821 	bl	80050f8 <_init>
 80050b6:	4d0a      	ldr	r5, [pc, #40]	; (80050e0 <__libc_init_array+0x40>)
 80050b8:	4c0a      	ldr	r4, [pc, #40]	; (80050e4 <__libc_init_array+0x44>)
 80050ba:	1b64      	subs	r4, r4, r5
 80050bc:	10a4      	asrs	r4, r4, #2
 80050be:	42a6      	cmp	r6, r4
 80050c0:	d105      	bne.n	80050ce <__libc_init_array+0x2e>
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
 80050c4:	00b3      	lsls	r3, r6, #2
 80050c6:	58eb      	ldr	r3, [r5, r3]
 80050c8:	4798      	blx	r3
 80050ca:	3601      	adds	r6, #1
 80050cc:	e7ee      	b.n	80050ac <__libc_init_array+0xc>
 80050ce:	00b3      	lsls	r3, r6, #2
 80050d0:	58eb      	ldr	r3, [r5, r3]
 80050d2:	4798      	blx	r3
 80050d4:	3601      	adds	r6, #1
 80050d6:	e7f2      	b.n	80050be <__libc_init_array+0x1e>
 80050d8:	080051f4 	.word	0x080051f4
 80050dc:	080051f4 	.word	0x080051f4
 80050e0:	080051f4 	.word	0x080051f4
 80050e4:	080051f8 	.word	0x080051f8

080050e8 <memset>:
 80050e8:	0003      	movs	r3, r0
 80050ea:	1882      	adds	r2, r0, r2
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d100      	bne.n	80050f2 <memset+0xa>
 80050f0:	4770      	bx	lr
 80050f2:	7019      	strb	r1, [r3, #0]
 80050f4:	3301      	adds	r3, #1
 80050f6:	e7f9      	b.n	80050ec <memset+0x4>

080050f8 <_init>:
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fe:	bc08      	pop	{r3}
 8005100:	469e      	mov	lr, r3
 8005102:	4770      	bx	lr

08005104 <_fini>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510a:	bc08      	pop	{r3}
 800510c:	469e      	mov	lr, r3
 800510e:	4770      	bx	lr
